{"version":3,"sources":["webpack:///./src/pages/index.js"],"names":["PostDataPoint","field","children","className","PostSubHeader","post","tags","get","frontmatter","date","originalUrl","href","timeToRead","some","map","tag","key","BlogIndex","render","siteTitle","this","siteDescription","posts","location","props","htmlAttributes","lang","meta","name","content","title","node","fields","slug","excerpt","to","dangerouslySetInnerHTML","__html","React","Component","pageQuery"],"mappings":"iRAQA,IAAMA,EAAgB,SAAC,GAAuB,IAAtBC,EAAqB,EAArBA,MAAOC,EAAc,EAAdA,SAC7B,OAAID,EAEA,8BACE,0BAAME,UAAU,QAAhB,KACCD,GAIE,MAILE,EAAgB,SAAC,GAAY,IAAXC,EAAU,EAAVA,KAChBC,EAAOC,IAAIF,EAAM,qBAAuB,GAE9C,OACE,yBAAKF,UAAU,iCACb,8BAAOE,EAAKG,YAAYC,MACxB,kBAACT,EAAD,CAAeC,MAAOI,EAAKG,YAAYE,aACrC,kBAAC,eAAD,CAAcC,KAAMN,EAAKG,YAAYE,aAArC,wBAIF,kBAACV,EAAD,CAAeC,MAAOI,EAAKO,YACzB,8BAAOP,EAAKO,WAAZ,WAEF,kBAACZ,EAAD,CAAeC,MAAOK,EAAKO,MAAK,kBAAM,MACnCP,EAAKQ,KAAI,SAAAC,GACR,OACE,0BAAMC,IAAKD,EAAKZ,UAAU,QAAQY,SAQxCE,E,0LACJC,OAAA,WACE,IAAMC,EAAYZ,IAAIa,KAAM,sCACtBC,EAAkBd,IACtBa,KACA,4CAEIE,EAAQf,IAAIa,KAAM,sCAExB,OACE,kBAAC,IAAD,CAAQG,SAAUH,KAAKI,MAAMD,UAC3B,kBAAC,IAAD,CACEE,eAAgB,CAAEC,KAAM,MACxBC,KAAM,CAAC,CAAEC,KAAM,cAAeC,QAASR,IACvCS,MAAOX,IAERG,EAAMR,KAAI,YAAe,IAAZiB,EAAW,EAAXA,KACND,EAAQvB,IAAIwB,EAAM,sBAAwBA,EAAKC,OAAOC,KACtDC,EAAU3B,IAAIwB,EAAM,wBAA0BA,EAAKG,QAEzD,OACE,yBAAKlB,IAAKe,EAAKC,OAAOC,KAAM9B,UAAU,kCACpC,wBAAIA,UAAU,sCACZ,kBAAC,OAAD,CAAMgC,GAAIJ,EAAKC,OAAOC,MACnBH,IAGL,kBAAC1B,EAAD,CAAeC,KAAM0B,IACrB,uBAAG5B,UAAU,iBAAiBiC,wBAAyB,CAAEC,OAAQH,W,GA5BvDI,IAAMC,WAqCftB,YACR,IAAMuB,EAAS","file":"component---src-pages-index-js-f71e923739c6685c4443.js","sourcesContent":["import React from 'react'\nimport { Link, graphql } from 'gatsby'\nimport { OutboundLink } from 'gatsby-plugin-google-analytics'\nimport get from 'lodash/get'\nimport Helmet from 'react-helmet'\n\nimport Layout from '../components/layout'\n\nconst PostDataPoint = ({field, children}) => {\n  if (field) {\n    return (\n      <span>\n        <span className=\"mx-2\">|</span>\n        {children}\n      </span>\n    )\n  } else {\n    return null\n  }\n}\n\nconst PostSubHeader = ({post}) => {\n  const tags = get(post, 'frontmatter.tags') || []\n\n  return (\n    <div className='frontmatter mt-2 mb-4 text-xs'>\n      <span>{post.frontmatter.date}</span>\n      <PostDataPoint field={post.frontmatter.originalUrl}>\n        <OutboundLink href={post.frontmatter.originalUrl}>\n          Original Publishing\n        </OutboundLink>\n      </PostDataPoint>\n      <PostDataPoint field={post.timeToRead}>\n        <span>{post.timeToRead}m Read</span>\n      </PostDataPoint>\n      <PostDataPoint field={tags.some(() => true)}>\n        {tags.map(tag => {\n          return (\n            <span key={tag} className='ml-2'>{tag}</span>\n          )}\n        )}\n      </PostDataPoint>\n    </div>\n  )\n}\n\nclass BlogIndex extends React.Component {\n  render() {\n    const siteTitle = get(this, 'props.data.site.siteMetadata.title')\n    const siteDescription = get(\n      this,\n      'props.data.site.siteMetadata.description'\n    )\n    const posts = get(this, 'props.data.allMarkdownRemark.edges')\n\n    return (\n      <Layout location={this.props.location}>\n        <Helmet\n          htmlAttributes={{ lang: 'en' }}\n          meta={[{ name: 'description', content: siteDescription }]}\n          title={siteTitle}\n        />\n        {posts.map(({ node }) => {\n          const title = get(node, 'frontmatter.title') || node.fields.slug\n          const excerpt = get(node, 'frontmatter.excerpt') || node.excerpt\n\n          return (\n            <div key={node.fields.slug} className='post-container mb-8 pb-10 mt-0'>\n              <h1 className='text-3xl font-semibold post-header'>\n                <Link to={node.fields.slug}>\n                  {title}\n                </Link>\n              </h1>\n              <PostSubHeader post={node} />\n              <p className='leading-normal' dangerouslySetInnerHTML={{ __html: excerpt }} />\n            </div>\n          )\n        })}\n      </Layout>\n    )\n  }\n}\n\nexport default BlogIndex\nexport const pageQuery = graphql`\n  query {\n    site {\n      siteMetadata {\n        title\n        description\n      }\n    }\n    allMarkdownRemark(sort: { fields: [frontmatter___date], order: DESC }) {\n      edges {\n        node {\n          excerpt\n          timeToRead\n          fields {\n            slug\n          }\n          frontmatter {\n            date(formatString: \"DD MMMM, YYYY\")\n            title\n            tags\n            originalUrl\n            excerpt\n          }\n        }\n      }\n    }\n  }\n`\n"],"sourceRoot":""}