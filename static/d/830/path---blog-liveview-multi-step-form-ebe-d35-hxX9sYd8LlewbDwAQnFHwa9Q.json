{"data":{"site":{"siteMetadata":{"title":"David Bernheisel","author":"David Bernheisel"}},"markdownRemark":{"id":"e50151a4-9f83-5375-ab30-8ad7515d2093","excerpt":"First off, Phoenix LiveView has been a dream to work with so far. I really\nrecommend looking at it for your next web application.One of the…","timeToRead":3,"html":"<p>First off, <a href=\"https://github.com/phoenixframework/phoenix_live_view\">Phoenix LiveView</a> has been a dream to work with so far. I really\nrecommend looking at it for your next web application.</p>\n<p>One of the things I love about LiveView is that it enables me to consolidate\nsome of common front-end logic into the backend, where the source of truth\nbelongs. A great example is a form, especially long-running or multi-step forms.</p>\n<p>Let me show you what I mean.</p>\n<video controls loop autoplay>\n  <source src=\"/long-form-demo-40ae7ab2ef6f6866b0efffa321f5f6c3.mp4\" type=\"video/mp4\">\n  <p>Your browser doesn't support HTML5 video. Here is\n     a <a href=\"/long-form-demo-40ae7ab2ef6f6866b0efffa321f5f6c3.mp4\">link to the video</a> instead.</p>\n</video>\n<p>There’s a couple of traditional components you see in here:</p>\n<ol>\n<li>DatePicker (LiveView)</li>\n<li>Vue-mounted <a href=\"https://tiptap.scrumpy.io/\">TipTap</a> WYSIWYG editor (LiveView, and also mounts a Vue component)</li>\n</ol>\n<p>I coded this form twice. Let me share with you my journey.</p>\n<h2>The Ugly Way (First pass)</h2>\n<p>I coded it all with a single LiveView.</p>\n<p>It become quite ugly.</p>\n<p>I was still trying to figure out what I wanted on the form and still learning\nLiveView generally. Eventually, this LiveView became an ugly 1000+-line horror\nthat managed state in multiple places. I was trying to consolidate logic into a\nchangeset, but needed to expose some of the computed fields out into the socket,\nso I also to copy them out.</p>\n<p>There’s a complicated mechanism in the time picker that made things harder. I\nneeded to detect what was changed:</p>\n<ol>\n<li>Was it the end<em>time? Then let’s extend the duration as well and accept the\nnew end</em>time.</li>\n<li>Was it the start<em>time? Then let’s back the end</em>time up to the same duration\nbefore the change.</li>\n<li>At some point, if the duration is allowed for user-input, then we we’d want\nto extend the end_time with the new duration.</li>\n</ol>\n<p>like the changeset and the socket. It was\npretty terrible. There has to be a better way. It’s a single <code class=\"language-text\">&lt;form&gt;</code> that\nhandled all the attributes, and each step was simply hidden until you hit\n“next”.</p>\n<p>It was something like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"eex\">\n      <pre class=\"language-eex\"><code class=\"language-eex\">&lt;%= f = form_for(@changeset, phx_validate: :validate, phx_save: :save %&gt;\n\n&lt;div class=&quot;&lt;%= unless @step == &quot;who&quot;, do: &quot;hidden&quot; %&gt;&quot;&gt;\n  &lt;%# my Who-related form inputs %&gt;\n&lt;/div&gt;\n\n&lt;div class=&quot;&lt;%= unless @step == &quot;what&quot;, do: &quot;hidden&quot; %&gt;&quot;&gt;\n  &lt;%# my What-related form inputs %&gt;\n&lt;/div&gt;\n\n&lt;div class=&quot;&lt;%= unless @step == &quot;when&quot;, do: &quot;hidden&quot; %&gt;&quot;&gt;\n  &lt;%# my When-related form inputs %&gt;\n&lt;/div&gt;\n\n&lt;/form&gt;</code></pre>\n      </div>\n<p>This was fine when the form was smaller and simpler. However, I quickly found\nthat <strong>calculated fields</strong> can complicate things.</p>\n<p>For example, I need to persist two DateTimes with Timezone, but I don’t want to\npresent that to the user as <code class=\"language-text\">datetime_select</code>s and have them select a timezone\nfrom a dropdown.</p>\n<p>Instead I want a date picker, and then separately collect the times and merge it\nwith the user’s detected timezone (this would later be improved to allow them to\nselect a timezone). Something like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"eex\">\n      <pre class=\"language-eex\"><code class=\"language-eex\">&lt;%= date_select f, :date %&gt;\n&lt;%= time_select f, :start_time %&gt;\n&lt;%= time_select f, :end_time %&gt;</code></pre>\n      </div>\n<p>so in my params, I would receive something like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"elixir\">\n      <pre class=\"language-elixir\"><code class=\"language-elixir\"><span class=\"token punctuation\">%</span><span class=\"token punctuation\">{</span>\n  <span class=\"token string\">\"date\"</span> <span class=\"token operator\">=></span> <span class=\"token string\">\"2020-01-01\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">\"start_time\"</span> <span class=\"token operator\">=></span> <span class=\"token string\">\"08:00\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">\"end_time\"</span> <span class=\"token operator\">=></span> <span class=\"token string\">\"10:00\"</span>\n<span class=\"token punctuation\">}</span></code></pre>\n      </div>\n<p>Ok, so now I have some fields, I need to compute them into my record somehow.\nThis is how it needs to end up:</p>\n<div class=\"gatsby-highlight\" data-language=\"elixir\">\n      <pre class=\"language-elixir\"><code class=\"language-elixir\">record<span class=\"token punctuation\">.</span>start_at_tz <span class=\"token comment\">#=> \"America/New_York\"</span>\nrecord<span class=\"token punctuation\">.</span>start_at_wall <span class=\"token comment\">#=> ~N[2020-01-01T08:00:00]</span>\nrecord<span class=\"token punctuation\">.</span>start_at_utc <span class=\"token comment\">#=> ~U[2020-01-01T13:00:00Z]</span>\n\nrecord<span class=\"token punctuation\">.</span>end_at_tz <span class=\"token comment\">#=> \"America/New_York\"</span>\nrecord<span class=\"token punctuation\">.</span>end_at_wall <span class=\"token comment\">#=> ~N[2020-01-01T10:00:00]</span>\nrecord<span class=\"token punctuation\">.</span>end_at_utc <span class=\"token comment\">#=> ~N[2020-01-01T15:00:00Z]</span>\n\nrecord<span class=\"token punctuation\">.</span>duration <span class=\"token comment\">#=> 7200 # seconds which is 2 hours</span></code></pre>\n      </div>\n<p>This is going to be a lot of work!</p>\n<p>Let’s collect the timezone from the user since we’re missing that information;\nthe rest we can glue together.</p>\n<h2>Getting the user’s timezone</h2>\n<p>We can estimate what the user’s timezone is</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\">hooks<span class=\"token punctuation\">.</span>UserTimeZone <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">mounted</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> phoenix <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> target <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>el<span class=\"token punctuation\">.</span><span class=\"token function\">getAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">'phx-target'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> els <span class=\"token operator\">=</span> phoenix<span class=\"token punctuation\">.</span>el<span class=\"token punctuation\">.</span><span class=\"token function\">querySelectorAll</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"input\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> el <span class=\"token keyword\">of</span> els<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> el<span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> window<span class=\"token punctuation\">.</span>userTimezone<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n    phoenix<span class=\"token punctuation\">.</span><span class=\"token function\">pushEventTo</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> <span class=\"token string\">\"timezone\"</span><span class=\"token punctuation\">,</span> window<span class=\"token punctuation\">.</span>userTimezone<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n      </div>\n<ol start=\"2\">\n<li>Second time around I decided to lean more into LiveComponents</li>\n</ol>","frontmatter":{"title":"Phoenix LiveView: Multi-step forms","date":"May 13, 2020","tags":["elixir","ecto","phoenix"],"originalUrl":null}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/blog/liveview-multi-step-form/","previous":{"fields":{"slug":"/blog/vim-elixir-ls-plug/"},"frontmatter":{"title":"Managing ElixirLS updates in Neovim with asdf and vim-plug","tags":["elixir","vim"],"originalUrl":null,"excerpt":"How I manage ElixirLS, neovim, and coc.nvim with vim-plug."}},"next":null}}