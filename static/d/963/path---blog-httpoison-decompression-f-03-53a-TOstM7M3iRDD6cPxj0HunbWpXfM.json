{"data":{"site":{"siteMetadata":{"title":"David Bernheisel","author":"David Bernheisel"}},"markdownRemark":{"id":"c36c46fe-2df1-5ff8-b4eb-bbf80acc7476","excerpt":"Did you know that Ruby’s Net::HTTP class automatically decompresses responses?\nIt handles a lot of use cases that we don’t have to remember…","timeToRead":2,"html":"<p>Did you know that Ruby’s Net::HTTP class automatically decompresses responses?\nIt handles a lot of use cases that we don’t have to remember ourselves. It’s\nbuilt into Ruby!</p>\n<p>HTTPoison, along with other common HTTP clients like HTTPotion, the new Mint,\nGun, and probably others don’t do this automatically.</p>\n<p>I recently had the pleasure to write a REST API wrapper for a service that\nrandomly gzips responses (some are plain text, some are gzipped, and some say\nthey’re gzipped but is actually plain text); and on top of that I was using\nexvcr in some tests which serializes the request/response chain into JSON.</p>\n<h2>Let’s back up</h2>\n<p>HTTP requests and responses have some headers that tell the client/server what\nformat of content we’re looking for. The ones we care about here is\n<b><a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Accept-Encoding\">Accept-Encoding</a></b> and <b><a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Encoding\">Content-Encoding</a></b>. There’s another one\nthat’s related called <b><a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Type\">Content-Type</a></b>, but that’s not exactly about\ncompression, but we’ll get to this one later.</p>\n<p>Accept-Encoding is what the client will use to say “YO SERVER! I need some of\nthis resource, and I need it compressed with <a href=\"https://github.com/google/brotli\">brotli</a>”</p>\n<p>Content-Encoding is what the server will respond with, as in “Oh hay Client!\nNice to see you; here’s your content as requested. I even compressed it the way\nyou asked”</p>\n<p>What <em>REALLY</em> happens (in my experience), is that Accept-Encoding is ignored,\nand server’s gonna give whatever it wants to you. To complicate it more, there\nare layers between the client and server that may compress data and modify\nheaders (or not). So, the server might have sent plaintext and provided a\nContent-Encoding of <code class=\"language-text\">identity</code> or not a Content-Encoding at all (both of these\nmean there is no compression.), but a CDN might have compressed the body of data\non the way back from the server to the client.</p>\n<p>So what’s the client to do? It has to guess. This is probably why some clients\ndon’t automatically decompress data for you.</p>\n<h2>HTTPoison</h2>\n<p>In Elixir, the most popular HTTP client is <a href=\"https://github.com/edgurgel/httpoison\">HTTPoison</a> according to hex.pm.\nActually, let me clarify, HTTPoison itself doesn’t actually do any requesting\nitself; instead it’s a wrapper for <a href=\"https://github.com/benoitc/hackney\">hackney</a>.</p>\n<p>I’m not the first to notice that it doesn’t de-compress automatically. There’s\nbeen an <a href=\"https://github.com/edgurgel/httpoison/issues/81\">issue</a> open since</p>\n<ol start=\"2015\">\n<li>The issue on HTTPoison actually says, (me paraphrasing), “I’m not going to\ndo it, but hackney is”, and <em>that</em>\n<a href=\"https://github.com/benoitc/hackney/issues/155\">issue</a> has been open for a\nlittle longer since Jan 2015. We’re still waiting and it’s June 2019. 4.5 years.</li>\n</ol>\n<p>Or use <a href=\"https://github.com/teamon/tesla\">Tesla</a> instead, where it supports\ndecompression out of the box.</p>","frontmatter":{"title":"HTTPoison and Decompression","date":"June 01, 2019","tags":["elixir"],"originalUrl":null}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/blog/httpoison-decompression/","previous":{"fields":{"slug":"/blog/ruby-rails-and-circle-ci-workflows/"},"frontmatter":{"title":"Ruby, Rails, and CircleCI 2.0 Workflows","tags":["ruby"],"originalUrl":"https://www.viget.com/articles/ruby-rails-and-circle-ci-2-0/","excerpt":"Know your tools -- CircleCI 2.0 Workflows\n"}},"next":null}}