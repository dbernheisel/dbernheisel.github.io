{"data":{"site":{"siteMetadata":{"title":"David Bernheisel","author":"David Bernheisel"}},"markdownRemark":{"id":"2f43e4f9-d54c-5634-93af-eb720ea5aa41","excerpt":"\nTesting a scenario where an app sends an email is easy, but how do you\ntest something random in an email, like a password reset token? When we\ntest a function that intentionally returns random data, it's a little\ntougher.\n\n","html":"<p>Testing a scenario where an app sends an email is easy, but how do you\ntest something random in an email, like a password reset token? When we\ntest a function that intentionally returns random data, it’s a little\ntougher.</p>\n<!-- excerpt -->\n<p>In those times, we often tackle the problem by:</p>\n<ol>\n<li>Testing behavior and static data, ignoring the dynamic data.</li>\n<li>Using a mock to rid the randomized data, and then test everything.</li>\n</ol>\n<p>Let’s walk through how to do this with\n<a href=\"https://github.com/thoughtbot/bamboo\">Bamboo</a>.</p>\n<p>Bamboo provides test helpers to help you assert behavior and data in\nyour app. A really common email scenario is sending users password reset\nlinks. The idea behind these reset links is that they’re <em>secure</em> and\n<em>unique</em>, and we ensure this by generating a random token and signing it\nwith user’s data to make it secure. How do we test this then?</p>\n<p>There are two ways!</p>\n<h2>Use regex to cover the static text and skip dynamic text.</h2>\n<p>Here we are testing the behavior and static data, ignoring the dynamic\ndata.  Bamboo provides <code class=\"language-text\">assert_email_delivered_with()</code> which accepts a\nkeyword list of parts of the email, and what those parts should match.\nWe can match the email entirely by supplying a string like <code class=\"language-text\">[subject:\n&quot;Password reset link for MyApp&quot;]</code>, or we can supply a regex, <code class=\"language-text\">[text:\n~r/reset_token=/)</code>, and the assertion will check if the regex matches.</p>\n<p>Here’s a fuller integration test example:</p>\n<div class=\"gatsby-highlight\" data-language=\"elixir\"><pre class=\"language-elixir\"><code class=\"language-elixir\">test <span class=\"token string\">\"customers can request a password reset link\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">%</span><span class=\"token punctuation\">{</span><span class=\"token attr-name\">session:</span> session<span class=\"token punctuation\">}</span> <span class=\"token keyword\">do</span>\n  customer <span class=\"token operator\">=</span> insert<span class=\"token punctuation\">(</span><span class=\"token atom symbol\">:customer</span><span class=\"token punctuation\">)</span>\n  session <span class=\"token operator\">=</span>\n    session\n    <span class=\"token operator\">|></span> visit<span class=\"token punctuation\">(</span>password_reset_path<span class=\"token punctuation\">(</span>MyApp<span class=\"token punctuation\">.</span>Endpoint<span class=\"token punctuation\">,</span> <span class=\"token atom symbol\">:new</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token operator\">|></span> fill_in<span class=\"token punctuation\">(</span><span class=\"token atom symbol\">:password_reset</span><span class=\"token punctuation\">,</span> <span class=\"token atom symbol\">:email</span><span class=\"token punctuation\">,</span> <span class=\"token attr-name\">with:</span> customer<span class=\"token punctuation\">.</span>email<span class=\"token punctuation\">)</span>\n    <span class=\"token operator\">|></span> click_on<span class=\"token punctuation\">(</span><span class=\"token string\">\"Send link\"</span><span class=\"token punctuation\">)</span>\n\n  assert_email_delivered_with<span class=\"token punctuation\">(</span><span class=\"token attr-name\">subject:</span> <span class=\"token string\">\"Password reset link for MyApp\"</span><span class=\"token punctuation\">)</span>\n  assert_email_delivered_with<span class=\"token punctuation\">(</span><span class=\"token attr-name\">text_body:</span> <span class=\"token regex\">~r/reset_token=/</span><span class=\"token punctuation\">)</span>\n  assert_email_delivered_with<span class=\"token punctuation\">(</span><span class=\"token attr-name\">html_body:</span> <span class=\"token regex\">~r/reset_token=/</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">end</span></code></pre></div>\n<h2>Use a mock to rid the random data, and test the whole thing!</h2>\n<p>Here you can guarantee the behavior and (mocked) data, but it’s a little\nmore setup.</p>\n<p>Here’s an example:</p>\n<div class=\"gatsby-highlight\" data-language=\"elixir\"><pre class=\"language-elixir\"><code class=\"language-elixir\"><span class=\"token comment\"># lib/mock_token_generator.ex</span>\n<span class=\"token keyword\">defmodule</span> MyApp<span class=\"token punctuation\">.</span>MockTokenGenerator <span class=\"token keyword\">do</span>\n  <span class=\"token attribute variable\">@token</span> <span class=\"token string\">\"123\"</span>\n\n  <span class=\"token comment\"># This should match the interface of the real TokenGenerator</span>\n  <span class=\"token keyword\">def</span> generate<span class=\"token punctuation\">,</span> <span class=\"token attr-name\">do:</span> <span class=\"token attribute variable\">@token</span>\n\n  <span class=\"token comment\"># We're going to expose this in the mock so we can get the assertion</span>\n  <span class=\"token comment\"># right</span>\n  <span class=\"token keyword\">def</span> token<span class=\"token punctuation\">,</span> <span class=\"token attr-name\">do:</span> <span class=\"token attribute variable\">@token</span>\n<span class=\"token keyword\">end</span>\n\n\n<span class=\"token comment\"># config/config.exs</span>\nconfig <span class=\"token atom symbol\">:my_app</span><span class=\"token punctuation\">,</span> <span class=\"token attr-name\">token_generator:</span> MyApp<span class=\"token punctuation\">.</span>TokenGenerator\n\n\n<span class=\"token comment\"># config/test.exs</span>\nconfig <span class=\"token atom symbol\">:my_app</span><span class=\"token punctuation\">,</span> <span class=\"token attr-name\">token_generator:</span> MyApp<span class=\"token punctuation\">.</span>MockTokenGenerator\n\n\n<span class=\"token comment\"># web/controllers/password_reset_controller.ex</span>\n<span class=\"token keyword\">defmodule</span> MyApp<span class=\"token punctuation\">.</span>PasswordResetController <span class=\"token keyword\">do</span>\n  <span class=\"token attribute variable\">@generator</span> Application<span class=\"token punctuation\">.</span>get_env<span class=\"token punctuation\">(</span><span class=\"token atom symbol\">:my_app</span><span class=\"token punctuation\">,</span> <span class=\"token atom symbol\">:token_generator</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">def</span> create<span class=\"token punctuation\">(</span>conn<span class=\"token punctuation\">,</span> params<span class=\"token punctuation\">)</span> <span class=\"token keyword\">do</span>\n    <span class=\"token comment\">#...</span>\n    <span class=\"token comment\"># use the @generator.generate function</span>\n    <span class=\"token comment\"># do your email thing</span>\n    <span class=\"token comment\">#...</span>\n  <span class=\"token keyword\">end</span>\n<span class=\"token keyword\">end</span>\n\n\n<span class=\"token comment\"># test/features/password_reset_test.exs</span>\n<span class=\"token comment\"># ...</span>\n<span class=\"token keyword\">alias</span> MyApp<span class=\"token punctuation\">.</span>MockTokenGenerator\n\ntest <span class=\"token string\">\"customers can request a password reset link\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">%</span><span class=\"token punctuation\">{</span><span class=\"token attr-name\">session:</span> session<span class=\"token punctuation\">}</span> <span class=\"token keyword\">do</span>\n  customer <span class=\"token operator\">=</span> insert<span class=\"token punctuation\">(</span><span class=\"token atom symbol\">:customer</span><span class=\"token punctuation\">)</span>\n  session <span class=\"token operator\">=</span>\n    session\n    <span class=\"token operator\">|></span> visit<span class=\"token punctuation\">(</span>password_reset_path<span class=\"token punctuation\">(</span>MyApp<span class=\"token punctuation\">.</span>Endpoint<span class=\"token punctuation\">,</span> <span class=\"token atom symbol\">:new</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token operator\">|></span> fill_in<span class=\"token punctuation\">(</span><span class=\"token atom symbol\">:password_reset</span><span class=\"token punctuation\">,</span> <span class=\"token atom symbol\">:email</span><span class=\"token punctuation\">,</span> <span class=\"token attr-name\">with:</span> customer<span class=\"token punctuation\">.</span>email<span class=\"token punctuation\">)</span>\n    <span class=\"token operator\">|></span> click_on<span class=\"token punctuation\">(</span><span class=\"token string\">\"Send link\"</span><span class=\"token punctuation\">)</span>\n\n  assert_email_delivered_with<span class=\"token punctuation\">(</span><span class=\"token attr-name\">subject:</span> <span class=\"token string\">\"Password reset link for MyApp\"</span><span class=\"token punctuation\">)</span>\n  assert_email_delivered_with<span class=\"token punctuation\">(</span><span class=\"token attr-name\">text_body:</span> <span class=\"token string\">\"\"\"\n    Here's the entire body of the text email. You might test the entire\n    text version of the email, and use regex to test the HTML version\n\n    Here's your password reset link: https://myapp.com/password?reset_token=<span class=\"token interpolation\"><span class=\"token delimiter punctuation\">#{</span>MockTokenGenerator<span class=\"token punctuation\">.</span>token<span class=\"token delimiter punctuation\">}</span></span>\n  \"\"\"</span><span class=\"token punctuation\">)</span>\n  assert_email_delivered_with<span class=\"token punctuation\">(</span><span class=\"token attr-name\">html_body:</span> <span class=\"token regex\">~r|https://myapp.com/password?reset_token=#{MockTokenGenerator.token}|</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">end</span></code></pre></div>\n<p>See? <a href=\"https://github.com/thoughtbot/bamboo\">Bamboo</a> makes it easy. Give\nit a shot and let us know what you think.</p>","frontmatter":{"title":"Testing Random Data in Emails with Bamboo","date":"October 16, 2017","tags":["elixir"],"originalUrl":"https://robots.thoughtbot.com/testing-emails-with-bamboo"}}},"pageContext":{"slug":"/blog/testing-emails-with-bamboo/","previous":{"fields":{"slug":"/blog/lessons-from-using-phoenix-1-3/"},"frontmatter":{"title":"Lessons From Using Phoenix 1.3","tags":["elixir"],"originalUrl":"https://robots.thoughtbot.com/lessons-from-using-phoenix-1-3","excerpt":null}},"next":{"fields":{"slug":"/blog/querying-embedded-maps-in-postgresql-with-ecto/"},"frontmatter":{"title":"Querying an Embedded Map in PostgreSQL with Ecto","tags":["elixir"],"originalUrl":"https://robots.thoughtbot.com/querying-embedded-maps-in-postgresql-with-ecto","excerpt":null}}}}