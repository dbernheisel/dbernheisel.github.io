{"data":{"site":{"siteMetadata":{"title":"Gatsby Starter Blog","author":"Kyle Mathews"}},"markdownRemark":{"id":"15f09f86-66ce-571e-8529-62e94d76a813","excerpt":"\nPhoenix 1.3 introduces contexts, which has been met with some\nresistance. I've developed an application using it and learned some\nlessons.\n\n","html":"<p>Phoenix 1.3 introduces contexts, which has been met with some\nresistance. I’ve developed an application using it and learned some\nlessons.</p>\n<!--excerpt-->\n<p><strong>[WARNING]</strong> I like contexts.</p>\n<p><img src=\"https://images.thoughtbot.com/blog-vellum-image-uploads/zfH6dXpuSLKfeMA8QKYK_homer-backing-up.gif\" alt=\"me, now, ashamed and hiding because I am probably going against the\ngrain that other smarter-than-me people likely established\nalready\"></p>\n<p>Phew… I just wanted to admit that up front. Now that I got that out of\nthe way, I am going to share my journey about using Phoenix\n1.3.0 and contexts.</p>\n<hr>\n<ul>\n<li><a href=\"#experience\">My context</a></li>\n<li>\n<p>Lessons:</p>\n<ul>\n<li><a href=\"#dontgenerators\">Don’t use the generators</a></li>\n<li><a href=\"#dothedomain\">Embrace the domain vocabulary</a></li>\n<li><a href=\"#bloated\">Avoid the bloat</a></li>\n<li><a href=\"#maybeumbrella\">Consider before umbrellas</a></li>\n</ul>\n</li>\n<li><a href=\"#giveitago\">You should give it a shot</a></li>\n</ul>\n<p><a name=\"experience\"></a></p>\n<h1>Experience</h1>\n<p>I worked on a greenfield project and had an opportunity to use Phoenix\n1.3.0-rc2. With Phoenix 1.3.0 just released, I thought it might be\ntimely to inform other developers what it’s like to work with contexts,\nand some recommendations I have after working on a project using\ncontexts for several months.</p>\n<p>If you don’t know what a context is:</p>\n<ul>\n<li>\n<p><a href=\"https://youtu.be/tMO28ar0lW8?t=12m21s\">watch Chris McCord talk about\nit</a></p>\n</li>\n<li>\n<p>or <a href=\"https://martinfowler.com/bliki/BoundedContext.html\">read Martin Fowler’s explanation of Bounded\nContext</a></p>\n</li>\n<li>\n<p>or <a href=\"http://phoenixframework.org/blog/phoenix-1-3-0-released\">read the Phoenix 1.3 release\npost</a></p>\n</li>\n<li>\n<p>or read my tldr version:</p>\n<blockquote>\n<p>A context is a module that defines the interface between a set of\ninter-related models/schemas to the rest of the application (like\nother contexts). A context is an internal API that provides\nopportunity to name things better and organize code.</p>\n</blockquote>\n</li>\n</ul>\n<p>A practical example: instead of your controller talking to the database,\nyour controller will talk to the context, and the context will interface\nwith necessary functions and schemas and modules to accomplish the task.</p>\n<p><strong>NOTE:</strong> I did not use 1.3.0-rc3 which changes the <code class=\"language-text\">Web</code> namespace, so\nI will skip that part. I think that’s a good change, but I have no real\nexperience with those tweaks yet.</p>\n<h1>Lessons</h1>\n<p><a name=\"dontgenerators\"></a></p>\n<h2>1. Don’t use the generators more than once</h2>\n<p>With Phoenix 1.3, I only recommend using the <code class=\"language-text\">phx</code> generators ONCE in a\ngreenfield project. After that, ditch them. Ditch them because once\nyou’ve adjusted the code to your liking (and you’ll definitely need to\nedit the generated code), using the generators again may <em><strong>inject</strong></em>\ngenerated code into your existing files, which likely don’t follow your\npatterns anymore.</p>\n<p>Since I’m recommending against something, let’s jump into examples and\nfind out why.</p>\n<p>Here’s what I had to do with the generated files:</p>\n<ul>\n<li>\n<p><strong>Rewrite the tests because they setup a fixture for the schema.</strong></p>\n<p>This isn’t a bad idea in itself, but I wanted to use\n<a href=\"https://github.com/thoughtbot/ex_machina\">ex_machina</a> for setting up\ntest scenarios. At first, I thought the generated fixture was a great\nidea.  I’m providing an interface for creating widgets, so I should\nuse it in my tests, right?</p>\n<p>Here’s the problem:</p>\n<p>Imagine if someone introduced a bug in <code class=\"language-text\">create_widget()</code>— now all\nyour tests that involve inserting a <code class=\"language-text\">widget</code> breaks. That’s\nunreasonable, because I’m not testing <em>getting to that state</em> most of\nthe time, I’m testing the unit of functionality or integration between\nfunctions. Instead, I want the tests for <code class=\"language-text\">create_widget()</code> to fail\n(and any reliant integration tests), as opposed to the <strong>WHOLE TEST\nSUITE</strong> breaking and thus freaking me out. When the whole test suite\nbreaks, it’s harder to discern where the problem is.</p>\n</li>\n<li>\n<p><strong>Separate the schema-specific tests into their own test file.</strong></p>\n<p>The new context organization only generates a test file for the\n<em>context</em>, and not a schema. As I kept building the application, it\nbecame evident that the context file and context test file were\ngetting too large. I felt compelled to isolate and organize this big\nbag-o’-functions into smaller bags-o’-functions. I decided to start\nsplitting the tests into different schema-related files, like\n<code class=\"language-text\">{context}/{schema}_test.exs</code>. Since I split the test files, it became\nclearer where I should place tests for custom changeset functions as\nwell.</p>\n<p>I also want to be more careful about how I use <code class=\"language-text\">describe</code> and <code class=\"language-text\">test</code>\nblocks, since ExUnit doesn’t support nested <code class=\"language-text\">describe</code> or context\nblocks.  The generated test names were also a bit long for my taste,\nso I moved the function name to the <code class=\"language-text\">describe</code> block, and then used\nthe test title to describe the context and the expected result.</p>\n<p>Lastly, the generated style was … different.</p>\n<ul>\n<li>I don’t like aliasing modules in the middle of the file. I feel\nthey belong at the top of the file.</li>\n<li>I keep module attributes near the top of the file.</li>\n<li>I avoid the function parenthesis unless I need them.</li>\n</ul>\n<p>Here is an example of how I changed things:</p>\n<div class=\"gatsby-highlight\" data-language=\"elixir\"><pre class=\"language-elixir\"><code class=\"language-elixir\"><span class=\"token comment\"># BEFORE</span>\n<span class=\"token comment\"># test/my_app/things_test.exs</span>\n<span class=\"token keyword\">defmodule</span> MyApp<span class=\"token punctuation\">.</span>ThingsTest <span class=\"token keyword\">do</span>\n<span class=\"token keyword\">use</span> MyApp<span class=\"token punctuation\">.</span>DataCase\n<span class=\"token keyword\">alias</span> MyApp<span class=\"token punctuation\">.</span>Things\n\ndescribe <span class=\"token string\">\"widgets\"</span> <span class=\"token keyword\">do</span>\n  <span class=\"token keyword\">alias</span> MyApp<span class=\"token punctuation\">.</span>Things<span class=\"token punctuation\">.</span>Widget\n\n  <span class=\"token attribute variable\">@valid_attrs</span> <span class=\"token punctuation\">%</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n  <span class=\"token attribute variable\">@update_attrs</span> <span class=\"token punctuation\">%</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n  <span class=\"token attribute variable\">@invalid_attrs</span> <span class=\"token punctuation\">%</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">def</span> widget_fixture<span class=\"token punctuation\">(</span>attrs <span class=\"token operator\">\\\\</span> <span class=\"token punctuation\">%</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">do</span>\n    <span class=\"token punctuation\">{</span><span class=\"token atom symbol\">:ok</span><span class=\"token punctuation\">,</span> widget<span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span>\n      attrs\n      <span class=\"token operator\">|></span> Enum<span class=\"token punctuation\">.</span>into<span class=\"token punctuation\">(</span><span class=\"token attribute variable\">@valid_attrs</span><span class=\"token punctuation\">)</span>\n      <span class=\"token operator\">|></span> Things<span class=\"token punctuation\">.</span>create_widget<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    widget\n  <span class=\"token keyword\">end</span>\n\n  test <span class=\"token string\">\"list_widgets/0 returns all widgets\"</span> <span class=\"token keyword\">do</span>\n    widget_one <span class=\"token operator\">=</span> widget_fixture<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    widget_two <span class=\"token operator\">=</span> widget_fixture<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    assert Things<span class=\"token punctuation\">.</span>list_widgets<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token punctuation\">[</span>widget_one<span class=\"token punctuation\">,</span> widget_two<span class=\"token punctuation\">]</span>\n  <span class=\"token keyword\">end</span>\n\n  <span class=\"token comment\"># I added this, just to go along with their style and to show</span>\n  <span class=\"token comment\"># what a typical new developer would do with this existing pattern</span>\n  test <span class=\"token string\">\"list_widgets/1 returns all widgets limited by list of id\"</span> <span class=\"token keyword\">do</span>\n    widget_one <span class=\"token operator\">=</span> widget_fixture<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    _widget_two <span class=\"token operator\">=</span> widget_fixture<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    assert Things<span class=\"token punctuation\">.</span>list_widgets<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>widget_one<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token punctuation\">[</span>widget_one<span class=\"token punctuation\">]</span>\n  <span class=\"token keyword\">end</span>\n\n  <span class=\"token comment\">#...</span>\n<span class=\"token keyword\">end</span>\n<span class=\"token keyword\">end</span>\n\n<span class=\"token comment\"># AFTER</span>\n<span class=\"token comment\"># test/my_app/things/widget_test.exs</span>\n<span class=\"token keyword\">defmodule</span> MyApp<span class=\"token punctuation\">.</span>Things<span class=\"token punctuation\">.</span>WidgetTest <span class=\"token keyword\">do</span>\n<span class=\"token keyword\">use</span> MyApp<span class=\"token punctuation\">.</span>DataCase\n<span class=\"token keyword\">import</span> MyApp<span class=\"token punctuation\">.</span>Factory\n<span class=\"token keyword\">alias</span> MyApp<span class=\"token punctuation\">.</span>Things\n<span class=\"token keyword\">alias</span> MyApp<span class=\"token punctuation\">.</span>Things<span class=\"token punctuation\">.</span>Widget\n\ndescribe <span class=\"token string\">\"list_widgets\"</span> <span class=\"token keyword\">do</span>\n  test <span class=\"token string\">\"returns all widgets\"</span> <span class=\"token keyword\">do</span>\n    <span class=\"token punctuation\">[</span>widget_one<span class=\"token punctuation\">,</span> widget_two<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> insert_pair<span class=\"token punctuation\">(</span><span class=\"token atom symbol\">:widget</span><span class=\"token punctuation\">)</span>\n\n    assert Things<span class=\"token punctuation\">.</span>list_widgets <span class=\"token operator\">==</span> <span class=\"token punctuation\">[</span>widget_one<span class=\"token punctuation\">,</span> widget_two<span class=\"token punctuation\">]</span>\n  <span class=\"token keyword\">end</span>\n\n  test <span class=\"token string\">\"when given list of ids, returns all widgets in ids\"</span> <span class=\"token keyword\">do</span>\n    <span class=\"token punctuation\">[</span>widget_one<span class=\"token punctuation\">,</span> _widget_two<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> insert_pair<span class=\"token punctuation\">(</span><span class=\"token atom symbol\">:widget</span><span class=\"token punctuation\">)</span>\n\n    assert Things<span class=\"token punctuation\">.</span>list_widgets<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>widget_one<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token punctuation\">[</span>widget_one<span class=\"token punctuation\">]</span>\n  <span class=\"token keyword\">end</span>\n<span class=\"token keyword\">end</span>\n\n<span class=\"token comment\">#...</span>\n<span class=\"token keyword\">end</span></code></pre></div>\n<p>I like this so much better, and I’m afraid that just going with the\ngenerated pattern will lead newer developers down a path of bloated\nfiles.</p>\n</li>\n</ul>\n<p>It’s more apparent to me in Phoenix 1.3.0 that the generators are much\nmore a teaching tool for new developers than meant to be used in an\nongoing fashion throughout a project’s lifetime. If you’ve formed your\nopinion, or your organization has a coding style within Phoenix, then\nyou might appreciate knowing you can customize the templates that the\ngenerators will use. You can do this by copying them out of\n<code class=\"language-text\">deps/phoenix/priv/templates</code> and into your project’s <code class=\"language-text\">priv/templates</code>\nfolder. That’s pretty awesome.</p>\n<p>Recap: for new developers, Phoenix’s new generators are a great\nlearning tool, but I don’t recommend using them after the first use.</p>\n<p><a name=\"dothedomain\"></a></p>\n<h2>2. Embrace the domain vocabulary</h2>\n<p>I realized that my understanding of contexts at the time was flawed, and\nthat many of the examples out in the blog-o-sphere were not helpful for\nme when I was in the trenches myself.</p>\n<p>I imagine that most (all?) projects have their own domain AND\nvocabulary, and to be readable for folks in that domain it is helpful to\nshare that vocabulary.</p>\n<p>This coming example may not apply to you, but this is the beauty of\ncontexts: your needs WILL differ and your domain vocabulary will help\ndetermine how to organize your code.</p>\n<p>The project I was working on had different terms for their warehouse\nworkers:</p>\n<ul>\n<li>Operators</li>\n<li>Supervisors</li>\n<li>Admins</li>\n<li>SalesAssociate</li>\n</ul>\n<p>This roughly corresponds with a typical <code class=\"language-text\">User</code> schema that <code class=\"language-text\">belongs_to</code>\na <code class=\"language-text\">Role</code> schema. I placed both schemas into a new context called\n<code class=\"language-text\">Accounts</code>, and all user-related functions are in that context file. I\nhesitated with the domain vocabulary thinking that generic terms were\ngoing to be more flexible later.</p>\n<p>As the project evolved, that decision turned out to be a mistake</p>\n<p>Instead of something like this (using a generic term <code class=\"language-text\">Accounts</code> as the\ncontext):</p>\n<div class=\"gatsby-highlight\" data-language=\"elixir\"><pre class=\"language-elixir\"><code class=\"language-elixir\"><span class=\"token keyword\">defmodule</span> MyApp<span class=\"token punctuation\">.</span>Accounts <span class=\"token keyword\">do</span>\n  <span class=\"token keyword\">alias</span> MyApp<span class=\"token punctuation\">.</span>Accounts<span class=\"token punctuation\">.</span>User\n\n  <span class=\"token attribute variable\">@operator_role_id</span> <span class=\"token number\">2</span>\n  <span class=\"token attribute variable\">@supervisor_role_id</span> <span class=\"token number\">1</span>\n\n  <span class=\"token keyword\">def</span> list_operators<span class=\"token punctuation\">(</span>queryable <span class=\"token operator\">\\\\</span> User<span class=\"token punctuation\">)</span> <span class=\"token keyword\">do</span>\n    queryable <span class=\"token operator\">|></span> where<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>u<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> u<span class=\"token punctuation\">.</span>role_id <span class=\"token operator\">==</span> <span class=\"token operator\">^</span><span class=\"token attribute variable\">@operator_role</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">end</span>\n\n  <span class=\"token keyword\">def</span> list_supervisors<span class=\"token punctuation\">(</span>queryable <span class=\"token operator\">\\\\</span> User<span class=\"token punctuation\">)</span> <span class=\"token keyword\">do</span>\n    queryable <span class=\"token operator\">|></span> where<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>u<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> u<span class=\"token punctuation\">.</span>role_id <span class=\"token operator\">==</span> <span class=\"token operator\">^</span><span class=\"token attribute variable\">@supervisor_role</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">end</span>\n\n  <span class=\"token comment\"># ...</span>\n<span class=\"token keyword\">end</span></code></pre></div>\n<p>I could have done this (using domain vocabulary as context boundaries):</p>\n<div class=\"gatsby-highlight\" data-language=\"elixir\"><pre class=\"language-elixir\"><code class=\"language-elixir\"><span class=\"token keyword\">defmodule</span> MyApp<span class=\"token punctuation\">.</span>Operators <span class=\"token keyword\">do</span>\n  <span class=\"token keyword\">alias</span> MyApp<span class=\"token punctuation\">.</span>Accounts<span class=\"token punctuation\">.</span>User\n\n  <span class=\"token attribute variable\">@role_id</span> <span class=\"token number\">2</span>\n\n  <span class=\"token keyword\">def</span> list<span class=\"token punctuation\">(</span>queryable <span class=\"token operator\">\\\\</span> User<span class=\"token punctuation\">)</span> <span class=\"token keyword\">do</span>\n    queryable <span class=\"token operator\">|></span> where<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>u<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> u<span class=\"token punctuation\">.</span>role_id <span class=\"token operator\">==</span> <span class=\"token operator\">^</span><span class=\"token attribute variable\">@role_id</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">end</span>\n\n  <span class=\"token comment\"># ...</span>\n<span class=\"token keyword\">end</span>\n\n<span class=\"token comment\"># notice the namespace difference</span>\n<span class=\"token keyword\">defmodule</span> MyApp<span class=\"token punctuation\">.</span>Supervisors <span class=\"token keyword\">do</span>\n  <span class=\"token keyword\">alias</span> MyApp<span class=\"token punctuation\">.</span>Accounts<span class=\"token punctuation\">.</span>User\n\n  <span class=\"token attribute variable\">@role_id</span> <span class=\"token number\">1</span>\n\n  <span class=\"token keyword\">def</span> list<span class=\"token punctuation\">(</span>queryable <span class=\"token operator\">\\\\</span> User<span class=\"token punctuation\">)</span> <span class=\"token keyword\">do</span>\n    queryable <span class=\"token operator\">|></span> where<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>u<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> u<span class=\"token punctuation\">.</span>role_id <span class=\"token operator\">==</span> <span class=\"token operator\">^</span><span class=\"token attribute variable\">@role_id</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">end</span>\n\n  <span class=\"token comment\"># ...</span>\n<span class=\"token keyword\">end</span></code></pre></div>\n<p>This example is really simple, but it starts to show its strength later\nwhen you have other conditionals and need to ask your data more\nquestions.</p>\n<p>With the example above, I’d actually argue that having one combined\ncontext is preferable because it’s all we need—but, knowing how the\napplication <strong>will</strong> grow, and how a lot of questions are asked against\nthe user’s role, then it’ll be more apparent having the separated\ncontext <strong>will</strong> be helpful.</p>\n<div class=\"gatsby-highlight\" data-language=\"elixir\"><pre class=\"language-elixir\"><code class=\"language-elixir\"><span class=\"token keyword\">defmodule</span> MyApp<span class=\"token punctuation\">.</span>Operators <span class=\"token keyword\">do</span>\n  <span class=\"token keyword\">alias</span> MyApp<span class=\"token punctuation\">.</span>Activities<span class=\"token punctuation\">.</span>Event\n\n  <span class=\"token keyword\">def</span> update_event<span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">,</span> params<span class=\"token punctuation\">)</span> <span class=\"token keyword\">do</span>\n    event\n    <span class=\"token operator\">|></span> prepare_event<span class=\"token punctuation\">(</span>params<span class=\"token punctuation\">)</span>\n    <span class=\"token operator\">|></span> Repo<span class=\"token punctuation\">.</span>update\n  <span class=\"token keyword\">end</span>\n\n  <span class=\"token keyword\">def</span> prepare_event<span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">,</span> params<span class=\"token punctuation\">)</span> <span class=\"token keyword\">do</span>\n    event <span class=\"token operator\">|></span> Event<span class=\"token punctuation\">.</span>operator_changeset<span class=\"token punctuation\">(</span>params<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">end</span>\n\n  <span class=\"token comment\"># ...</span>\n<span class=\"token keyword\">end</span>\n\n<span class=\"token keyword\">defmodule</span> MyApp<span class=\"token punctuation\">.</span>Supervisors <span class=\"token keyword\">do</span>\n  <span class=\"token keyword\">alias</span> MyApp<span class=\"token punctuation\">.</span>Activities<span class=\"token punctuation\">.</span>Event\n\n  <span class=\"token keyword\">def</span> update_event<span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">,</span> params<span class=\"token punctuation\">)</span> <span class=\"token keyword\">do</span>\n    event\n    <span class=\"token operator\">|></span> prepare_event<span class=\"token punctuation\">(</span>params<span class=\"token punctuation\">)</span>\n    <span class=\"token operator\">|></span> Repo<span class=\"token punctuation\">.</span>update\n  <span class=\"token keyword\">end</span>\n\n  <span class=\"token comment\"># Notice that we're calling a different changeset</span>\n  <span class=\"token keyword\">def</span> prepare_event<span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">,</span> params<span class=\"token punctuation\">)</span> <span class=\"token keyword\">do</span>\n    event <span class=\"token operator\">|></span> Event<span class=\"token punctuation\">.</span>supervisor_changeset<span class=\"token punctuation\">(</span>params<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">end</span>\n\n  <span class=\"token comment\"># ...</span>\n<span class=\"token keyword\">end</span></code></pre></div>\n<p>Above we’re adding another function that has different permissions\nregarding what the user may update on an event. The\n<code class=\"language-text\">supervisor_changeset</code> will cast all params, whereas the\n<code class=\"language-text\">operator_changeset</code> will cast only a subset of params. This would also\nbe reflected for preparing any forms in templates.</p>\n<p>All the above <em>requires</em> you to understand the vocabulary before\nbuilding, which is the critique I usually hear about contexts:\n“It requires more up-front cognitive thought before I can be\nproductive.” Prior to 1.3, not knowing domain up front might not hurt\nso much because it’s not built into the structure, but with 1.3 and\npresumably later, it may hurt more. Despite that, it’s <em>totally</em> worth\nit.</p>\n<h2>3. Avoid the bloat<a name=\"bloated\"></a></h2>\n<p>Above, I glossed-over what contexts help us achieve: making interfaces\nbetween your abstractions. A context (aka domain interface) will help\norganize actions. I <em>love</em> this.</p>\n<p>I decided in this experiment to <em>really</em> give contexts a go and roll\nwith the philosophy. At the same time, I <em>hated</em> the bloated context\nthat it had become after needing to interact with several schemas in the\nsame context. At some point, I had several hundred lines in a context\nfile; it was easy to let the context file grow. <strong>RESIST</strong>. Use\ndomain-related vocabulary to keep contexts small. I had to determine how\nto organize the code better.</p>\n<p>A technique that helped keep contexts small was to limit them a set of\naction verbs, like <code class=\"language-text\">list</code> <code class=\"language-text\">prepare</code> <code class=\"language-text\">create</code> <code class=\"language-text\">update</code> and <code class=\"language-text\">delete</code>\n(some semblance to CRUD actions). Outside of those verbs, I put them\ninto supporting modules. For example, <code class=\"language-text\">def list</code> actually hits the\ndatabase and returns the list of things— it did not return an Ecto\nquery that I could further modify. I saved those query-building\nfunctions for a <code class=\"language-text\">Context.Query</code> module. This helped keep my <code class=\"language-text\">list</code>\nfunction simple, and helped me make composable queries.</p>\n<p>My controllers and other services then <em>only</em> call functions in context\nmodules.</p>\n<p>For example:</p>\n<div class=\"gatsby-highlight\" data-language=\"elixir\"><pre class=\"language-elixir\"><code class=\"language-elixir\"><span class=\"token keyword\">defmodule</span> MyApp<span class=\"token punctuation\">.</span>Operators <span class=\"token keyword\">do</span>\n  <span class=\"token comment\"># MyApp.Accounts is now a namespace for schemas, not a context</span>\n  <span class=\"token keyword\">alias</span> MyApp<span class=\"token punctuation\">.</span>Accounts<span class=\"token punctuation\">.</span>User\n  <span class=\"token keyword\">alias</span> MyApp<span class=\"token punctuation\">.</span>Accounts<span class=\"token punctuation\">.</span>Role\n  <span class=\"token keyword\">alias</span> MyApp<span class=\"token punctuation\">.</span>Operators<span class=\"token punctuation\">.</span>Query\n\n  <span class=\"token keyword\">def</span> list<span class=\"token punctuation\">(</span>queryable <span class=\"token operator\">\\\\</span> User<span class=\"token punctuation\">)</span> <span class=\"token keyword\">do</span>\n    queryable\n    <span class=\"token operator\">|></span> Query<span class=\"token punctuation\">.</span>where_operator\n    <span class=\"token operator\">|></span> Repo<span class=\"token punctuation\">.</span>all\n  <span class=\"token keyword\">end</span>\n\n  <span class=\"token keyword\">def</span> list_by_latest_event<span class=\"token punctuation\">(</span>queryable <span class=\"token operator\">\\\\</span> User<span class=\"token punctuation\">)</span> <span class=\"token keyword\">do</span>\n    queryable\n    <span class=\"token operator\">|></span> Query<span class=\"token punctuation\">.</span>order_by_event_date\n    <span class=\"token operator\">|></span> list\n  <span class=\"token keyword\">end</span>\n\n  <span class=\"token keyword\">def</span> list_currently_assigned<span class=\"token punctuation\">(</span>queryable <span class=\"token operator\">\\\\</span> User<span class=\"token punctuation\">)</span> <span class=\"token keyword\">do</span>\n    queryable\n    <span class=\"token operator\">|></span> Query<span class=\"token punctuation\">.</span>where_assigned\n    <span class=\"token operator\">|></span> list\n  <span class=\"token keyword\">end</span>\n\n  <span class=\"token keyword\">def</span> list_currently_assigned_for_activity<span class=\"token punctuation\">(</span>queryable <span class=\"token operator\">\\\\</span> User<span class=\"token punctuation\">,</span> activity<span class=\"token punctuation\">)</span> <span class=\"token keyword\">do</span>\n    queryable\n    <span class=\"token operator\">|></span> Query<span class=\"token punctuation\">.</span>where_activity<span class=\"token punctuation\">(</span>activity<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span>\n    <span class=\"token operator\">|></span> list_currently_assigned\n  <span class=\"token keyword\">end</span>\n\n  <span class=\"token comment\"># ...</span>\n<span class=\"token keyword\">end</span>\n\n<span class=\"token keyword\">defmodule</span> MyApp<span class=\"token punctuation\">.</span>Operators<span class=\"token punctuation\">.</span>Query <span class=\"token keyword\">do</span>\n  <span class=\"token keyword\">import</span> Ecto<span class=\"token punctuation\">.</span>Query\n  <span class=\"token attribute variable\">@role_id</span> <span class=\"token number\">1</span>\n\n  <span class=\"token keyword\">def</span> where_operator<span class=\"token punctuation\">(</span>queryable<span class=\"token punctuation\">)</span> <span class=\"token keyword\">do</span>\n    queryable\n    <span class=\"token operator\">|></span> where<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>q<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> q<span class=\"token punctuation\">.</span>role_id <span class=\"token operator\">==</span> <span class=\"token operator\">^</span><span class=\"token attribute variable\">@role_id</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">end</span>\n\n  <span class=\"token keyword\">def</span> order_by_event_date<span class=\"token punctuation\">(</span>queryable<span class=\"token punctuation\">)</span> <span class=\"token keyword\">do</span>\n    queryable\n    <span class=\"token operator\">|></span> join<span class=\"token punctuation\">(</span><span class=\"token atom symbol\">:left</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>q<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> event <span class=\"token operator\">in</span> assoc<span class=\"token punctuation\">(</span>q<span class=\"token punctuation\">,</span> <span class=\"token atom symbol\">:event</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token operator\">|></span> order_by<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>_<span class=\"token punctuation\">,</span> event<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token attr-name\">desc:</span> event<span class=\"token punctuation\">.</span>inserted_at<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">end</span>\n\n  <span class=\"token keyword\">def</span> where_assigned<span class=\"token punctuation\">(</span>queryable<span class=\"token punctuation\">)</span> <span class=\"token keyword\">do</span>\n    queryable\n    <span class=\"token operator\">|></span> where<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>q<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> is_nil<span class=\"token punctuation\">(</span>q<span class=\"token punctuation\">.</span>unassigned_at<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">end</span>\n\n  <span class=\"token keyword\">def</span> where_activity<span class=\"token punctuation\">(</span>queryable<span class=\"token punctuation\">,</span> activity<span class=\"token punctuation\">)</span> <span class=\"token keyword\">do</span>\n    queryable\n    <span class=\"token operator\">|></span> join<span class=\"token punctuation\">(</span><span class=\"token atom symbol\">:inner</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>q<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> assignment <span class=\"token operator\">in</span> assoc<span class=\"token punctuation\">(</span>q<span class=\"token punctuation\">,</span> <span class=\"token atom symbol\">:assignments</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token operator\">|></span> where<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>_<span class=\"token punctuation\">,</span> assignment<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> assignment<span class=\"token punctuation\">.</span>activity_id <span class=\"token operator\">==</span> <span class=\"token operator\">^</span>activity_id<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">end</span>\n<span class=\"token keyword\">end</span></code></pre></div>\n<p>This has been my preferred way of organizing code so far. It encourages\nless god-modules that I’ve learned to dislike so much. I believe that\nPhoenix will need to be more careful about their generators accidentally\nencouraging god-modules, lest they start to look like monolith Rails\napplications with models that know too much about the application,\nexcept now in a context.</p>\n<p><a name=\"maybeumbrella\"></a></p>\n<h2>4. Consider Before Umbrellas</h2>\n<p>Elixir allows applications to live in umbrellas, which is an awesome\nconcept. If you’re not familiar with umbrellas, <a href=\"https://elixir-lang.org/getting-started/mix-otp/dependencies-and-umbrella-apps.html\">read up about\nit</a>.\nWhat I love about umbrellas is that it allows me to draw boundaries\nbetween related applications. This is difficult to do in other\nframeworks and languages, so the fact that <code class=\"language-text\">mix</code> gives this tool for\nfree is <em>incredible</em>. Before I heard about Phoenix contexts, I was drawn\nto organize my application via umbrellas because I didn’t see other\ntools that made it easy.</p>\n<p>Umbrellas, in a sense, help accomplish the same thing as contexts: it\nhelps you draw boundaries. The difference is that umbrella applications\nare about separating applications instead of APIs.</p>\n<p>A lot of typical web applications don’t need separated\nsub-applications. If you’re considering one, determine if having\nseparately-deployable applications fixes or avoids problems, or if the\nboundaries need to be large enough to deserve a separation. Avoid\njumping to umbrellas like I did earlier if you only need to organize\nyourself.</p>\n<p><a href=\"https://youtu.be/tMO28ar0lW8?t=27m54s\">Chris gives some good examples of when umbrellas could be a good\noption</a></p>\n<h1>Give It a Shot<a name=\"giveitago\"></a></h1>\n<p>At thoughtbot, we pride ourselves in the practices of designing\nexperiences, and <em>then</em> developing; <a href=\"https://thoughtbot.com/playbook\">that’s what makes us\ndifferent</a>. That process also helps\nestablish where these boundaries are up front, and it’s up to the artist\nto determine whether it’s a new context, just a new schema, maybe a new\napplication altogether, maybe a support module, or none of the above.\nRegardless, I believe Phoenix 1.3 teaches <em>great</em> ideas that will win in\nthe long run and make developers think before doing.</p>","frontmatter":{"title":"Lessons From Using Phoenix 1.3","date":"August 01, 2017"}}},"pageContext":{"slug":"/2017-08-01-lessons-from-using-phoenix-1-3/","previous":{"fields":{"slug":"/2017-06-30-simple-phoenix-text-inputs-with-formulator/"},"frontmatter":{"title":"Simple Phoenix Text Inputs with Formulator"}},"next":{"fields":{"slug":"/2017-10-16-testing-emails-with-bamboo/"},"frontmatter":{"title":"Testing Random Data in Emails with Bamboo"}}}}