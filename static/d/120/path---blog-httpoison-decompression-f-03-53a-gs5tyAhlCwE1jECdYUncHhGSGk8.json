{"data":{"site":{"siteMetadata":{"title":"David Bernheisel","author":"David Bernheisel"}},"markdownRemark":{"id":"c36c46fe-2df1-5ff8-b4eb-bbf80acc7476","excerpt":"Did you know that Ruby’s Net::HTTP class automatically decompresses responses?\nIt handles a lot of use cases that we don’t have to remember…","timeToRead":1,"html":"<p>Did you know that Ruby’s Net::HTTP class automatically decompresses responses?\nIt handles a lot of use cases that we don’t have to remember ourselves. It’s\nbuilt into Ruby!</p>\n<p>HTTPoison, along with other common HTTP clients like HTTPotion, the new Mint,\nGun, and probably others don’t do this automatically.</p>\n<p>I recently had the pleasure to write a REST API wrapper for a service that\nrandomly gzips responses (some are plain text, some are gzipped, and some say\nthey’re gzipped but is actually plain text); and on top of that I was using\nexvcr in some tests which serializes the request/response chain into JSON.</p>\n<p>Or use <a href=\"https://github.com/teamon/tesla\">Tesla</a> instead, where it supports\ndecompression out of the box.</p>","frontmatter":{"title":"HTTPoison and Decompression","date":"June 01, 2019","tags":["elixir"],"originalUrl":null}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/blog/httpoison-decompression/","previous":{"fields":{"slug":"/blog/ruby-rails-and-circle-ci-workflows/"},"frontmatter":{"title":"Ruby, Rails, and CircleCI 2.0 Workflows","tags":["ruby"],"originalUrl":"https://www.viget.com/articles/ruby-rails-and-circle-ci-2-0/","excerpt":"Know your tools -- CircleCI 2.0 Workflows\n"}},"next":null}}