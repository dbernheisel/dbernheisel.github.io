{"data":{"site":{"siteMetadata":{"title":"David Bernheisel","author":"David Bernheisel"}},"markdownRemark":{"id":"c36c46fe-2df1-5ff8-b4eb-bbf80acc7476","excerpt":"Did you know that Ruby’s\nNet::HTTP\nclass automatically decompresses responses? It handles a lot of use cases that\nwe don’t have to remember…","timeToRead":12,"html":"<p>Did you know that Ruby’s\n<a href=\"https://ruby-doc.org/stdlib-2.6.3/libdoc/net/http/rdoc/Net/HTTP.html#class-Net::HTTP-label-Compression\">Net::HTTP</a>\nclass automatically decompresses responses? It handles a lot of use cases that\nwe don’t have to remember ourselves. It’s built into Ruby!</p>\n<p>HTTPoison, along with other common HTTP clients like HTTPotion, the new Mint,\nGun, and probably others don’t do this automatically.</p>\n<p>I recently had the pleasure to write a REST API wrapper for a service that\nrandomly gzips responses (some are plain text, some are gzipped, and some say\nthey’re gzipped but is actually plain text); and on top of that I was using\nexvcr in some tests which serializes the request/response chain into JSON.</p>\n<h2>Let’s back up</h2>\n<p>HTTP requests and responses have some headers that tell the client/server what\nformat of content we’re looking for. The ones we care about here is\n<b><a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Accept-Encoding\">Accept-Encoding</a></b> and <b><a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Encoding\">Content-Encoding</a></b>. There’s another one\nthat’s related called <b><a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Type\">Content-Type</a></b>, but that’s not exactly about\ncompression, but we’ll get to this one later.</p>\n<p>Accept-Encoding is what the client will use to say “YO SERVER! I need some of\nthis resource, and I need it compressed with <a href=\"https://github.com/google/brotli\">brotli</a>”</p>\n<p>Content-Encoding is what the server will respond with, as in “Oh hay Client!\nNice to see you; here’s your content as requested. I even compressed it the way\nyou asked”</p>\n<p>What <em>REALLY</em> happens (in my experience), is that Accept-Encoding is ignored,\nand server’s gonna give whatever it wants to you. To complicate it more, there\nare layers between the client and server that may compress data and modify\nheaders (or not). So, the server might have sent plaintext and provided a\nContent-Encoding of <code class=\"language-text\">identity</code> or not a Content-Encoding at all (both of these\nmean there is no compression.), but a CDN might have compressed the body of data\non the way back from the server to the client.</p>\n<p>So what’s the client to do? It has to guess. This is probably why some clients\ndon’t automatically decompress data for you.</p>\n<p>Here are some of the options for <code class=\"language-text\">Content-Encoding</code>:</p>\n<table>\n<thead>\n<tr>\n<th>value</th>\n<th>meaning</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code class=\"language-text\">gzip</code></td>\n<td>Compressed with Lempel-Ziv (LZ77). On desktops, this is a <code class=\"language-text\">.gz</code> file</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">x-gzip</code></td>\n<td>Same as above, just an order expression</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">compress</code></td>\n<td>Compressed with Lempel-Ziv-Welch (LZW)</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">deflate</code></td>\n<td>Compressed with zlib. On desktops, this is a normal <code class=\"language-text\">.zip</code> file</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">br</code></td>\n<td>Compressed with brotli.</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">identity</code></td>\n<td>No compression</td>\n</tr>\n<tr>\n<td>(missing)</td>\n<td>No compression</td>\n</tr>\n</tbody>\n</table>\n<p>As an interesting sidenote, Phoenix supports compression into Brotli, but\notherwise there’s not yet built-in support for decompressing Brotli in\nErlang/Elixir. There’s also no built-in support for LZW, but that’s ok because\nit’s not as good as the other formats. The only built-ins are <code class=\"language-text\">gzip</code> and\n<code class=\"language-text\">deflate</code> so that’s what I’ll support on this first iteration.</p>\n<h2>HTTPoison</h2>\n<p>In Elixir, the most popular HTTP client is <a href=\"https://github.com/edgurgel/httpoison\">HTTPoison</a> according to <a href=\"https://hex.pm/packages\">hex.pm</a>.\nActually, let me clarify: HTTPoison itself doesn’t do any HTTP requests itself;\nwhat I mean is it’s a wrapper for <a href=\"https://github.com/benoitc/hackney\">hackney</a> which actually does the HTTP\nrequests, and HTTPoison wraps around that to make the API a bit better.</p>\n<p>Let me re-word that for my use-case: I’m making a wrapper for a wrapper.</p>\n<p>I’m not the first to notice that it doesn’t de-compress responses automatically.\nThere’s been an <a href=\"https://github.com/edgurgel/httpoison/issues/81\">issue</a> open\nsince 2015. The issue on HTTPoison actually says, (me paraphrasing), “I’m not\ngoing to do it, but hackney is”, and <em>that</em>\n<a href=\"https://github.com/benoitc/hackney/issues/155\">issue</a> has been open for a\nlittle longer since Jan 2015. We’re still waiting. It’s June 2019. 4.5 years.</p>\n<p>Ok, cool, but I need to handle this now, and it doesn’t seem like there’s\nmovement in the popular library of choice.</p>\n<h2>It’s a little unfair</h2>\n<p>It’s unfair for me to suggest these libraries should absolutely support\ndecompression out of the box, because these clients are really powerful. They\nalso support streaming, which complicates decompression. But, for simple JSON\nrequest/responses and for most APIs, we’re not streaming.</p>\n<h2>One more problem: Character Encoding</h2>\n<p>I am also working an API service that responds with characters encoded in\nISO-8859-1 sometimes; not in UTF-8. In Elixir, strings are UTF-8 so I need to\nmake sure I can convert those characters to something readable for my logs, and\nultimately the clients. This character encoding is indicated in the HTTP header\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Type\">Content-Type</a>, paired with the format of content, like JSON or XML. It’s going\nto look something like <code class=\"language-text\">text/plain;charset=utf-8</code> or\n<code class=\"language-text\">application/json;charset=ISO-8859-1</code>.</p>\n<h2>Let’s do it</h2>\n<p>Let’s stick with HTTPoison out of pure laziness. If you’re implementing from\nscratch, I’d recommend you to look at <a href=\"https://github.com/ericmj/mint\">Mint</a> first because it has no\ndependencies and has a better philosophy with OTP, which is a <em>good thing</em>.\n<a href=\"https://github.com/teamon/tesla\">Tesla</a> is also a good HTTP client to consider.</p>\n<p>I’m going to write a wrapper (MyApp.HTTPClient) for a wrapper (HTTPoison) of\nhackney for a wrapper (my layer that covers the 3rd party API) . Exciting.</p>\n<p>Also please know that my project also includes Phoenix and Plug, so you might\nsee some helpers in the tests and implementation. If you’re not using Phoenix or\nPlug, it should be pretty easy to replace these functions with your own.</p>\n<h2>My interface</h2>\n<p>It’s going to be exactly like HTTPoison’s. This way I can replace any usage of\n<code class=\"language-text\">HTTPoison.get</code> or <code class=\"language-text\">HTTPoison.post</code> with my own <code class=\"language-text\">HttpClient.get</code> or\n<code class=\"language-text\">HttpClient.post</code>. Easy peasy.</p>\n<p>I’m also going to give room for dependency-injection so I can test this easily.\nMaybe one day I won’t use HTTPoison anymore, so this might also help transition\nmy app to another HTTP client.</p>\n<p>Let’s write tests first:</p>\n<div class=\"gatsby-highlight\" data-language=\"elixir\">\n      <pre class=\"language-elixir\"><code class=\"language-elixir\"><span class=\"token keyword\">defmodule</span> MyApp<span class=\"token punctuation\">.</span>HttpClientTest <span class=\"token keyword\">do</span>\n  <span class=\"token keyword\">use</span> MyApp<span class=\"token punctuation\">.</span>DataCase<span class=\"token punctuation\">,</span> <span class=\"token attr-name\">async:</span> <span class=\"token boolean\">true</span>\n  <span class=\"token keyword\">import</span> ExUnit<span class=\"token punctuation\">.</span>CaptureLog\n  <span class=\"token keyword\">alias</span> MyApp<span class=\"token punctuation\">.</span>HTTPClient\n  <span class=\"token keyword\">require</span> HTTPoison\n\n  <span class=\"token attribute variable\">@gzipped_response</span> <span class=\"token punctuation\">&lt;&lt;</span><span class=\"token number\">31</span><span class=\"token punctuation\">,</span> <span class=\"token number\">139</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">243</span><span class=\"token punctuation\">,</span> <span class=\"token number\">72</span><span class=\"token punctuation\">,</span> <span class=\"token number\">205</span><span class=\"token punctuation\">,</span> <span class=\"token number\">201</span><span class=\"token punctuation\">,</span> <span class=\"token number\">201</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">130</span><span class=\"token punctuation\">,</span> <span class=\"token number\">137</span><span class=\"token punctuation\">,</span> <span class=\"token number\">209</span><span class=\"token punctuation\">,</span> <span class=\"token number\">247</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">>></span>\n  <span class=\"token attribute variable\">@zipped_response</span> <span class=\"token punctuation\">&lt;&lt;</span><span class=\"token number\">243</span><span class=\"token punctuation\">,</span> <span class=\"token number\">72</span><span class=\"token punctuation\">,</span> <span class=\"token number\">205</span><span class=\"token punctuation\">,</span> <span class=\"token number\">201</span><span class=\"token punctuation\">,</span> <span class=\"token number\">201</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">>></span>\n  <span class=\"token attribute variable\">@decoded</span> <span class=\"token string\">\"Hello\"</span>\n\n  describe <span class=\"token string\">\"get\"</span> <span class=\"token keyword\">do</span>\n    test <span class=\"token string\">\"decompresses a gzipped body\"</span> <span class=\"token keyword\">do</span>\n      requester <span class=\"token operator\">=</span> <span class=\"token keyword\">fn</span> _url<span class=\"token punctuation\">,</span> _headers<span class=\"token punctuation\">,</span> _options <span class=\"token operator\">-></span>\n        <span class=\"token punctuation\">{</span><span class=\"token atom symbol\">:ok</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">%</span>HTTPoison<span class=\"token punctuation\">.</span>Response<span class=\"token punctuation\">{</span>\n          <span class=\"token attr-name\">body:</span> <span class=\"token attribute variable\">@gzipped_response</span><span class=\"token punctuation\">,</span>\n          <span class=\"token attr-name\">headers:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span><span class=\"token string\">\"Content-Encoding\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"gzip\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n      <span class=\"token keyword\">end</span>\n\n      assert <span class=\"token punctuation\">{</span><span class=\"token atom symbol\">:ok</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">%</span><span class=\"token punctuation\">{</span><span class=\"token attr-name\">body:</span> <span class=\"token attribute variable\">@decoded</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> HTTPClient<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token boolean\">nil</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token attr-name\">requester:</span> requester<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">end</span>\n\n    test <span class=\"token string\">\"decompresses a gzipped body with x-gzip header\"</span> <span class=\"token keyword\">do</span>\n      requester <span class=\"token operator\">=</span> <span class=\"token keyword\">fn</span> _url<span class=\"token punctuation\">,</span> _headers<span class=\"token punctuation\">,</span> _options <span class=\"token operator\">-></span>\n        <span class=\"token punctuation\">{</span><span class=\"token atom symbol\">:ok</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">%</span>HTTPoison<span class=\"token punctuation\">.</span>Response<span class=\"token punctuation\">{</span>\n          <span class=\"token attr-name\">body:</span> <span class=\"token attribute variable\">@gzipped_response</span><span class=\"token punctuation\">,</span>\n          <span class=\"token attr-name\">headers:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span><span class=\"token string\">\"Content-Encoding\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"x-gzip\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n      <span class=\"token keyword\">end</span>\n\n      assert <span class=\"token punctuation\">{</span><span class=\"token atom symbol\">:ok</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">%</span><span class=\"token punctuation\">{</span><span class=\"token attr-name\">body:</span> <span class=\"token attribute variable\">@decoded</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> HTTPClient<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token boolean\">nil</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token attr-name\">requester:</span> requester<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">end</span>\n\n    test <span class=\"token string\">\"does not attempt to decompress a plain body with gzip header\"</span> <span class=\"token keyword\">do</span>\n      body <span class=\"token operator\">=</span> <span class=\"token string\">\"Hallo\"</span>\n      requester <span class=\"token operator\">=</span> <span class=\"token keyword\">fn</span> _url<span class=\"token punctuation\">,</span> _headers<span class=\"token punctuation\">,</span> _options <span class=\"token operator\">-></span>\n        <span class=\"token punctuation\">{</span><span class=\"token atom symbol\">:ok</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">%</span>HTTPoison<span class=\"token punctuation\">.</span>Response<span class=\"token punctuation\">{</span>\n          <span class=\"token attr-name\">body:</span> body<span class=\"token punctuation\">,</span>\n          <span class=\"token attr-name\">headers:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span><span class=\"token string\">\"Content-Encoding\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"gzip\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n      <span class=\"token keyword\">end</span>\n\n      assert <span class=\"token punctuation\">{</span><span class=\"token atom symbol\">:ok</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">%</span><span class=\"token punctuation\">{</span><span class=\"token attr-name\">body:</span> <span class=\"token operator\">^</span>body<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> HTTPClient<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token boolean\">nil</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token attr-name\">requester:</span> requester<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">end</span>\n\n    test <span class=\"token string\">\"decompresses a zipped body\"</span> <span class=\"token keyword\">do</span>\n      requester <span class=\"token operator\">=</span> <span class=\"token keyword\">fn</span> _url<span class=\"token punctuation\">,</span> _headers<span class=\"token punctuation\">,</span> _options <span class=\"token operator\">-></span>\n        <span class=\"token punctuation\">{</span><span class=\"token atom symbol\">:ok</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">%</span>HTTPoison<span class=\"token punctuation\">.</span>Response<span class=\"token punctuation\">{</span>\n          <span class=\"token attr-name\">body:</span> <span class=\"token attribute variable\">@zipped_response</span><span class=\"token punctuation\">,</span>\n          <span class=\"token attr-name\">headers:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span><span class=\"token string\">\"Content-Encoding\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"deflate\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n      <span class=\"token keyword\">end</span>\n\n      assert <span class=\"token punctuation\">{</span><span class=\"token atom symbol\">:ok</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">%</span><span class=\"token punctuation\">{</span><span class=\"token attr-name\">body:</span> <span class=\"token attribute variable\">@decoded</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> HTTPClient<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token boolean\">nil</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token attr-name\">requester:</span> requester<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">end</span>\n\n    test <span class=\"token string\">\"emits log when encountering unsupported compression\"</span> <span class=\"token keyword\">do</span>\n      requester <span class=\"token operator\">=</span> <span class=\"token keyword\">fn</span> _url<span class=\"token punctuation\">,</span> _headers<span class=\"token punctuation\">,</span> _options <span class=\"token operator\">-></span>\n        <span class=\"token punctuation\">{</span><span class=\"token atom symbol\">:ok</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">%</span>HTTPoison<span class=\"token punctuation\">.</span>Response<span class=\"token punctuation\">{</span>\n          <span class=\"token attr-name\">body:</span> <span class=\"token string\">\"Hallo\"</span><span class=\"token punctuation\">,</span>\n          <span class=\"token attr-name\">headers:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span><span class=\"token string\">\"Content-Encoding\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"br\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n      <span class=\"token keyword\">end</span>\n\n      assert capture_log<span class=\"token punctuation\">(</span><span class=\"token keyword\">fn</span> <span class=\"token operator\">-></span>\n        assert <span class=\"token punctuation\">{</span><span class=\"token atom symbol\">:ok</span><span class=\"token punctuation\">,</span> _<span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> HTTPClient<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token boolean\">nil</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token attr-name\">requester:</span> requester<span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">end</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=~</span> <span class=\"token string\">\"No support for decompression of body using 'br' algorithm\"</span>\n    <span class=\"token keyword\">end</span>\n\n    test <span class=\"token string\">\"emits log when failing to decompress\"</span> <span class=\"token keyword\">do</span>\n      requester <span class=\"token operator\">=</span> <span class=\"token keyword\">fn</span> _url<span class=\"token punctuation\">,</span> _headers<span class=\"token punctuation\">,</span> _options <span class=\"token operator\">-></span>\n        <span class=\"token punctuation\">{</span><span class=\"token atom symbol\">:ok</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">%</span>HTTPoison<span class=\"token punctuation\">.</span>Response<span class=\"token punctuation\">{</span>\n          <span class=\"token attr-name\">body:</span> <span class=\"token punctuation\">&lt;&lt;</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">>></span><span class=\"token punctuation\">,</span>\n          <span class=\"token attr-name\">headers:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span><span class=\"token string\">\"Content-Encoding\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"deflate\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n      <span class=\"token keyword\">end</span>\n\n      assert capture_log<span class=\"token punctuation\">(</span><span class=\"token keyword\">fn</span> <span class=\"token operator\">-></span>\n        assert <span class=\"token punctuation\">{</span><span class=\"token atom symbol\">:ok</span><span class=\"token punctuation\">,</span> _<span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> HTTPClient<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token boolean\">nil</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token attr-name\">requester:</span> requester<span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">end</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=~</span> <span class=\"token string\">\"Failed to decompress response\"</span>\n    <span class=\"token keyword\">end</span>\n\n    test <span class=\"token string\">\"re-encodes a latin1 body to UTF-8\"</span> <span class=\"token keyword\">do</span>\n      latin1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">&lt;&lt;</span><span class=\"token number\">163</span><span class=\"token punctuation\">,</span> <span class=\"token number\">233</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">117</span><span class=\"token punctuation\">,</span> <span class=\"token number\">102</span><span class=\"token punctuation\">,</span> <span class=\"token number\">102</span><span class=\"token punctuation\">>></span>\n      utf8 <span class=\"token operator\">=</span> <span class=\"token string\">\"£éduff\"</span>\n      requester <span class=\"token operator\">=</span> <span class=\"token keyword\">fn</span> _url<span class=\"token punctuation\">,</span> _headers<span class=\"token punctuation\">,</span> _options <span class=\"token operator\">-></span>\n        <span class=\"token punctuation\">{</span><span class=\"token atom symbol\">:ok</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">%</span>HTTPoison<span class=\"token punctuation\">.</span>Response<span class=\"token punctuation\">{</span>\n          <span class=\"token attr-name\">body:</span> latin1<span class=\"token punctuation\">,</span>\n          <span class=\"token attr-name\">headers:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span><span class=\"token string\">\"Content-Type\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"text/plain;charset=ISO-8859-1\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n      <span class=\"token keyword\">end</span>\n\n      assert <span class=\"token punctuation\">{</span><span class=\"token atom symbol\">:ok</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">%</span><span class=\"token punctuation\">{</span><span class=\"token attr-name\">body:</span> <span class=\"token operator\">^</span>utf8<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> HTTPClient<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token boolean\">nil</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token attr-name\">requester:</span> requester<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">end</span>\n\n    test <span class=\"token string\">\"does not re-encode utf8 bodies\"</span> <span class=\"token keyword\">do</span>\n      utf8 <span class=\"token operator\">=</span> <span class=\"token string\">\"£éduff\"</span>\n      requester <span class=\"token operator\">=</span> <span class=\"token keyword\">fn</span> _url<span class=\"token punctuation\">,</span> _headers<span class=\"token punctuation\">,</span> _options <span class=\"token operator\">-></span>\n        <span class=\"token punctuation\">{</span><span class=\"token atom symbol\">:ok</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">%</span>HTTPoison<span class=\"token punctuation\">.</span>Response<span class=\"token punctuation\">{</span>\n          <span class=\"token attr-name\">body:</span> utf8<span class=\"token punctuation\">,</span>\n          <span class=\"token attr-name\">headers:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span><span class=\"token string\">\"Content-Type\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"text/plain;charset=utf-8\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n      <span class=\"token keyword\">end</span>\n\n      assert <span class=\"token punctuation\">{</span><span class=\"token atom symbol\">:ok</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">%</span><span class=\"token punctuation\">{</span><span class=\"token attr-name\">body:</span> <span class=\"token operator\">^</span>utf8<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> HTTPClient<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token boolean\">nil</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token attr-name\">requester:</span> requester<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">end</span>\n\n    test <span class=\"token string\">\"emits log when encountering unknown encoding\"</span> <span class=\"token keyword\">do</span>\n      requester <span class=\"token operator\">=</span> <span class=\"token keyword\">fn</span> _url<span class=\"token punctuation\">,</span> _headers<span class=\"token punctuation\">,</span> _options <span class=\"token operator\">-></span>\n        <span class=\"token punctuation\">{</span><span class=\"token atom symbol\">:ok</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">%</span>HTTPoison<span class=\"token punctuation\">.</span>Response<span class=\"token punctuation\">{</span>\n          <span class=\"token attr-name\">body:</span> <span class=\"token string\">\"Hallo\"</span><span class=\"token punctuation\">,</span>\n          <span class=\"token attr-name\">headers:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span><span class=\"token string\">\"Content-Type\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"text/plain;charset=duurf\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n      <span class=\"token keyword\">end</span>\n\n      assert capture_log<span class=\"token punctuation\">(</span><span class=\"token keyword\">fn</span> <span class=\"token operator\">-></span>\n        assert <span class=\"token punctuation\">{</span><span class=\"token atom symbol\">:ok</span><span class=\"token punctuation\">,</span> _<span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> HTTPClient<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token boolean\">nil</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token attr-name\">requester:</span> requester<span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">end</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=~</span> <span class=\"token string\">\"Need to implement re-encoding support for: duurf\"</span>\n    <span class=\"token keyword\">end</span>\n\n    test <span class=\"token string\">\"emits log when failing to reencode\"</span> <span class=\"token keyword\">do</span>\n      body <span class=\"token operator\">=</span> <span class=\"token punctuation\">&lt;&lt;</span><span class=\"token number\">163</span><span class=\"token punctuation\">,</span> <span class=\"token number\">233</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">117</span><span class=\"token punctuation\">,</span> <span class=\"token number\">102</span><span class=\"token punctuation\">,</span> <span class=\"token number\">102</span><span class=\"token punctuation\">,</span> <span class=\"token number\">833</span><span class=\"token operator\">::</span><span class=\"token number\">3</span><span class=\"token punctuation\">>></span>\n      requester <span class=\"token operator\">=</span> <span class=\"token keyword\">fn</span> _url<span class=\"token punctuation\">,</span> _headers<span class=\"token punctuation\">,</span> _options <span class=\"token operator\">-></span>\n        <span class=\"token punctuation\">{</span><span class=\"token atom symbol\">:ok</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">%</span>HTTPoison<span class=\"token punctuation\">.</span>Response<span class=\"token punctuation\">{</span>\n          <span class=\"token attr-name\">body:</span> body<span class=\"token punctuation\">,</span>\n          <span class=\"token attr-name\">headers:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span><span class=\"token string\">\"Content-Type\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"text/plain;charset=ISO-8859-1\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n      <span class=\"token keyword\">end</span>\n\n      assert capture_log<span class=\"token punctuation\">(</span><span class=\"token keyword\">fn</span> <span class=\"token operator\">-></span>\n        assert <span class=\"token punctuation\">{</span><span class=\"token atom symbol\">:ok</span><span class=\"token punctuation\">,</span> _<span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> HTTPClient<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token boolean\">nil</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token attr-name\">requester:</span> requester<span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">end</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=~</span> <span class=\"token string\">\"Failed to re-encode response\"</span>\n    <span class=\"token keyword\">end</span>\n\n    test <span class=\"token string\">\"does not re-encode un-specified bodies\"</span> <span class=\"token keyword\">do</span>\n      body <span class=\"token operator\">=</span> <span class=\"token string\">\"£éduff\"</span> <span class=\"token operator\">&lt;></span> <span class=\"token punctuation\">&lt;&lt;</span><span class=\"token number\">163</span><span class=\"token punctuation\">,</span> <span class=\"token number\">233</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">117</span><span class=\"token punctuation\">,</span> <span class=\"token number\">102</span><span class=\"token punctuation\">,</span> <span class=\"token number\">102</span><span class=\"token punctuation\">>></span>\n      requester <span class=\"token operator\">=</span> <span class=\"token keyword\">fn</span> _url<span class=\"token punctuation\">,</span> _headers<span class=\"token punctuation\">,</span> _options <span class=\"token operator\">-></span>\n        <span class=\"token punctuation\">{</span><span class=\"token atom symbol\">:ok</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">%</span>HTTPoison<span class=\"token punctuation\">.</span>Response<span class=\"token punctuation\">{</span>\n          <span class=\"token attr-name\">body:</span> body<span class=\"token punctuation\">,</span>\n          <span class=\"token attr-name\">headers:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n      <span class=\"token keyword\">end</span>\n\n      assert <span class=\"token punctuation\">{</span><span class=\"token atom symbol\">:ok</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">%</span><span class=\"token punctuation\">{</span><span class=\"token attr-name\">body:</span> <span class=\"token operator\">^</span>body<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> HTTPClient<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token boolean\">nil</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token attr-name\">requester:</span> requester<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">end</span>\n  <span class=\"token keyword\">end</span>\n\n  describe <span class=\"token string\">\"post\"</span> <span class=\"token keyword\">do</span>\n    test <span class=\"token string\">\"decompresses a gzipped body\"</span> <span class=\"token keyword\">do</span>\n      requester <span class=\"token operator\">=</span> <span class=\"token keyword\">fn</span> _url<span class=\"token punctuation\">,</span> _body<span class=\"token punctuation\">,</span> _headers<span class=\"token punctuation\">,</span> _options <span class=\"token operator\">-></span>\n        <span class=\"token punctuation\">{</span><span class=\"token atom symbol\">:ok</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">%</span>HTTPoison<span class=\"token punctuation\">.</span>Response<span class=\"token punctuation\">{</span>\n          <span class=\"token attr-name\">body:</span> <span class=\"token attribute variable\">@gzipped_response</span><span class=\"token punctuation\">,</span>\n          <span class=\"token attr-name\">headers:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span><span class=\"token string\">\"Content-Encoding\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"gzip\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n      <span class=\"token keyword\">end</span>\n\n      assert <span class=\"token punctuation\">{</span><span class=\"token atom symbol\">:ok</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">%</span><span class=\"token punctuation\">{</span><span class=\"token attr-name\">body:</span> <span class=\"token attribute variable\">@decoded</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> HTTPClient<span class=\"token punctuation\">.</span>post<span class=\"token punctuation\">(</span><span class=\"token boolean\">nil</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">nil</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token attr-name\">requester:</span> requester<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">end</span>\n\n    test <span class=\"token string\">\"decompresses a gzipped body with x-gzip header\"</span> <span class=\"token keyword\">do</span>\n      requester <span class=\"token operator\">=</span> <span class=\"token keyword\">fn</span> _url<span class=\"token punctuation\">,</span> _body<span class=\"token punctuation\">,</span> _headers<span class=\"token punctuation\">,</span> _options <span class=\"token operator\">-></span>\n        <span class=\"token punctuation\">{</span><span class=\"token atom symbol\">:ok</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">%</span>HTTPoison<span class=\"token punctuation\">.</span>Response<span class=\"token punctuation\">{</span>\n          <span class=\"token attr-name\">body:</span> <span class=\"token attribute variable\">@gzipped_response</span><span class=\"token punctuation\">,</span>\n          <span class=\"token attr-name\">headers:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span><span class=\"token string\">\"Content-Encoding\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"x-gzip\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n      <span class=\"token keyword\">end</span>\n\n      assert <span class=\"token punctuation\">{</span><span class=\"token atom symbol\">:ok</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">%</span><span class=\"token punctuation\">{</span><span class=\"token attr-name\">body:</span> <span class=\"token attribute variable\">@decoded</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> HTTPClient<span class=\"token punctuation\">.</span>post<span class=\"token punctuation\">(</span><span class=\"token boolean\">nil</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">nil</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token attr-name\">requester:</span> requester<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">end</span>\n\n    test <span class=\"token string\">\"does not attempt to decompress a plain body with gzip header\"</span> <span class=\"token keyword\">do</span>\n      body <span class=\"token operator\">=</span> <span class=\"token string\">\"Hallo\"</span>\n      requester <span class=\"token operator\">=</span> <span class=\"token keyword\">fn</span> _url<span class=\"token punctuation\">,</span> _body<span class=\"token punctuation\">,</span> _headers<span class=\"token punctuation\">,</span> _options <span class=\"token operator\">-></span>\n        <span class=\"token punctuation\">{</span><span class=\"token atom symbol\">:ok</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">%</span>HTTPoison<span class=\"token punctuation\">.</span>Response<span class=\"token punctuation\">{</span>\n          <span class=\"token attr-name\">body:</span> body<span class=\"token punctuation\">,</span>\n          <span class=\"token attr-name\">headers:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span><span class=\"token string\">\"Content-Encoding\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"gzip\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n      <span class=\"token keyword\">end</span>\n\n      assert <span class=\"token punctuation\">{</span><span class=\"token atom symbol\">:ok</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">%</span><span class=\"token punctuation\">{</span><span class=\"token attr-name\">body:</span> <span class=\"token operator\">^</span>body<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> HTTPClient<span class=\"token punctuation\">.</span>post<span class=\"token punctuation\">(</span><span class=\"token boolean\">nil</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">nil</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token attr-name\">requester:</span> requester<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">end</span>\n\n    test <span class=\"token string\">\"decompresses a zipped body\"</span> <span class=\"token keyword\">do</span>\n      requester <span class=\"token operator\">=</span> <span class=\"token keyword\">fn</span> _url<span class=\"token punctuation\">,</span> _body<span class=\"token punctuation\">,</span> _headers<span class=\"token punctuation\">,</span> _options <span class=\"token operator\">-></span>\n        <span class=\"token punctuation\">{</span><span class=\"token atom symbol\">:ok</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">%</span>HTTPoison<span class=\"token punctuation\">.</span>Response<span class=\"token punctuation\">{</span>\n          <span class=\"token attr-name\">body:</span> <span class=\"token attribute variable\">@zipped_response</span><span class=\"token punctuation\">,</span>\n          <span class=\"token attr-name\">headers:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span><span class=\"token string\">\"Content-Encoding\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"deflate\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n      <span class=\"token keyword\">end</span>\n\n      assert <span class=\"token punctuation\">{</span><span class=\"token atom symbol\">:ok</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">%</span><span class=\"token punctuation\">{</span><span class=\"token attr-name\">body:</span> <span class=\"token attribute variable\">@decoded</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> HTTPClient<span class=\"token punctuation\">.</span>post<span class=\"token punctuation\">(</span><span class=\"token boolean\">nil</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">nil</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token attr-name\">requester:</span> requester<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">end</span>\n\n    test <span class=\"token string\">\"emits log when encountering unsupported compression\"</span> <span class=\"token keyword\">do</span>\n      requester <span class=\"token operator\">=</span> <span class=\"token keyword\">fn</span> _url<span class=\"token punctuation\">,</span> _body<span class=\"token punctuation\">,</span> _headers<span class=\"token punctuation\">,</span> _options <span class=\"token operator\">-></span>\n        <span class=\"token punctuation\">{</span><span class=\"token atom symbol\">:ok</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">%</span>HTTPoison<span class=\"token punctuation\">.</span>Response<span class=\"token punctuation\">{</span>\n          <span class=\"token attr-name\">body:</span> <span class=\"token string\">\"Hallo\"</span><span class=\"token punctuation\">,</span>\n          <span class=\"token attr-name\">headers:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span><span class=\"token string\">\"Content-Encoding\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"br\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n      <span class=\"token keyword\">end</span>\n\n      assert capture_log<span class=\"token punctuation\">(</span><span class=\"token keyword\">fn</span> <span class=\"token operator\">-></span>\n        assert <span class=\"token punctuation\">{</span><span class=\"token atom symbol\">:ok</span><span class=\"token punctuation\">,</span> _<span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> HTTPClient<span class=\"token punctuation\">.</span>post<span class=\"token punctuation\">(</span><span class=\"token boolean\">nil</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">nil</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token attr-name\">requester:</span> requester<span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">end</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=~</span> <span class=\"token string\">\"No support for decompression of body using 'br' algorithm\"</span>\n    <span class=\"token keyword\">end</span>\n\n    test <span class=\"token string\">\"emits log when failing to decompress\"</span> <span class=\"token keyword\">do</span>\n      requester <span class=\"token operator\">=</span> <span class=\"token keyword\">fn</span> _url<span class=\"token punctuation\">,</span> _body<span class=\"token punctuation\">,</span> _headers<span class=\"token punctuation\">,</span> _options <span class=\"token operator\">-></span>\n        <span class=\"token punctuation\">{</span><span class=\"token atom symbol\">:ok</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">%</span>HTTPoison<span class=\"token punctuation\">.</span>Response<span class=\"token punctuation\">{</span>\n          <span class=\"token attr-name\">body:</span> <span class=\"token punctuation\">&lt;&lt;</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">>></span><span class=\"token punctuation\">,</span>\n          <span class=\"token attr-name\">headers:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span><span class=\"token string\">\"Content-Encoding\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"deflate\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n      <span class=\"token keyword\">end</span>\n\n      assert capture_log<span class=\"token punctuation\">(</span><span class=\"token keyword\">fn</span> <span class=\"token operator\">-></span>\n        assert <span class=\"token punctuation\">{</span><span class=\"token atom symbol\">:ok</span><span class=\"token punctuation\">,</span> _<span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> HTTPClient<span class=\"token punctuation\">.</span>post<span class=\"token punctuation\">(</span><span class=\"token boolean\">nil</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">nil</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token attr-name\">requester:</span> requester<span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">end</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=~</span> <span class=\"token string\">\"Failed to decompress response\"</span>\n    <span class=\"token keyword\">end</span>\n\n    test <span class=\"token string\">\"re-encodes a latin1 body to UTF-8\"</span> <span class=\"token keyword\">do</span>\n      latin1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">&lt;&lt;</span><span class=\"token number\">163</span><span class=\"token punctuation\">,</span> <span class=\"token number\">233</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">117</span><span class=\"token punctuation\">,</span> <span class=\"token number\">102</span><span class=\"token punctuation\">,</span> <span class=\"token number\">102</span><span class=\"token punctuation\">>></span>\n      utf8 <span class=\"token operator\">=</span> <span class=\"token string\">\"£éduff\"</span>\n      requester <span class=\"token operator\">=</span> <span class=\"token keyword\">fn</span> _url<span class=\"token punctuation\">,</span> _body<span class=\"token punctuation\">,</span> _headers<span class=\"token punctuation\">,</span> _options <span class=\"token operator\">-></span>\n        <span class=\"token punctuation\">{</span><span class=\"token atom symbol\">:ok</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">%</span>HTTPoison<span class=\"token punctuation\">.</span>Response<span class=\"token punctuation\">{</span>\n          <span class=\"token attr-name\">body:</span> latin1<span class=\"token punctuation\">,</span>\n          <span class=\"token attr-name\">headers:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span><span class=\"token string\">\"Content-Type\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"text/plain;charset=ISO-8859-1\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n      <span class=\"token keyword\">end</span>\n\n      assert <span class=\"token punctuation\">{</span><span class=\"token atom symbol\">:ok</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">%</span><span class=\"token punctuation\">{</span><span class=\"token attr-name\">body:</span> <span class=\"token operator\">^</span>utf8<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> HTTPClient<span class=\"token punctuation\">.</span>post<span class=\"token punctuation\">(</span><span class=\"token boolean\">nil</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">nil</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token attr-name\">requester:</span> requester<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">end</span>\n\n    test <span class=\"token string\">\"does not re-encode utf8 bodies\"</span> <span class=\"token keyword\">do</span>\n      utf8 <span class=\"token operator\">=</span> <span class=\"token string\">\"£éduff\"</span>\n      requester <span class=\"token operator\">=</span> <span class=\"token keyword\">fn</span> _url<span class=\"token punctuation\">,</span> _body<span class=\"token punctuation\">,</span> _headers<span class=\"token punctuation\">,</span> _options <span class=\"token operator\">-></span>\n        <span class=\"token punctuation\">{</span><span class=\"token atom symbol\">:ok</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">%</span>HTTPoison<span class=\"token punctuation\">.</span>Response<span class=\"token punctuation\">{</span>\n          <span class=\"token attr-name\">body:</span> utf8<span class=\"token punctuation\">,</span>\n          <span class=\"token attr-name\">headers:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span><span class=\"token string\">\"Content-Type\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"text/plain;charset=utf-8\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n      <span class=\"token keyword\">end</span>\n\n      assert <span class=\"token punctuation\">{</span><span class=\"token atom symbol\">:ok</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">%</span><span class=\"token punctuation\">{</span><span class=\"token attr-name\">body:</span> <span class=\"token operator\">^</span>utf8<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> HTTPClient<span class=\"token punctuation\">.</span>post<span class=\"token punctuation\">(</span><span class=\"token boolean\">nil</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">nil</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token attr-name\">requester:</span> requester<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">end</span>\n\n    test <span class=\"token string\">\"emits log when encountering unknown encoding\"</span> <span class=\"token keyword\">do</span>\n      requester <span class=\"token operator\">=</span> <span class=\"token keyword\">fn</span> _url<span class=\"token punctuation\">,</span> _body<span class=\"token punctuation\">,</span> _headers<span class=\"token punctuation\">,</span> _options <span class=\"token operator\">-></span>\n        <span class=\"token punctuation\">{</span><span class=\"token atom symbol\">:ok</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">%</span>HTTPoison<span class=\"token punctuation\">.</span>Response<span class=\"token punctuation\">{</span>\n          <span class=\"token attr-name\">body:</span> <span class=\"token string\">\"hallo\"</span><span class=\"token punctuation\">,</span>\n          <span class=\"token attr-name\">headers:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span><span class=\"token string\">\"Content-Type\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"text/plain;charset=duurf\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n      <span class=\"token keyword\">end</span>\n\n      assert capture_log<span class=\"token punctuation\">(</span><span class=\"token keyword\">fn</span> <span class=\"token operator\">-></span>\n        assert <span class=\"token punctuation\">{</span><span class=\"token atom symbol\">:ok</span><span class=\"token punctuation\">,</span> _<span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> HTTPClient<span class=\"token punctuation\">.</span>post<span class=\"token punctuation\">(</span><span class=\"token boolean\">nil</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">nil</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token attr-name\">requester:</span> requester<span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">end</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=~</span> <span class=\"token string\">\"Need to implement re-encoding support for: duurf\"</span>\n    <span class=\"token keyword\">end</span>\n\n    test <span class=\"token string\">\"emits log when failing to reencode\"</span> <span class=\"token keyword\">do</span>\n      body <span class=\"token operator\">=</span> <span class=\"token punctuation\">&lt;&lt;</span><span class=\"token number\">163</span><span class=\"token punctuation\">,</span> <span class=\"token number\">233</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">117</span><span class=\"token punctuation\">,</span> <span class=\"token number\">102</span><span class=\"token punctuation\">,</span> <span class=\"token number\">102</span><span class=\"token punctuation\">,</span> <span class=\"token number\">833</span><span class=\"token operator\">::</span><span class=\"token number\">3</span><span class=\"token punctuation\">>></span>\n      requester <span class=\"token operator\">=</span> <span class=\"token keyword\">fn</span> _url<span class=\"token punctuation\">,</span> _body<span class=\"token punctuation\">,</span> _headers<span class=\"token punctuation\">,</span> _options <span class=\"token operator\">-></span>\n        <span class=\"token punctuation\">{</span><span class=\"token atom symbol\">:ok</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">%</span>HTTPoison<span class=\"token punctuation\">.</span>Response<span class=\"token punctuation\">{</span>\n          <span class=\"token attr-name\">body:</span> body<span class=\"token punctuation\">,</span>\n          <span class=\"token attr-name\">headers:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span><span class=\"token string\">\"Content-Type\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"text/plain;charset=ISO-8859-1\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n      <span class=\"token keyword\">end</span>\n\n      assert capture_log<span class=\"token punctuation\">(</span><span class=\"token keyword\">fn</span> <span class=\"token operator\">-></span>\n        assert <span class=\"token punctuation\">{</span><span class=\"token atom symbol\">:ok</span><span class=\"token punctuation\">,</span> _<span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> HTTPClient<span class=\"token punctuation\">.</span>post<span class=\"token punctuation\">(</span><span class=\"token boolean\">nil</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">nil</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token attr-name\">requester:</span> requester<span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">end</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=~</span> <span class=\"token string\">\"Failed to re-encode response\"</span>\n    <span class=\"token keyword\">end</span>\n\n    test <span class=\"token string\">\"does not re-encode un-specified bodies\"</span> <span class=\"token keyword\">do</span>\n      body <span class=\"token operator\">=</span> <span class=\"token string\">\"£éduff\"</span> <span class=\"token operator\">&lt;></span> <span class=\"token punctuation\">&lt;&lt;</span><span class=\"token number\">163</span><span class=\"token punctuation\">,</span> <span class=\"token number\">233</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">117</span><span class=\"token punctuation\">,</span> <span class=\"token number\">102</span><span class=\"token punctuation\">,</span> <span class=\"token number\">102</span><span class=\"token punctuation\">>></span>\n      requester <span class=\"token operator\">=</span> <span class=\"token keyword\">fn</span> _url<span class=\"token punctuation\">,</span> _body<span class=\"token punctuation\">,</span> _headers<span class=\"token punctuation\">,</span> _options <span class=\"token operator\">-></span>\n        <span class=\"token punctuation\">{</span><span class=\"token atom symbol\">:ok</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">%</span>HTTPoison<span class=\"token punctuation\">.</span>Response<span class=\"token punctuation\">{</span>\n          <span class=\"token attr-name\">body:</span> body<span class=\"token punctuation\">,</span>\n          <span class=\"token attr-name\">headers:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n      <span class=\"token keyword\">end</span>\n\n      assert <span class=\"token punctuation\">{</span><span class=\"token atom symbol\">:ok</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">%</span><span class=\"token punctuation\">{</span><span class=\"token attr-name\">body:</span> <span class=\"token operator\">^</span>body<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> HTTPClient<span class=\"token punctuation\">.</span>post<span class=\"token punctuation\">(</span><span class=\"token boolean\">nil</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">nil</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token attr-name\">requester:</span> requester<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">end</span>\n  <span class=\"token keyword\">end</span>\n<span class=\"token keyword\">end</span></code></pre>\n      </div>\n<p>Cool. That’s a lot of tests, but know that the tests are exactly the same\nbetween <code class=\"language-text\">HttpClient.get</code> and <code class=\"language-text\">HttpClient.post</code>, just with the different function\ncall.</p>\n<p>Let’s make those tests pass:</p>\n<div class=\"gatsby-highlight\" data-language=\"elixir\">\n      <pre class=\"language-elixir\"><code class=\"language-elixir\"><span class=\"token keyword\">defmodule</span> MyApp<span class=\"token punctuation\">.</span>HTTPClient <span class=\"token keyword\">do</span>\n  <span class=\"token attribute variable\">@moduledoc</span> <span class=\"token string\">\"\"\"\n  A wrapper around HTTPoison that takes care of post-processing depending on the response, namely:\n    1) decompress the response if gzipped\n    2) re-encode the body into UTF-8 if ISO-8859-1\n  \"\"\"</span>\n  <span class=\"token attribute variable\">@default_getter</span> <span class=\"token capture function\">&amp;HTTPoison.get/3</span>\n  <span class=\"token attribute variable\">@default_poster</span> <span class=\"token capture function\">&amp;HTTPoison.post/4</span>\n  <span class=\"token attribute variable\">@default_options</span> <span class=\"token punctuation\">[</span><span class=\"token attr-name\">timeout:</span> <span class=\"token number\">300_000</span><span class=\"token punctuation\">,</span> <span class=\"token attr-name\">recv_timeout:</span> <span class=\"token number\">60_000</span><span class=\"token punctuation\">]</span>\n\n  <span class=\"token keyword\">require</span> Logger\n\n  <span class=\"token attribute variable\">@doc</span> <span class=\"token string\">\"\"\"\n  GET a URL with headers. Supported options:\n    requester: fn(url, headers, request_options)\n  \"\"\"</span>\n  <span class=\"token attribute variable\">@spec</span> get<span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">.</span>t<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> HTTPoison<span class=\"token punctuation\">.</span>headers<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> list<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">::</span>\n    <span class=\"token punctuation\">{</span><span class=\"token atom symbol\">:ok</span><span class=\"token punctuation\">,</span> HTTPoison<span class=\"token punctuation\">.</span>Response<span class=\"token punctuation\">.</span>t<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span> <span class=\"token operator\">|</span> <span class=\"token punctuation\">{</span><span class=\"token atom symbol\">:error</span><span class=\"token punctuation\">,</span> HTTPoison<span class=\"token punctuation\">.</span>Error<span class=\"token punctuation\">.</span>t<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">def</span> get<span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">,</span> headers<span class=\"token punctuation\">,</span> request_options <span class=\"token operator\">\\\\</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">do</span>\n    opts <span class=\"token operator\">=</span> request_options <span class=\"token operator\">++</span> <span class=\"token attribute variable\">@default_options</span>\n    <span class=\"token punctuation\">{</span>get<span class=\"token punctuation\">,</span> opts<span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> Keyword<span class=\"token punctuation\">.</span>pop<span class=\"token punctuation\">(</span>opts<span class=\"token punctuation\">,</span> <span class=\"token atom symbol\">:requester</span><span class=\"token punctuation\">,</span> <span class=\"token attribute variable\">@default_getter</span><span class=\"token punctuation\">)</span>\n\n    url\n    <span class=\"token operator\">|></span> get<span class=\"token punctuation\">.</span><span class=\"token punctuation\">(</span>headers<span class=\"token punctuation\">,</span> opts<span class=\"token punctuation\">)</span>\n    <span class=\"token operator\">|></span> process_response\n  <span class=\"token keyword\">end</span>\n\n  <span class=\"token attribute variable\">@doc</span> <span class=\"token string\">\"\"\"\n  POST a URL with a body, headers. Supported options:\n    requester: fn(url, body, headers, request_options)\n  \"\"\"</span>\n  <span class=\"token attribute variable\">@spec</span> post<span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">.</span>t<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> HTTPoison<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> HTTPoison<span class=\"token punctuation\">.</span>headers<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> list<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">::</span>\n    <span class=\"token punctuation\">{</span><span class=\"token atom symbol\">:ok</span><span class=\"token punctuation\">,</span> HTTPoison<span class=\"token punctuation\">.</span>Response<span class=\"token punctuation\">.</span>t<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span> <span class=\"token operator\">|</span> <span class=\"token punctuation\">{</span><span class=\"token atom symbol\">:error</span><span class=\"token punctuation\">,</span> HTTPoison<span class=\"token punctuation\">.</span>Error<span class=\"token punctuation\">.</span>t<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">def</span> post<span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">,</span> body<span class=\"token punctuation\">,</span> headers<span class=\"token punctuation\">,</span> request_options <span class=\"token operator\">\\\\</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">do</span>\n    opts <span class=\"token operator\">=</span> request_options <span class=\"token operator\">++</span> <span class=\"token attribute variable\">@default_options</span>\n    <span class=\"token punctuation\">{</span>post<span class=\"token punctuation\">,</span> opts<span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> Keyword<span class=\"token punctuation\">.</span>pop<span class=\"token punctuation\">(</span>opts<span class=\"token punctuation\">,</span> <span class=\"token atom symbol\">:requester</span><span class=\"token punctuation\">,</span> <span class=\"token attribute variable\">@default_poster</span><span class=\"token punctuation\">)</span>\n\n    url\n    <span class=\"token operator\">|></span> post<span class=\"token punctuation\">.</span><span class=\"token punctuation\">(</span>body<span class=\"token punctuation\">,</span> headers<span class=\"token punctuation\">,</span> opts<span class=\"token punctuation\">)</span>\n    <span class=\"token operator\">|></span> process_response\n  <span class=\"token keyword\">end</span>\n\n  <span class=\"token keyword\">defp</span> process_response<span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">)</span> <span class=\"token keyword\">do</span>\n    response\n    <span class=\"token operator\">|></span> decompress_response\n    <span class=\"token operator\">|></span> reencode_response_to_utf8\n  <span class=\"token keyword\">end</span>\n\n  <span class=\"token keyword\">defp</span> decompress_response<span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token atom symbol\">:error</span><span class=\"token punctuation\">,</span> response<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token attr-name\">do:</span> <span class=\"token punctuation\">{</span><span class=\"token atom symbol\">:error</span><span class=\"token punctuation\">,</span> response<span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">defp</span> decompress_response<span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>status<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">%</span><span class=\"token punctuation\">{</span><span class=\"token attr-name\">headers:</span> headers<span class=\"token punctuation\">,</span> <span class=\"token attr-name\">body:</span> body<span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> response<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">do</span>\n    <span class=\"token keyword\">try</span> <span class=\"token keyword\">do</span>\n      decompressed_body <span class=\"token operator\">=</span>\n        headers\n        <span class=\"token operator\">|></span> find_header<span class=\"token punctuation\">(</span><span class=\"token string\">\"content-encoding\"</span><span class=\"token punctuation\">)</span>\n        <span class=\"token operator\">|></span> decompress_body<span class=\"token punctuation\">(</span>body<span class=\"token punctuation\">)</span>\n\n      <span class=\"token punctuation\">{</span>status<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">%</span><span class=\"token punctuation\">{</span>response <span class=\"token operator\">|</span> <span class=\"token attr-name\">body:</span> decompressed_body<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">rescue</span>\n      _ <span class=\"token operator\">-></span>\n        Logger<span class=\"token punctuation\">.</span>error<span class=\"token punctuation\">(</span><span class=\"token string\">\"Failed to decompress response: <span class=\"token interpolation\"><span class=\"token delimiter punctuation\">#{</span>inspect response<span class=\"token delimiter punctuation\">}</span></span>\"</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>status<span class=\"token punctuation\">,</span> response<span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">end</span>\n  <span class=\"token keyword\">end</span>\n\n  <span class=\"token keyword\">defp</span> reencode_response_to_utf8<span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token atom symbol\">:error</span><span class=\"token punctuation\">,</span> response<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token attr-name\">do:</span> <span class=\"token punctuation\">{</span><span class=\"token atom symbol\">:error</span><span class=\"token punctuation\">,</span> response<span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">defp</span> reencode_response_to_utf8<span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>status<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">%</span><span class=\"token punctuation\">{</span><span class=\"token attr-name\">headers:</span> headers<span class=\"token punctuation\">,</span> <span class=\"token attr-name\">body:</span> body<span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> response<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">do</span>\n    <span class=\"token keyword\">try</span> <span class=\"token keyword\">do</span>\n      reencoded_body <span class=\"token operator\">=</span>\n        headers\n        <span class=\"token operator\">|></span> find_header<span class=\"token punctuation\">(</span><span class=\"token string\">\"content-type\"</span><span class=\"token punctuation\">)</span>\n        <span class=\"token operator\">|></span> parse_charset<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token operator\">|></span> reencode_body<span class=\"token punctuation\">(</span>body<span class=\"token punctuation\">)</span>\n\n      <span class=\"token punctuation\">{</span>status<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">%</span><span class=\"token punctuation\">{</span>response <span class=\"token operator\">|</span> <span class=\"token attr-name\">body:</span> reencoded_body<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">rescue</span>\n      _ <span class=\"token operator\">-></span>\n        Logger<span class=\"token punctuation\">.</span>error<span class=\"token punctuation\">(</span><span class=\"token string\">\"Failed to re-encode response: <span class=\"token interpolation\"><span class=\"token delimiter punctuation\">#{</span>inspect response<span class=\"token delimiter punctuation\">}</span></span>\"</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>status<span class=\"token punctuation\">,</span> response<span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">end</span>\n  <span class=\"token keyword\">end</span>\n\n  <span class=\"token keyword\">defp</span> find_header<span class=\"token punctuation\">(</span>headers<span class=\"token punctuation\">,</span> header_name<span class=\"token punctuation\">)</span> <span class=\"token keyword\">do</span>\n    Enum<span class=\"token punctuation\">.</span>find_value<span class=\"token punctuation\">(</span>\n      headers<span class=\"token punctuation\">,</span>\n      <span class=\"token keyword\">fn</span> <span class=\"token punctuation\">{</span>name<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">}</span> <span class=\"token operator\">-></span>\n        name <span class=\"token operator\">=~</span> <span class=\"token regex\">~r/#{header_name}/i</span> <span class=\"token operator\">&amp;&amp;</span> String<span class=\"token punctuation\">.</span>downcase<span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">end</span>\n    <span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">end</span>\n\n  <span class=\"token comment\"># gzip's magic header is 0x1F 0x8B, with the 3rd byte specifying the compression method, 0x08</span>\n  <span class=\"token comment\"># meaning \"deflate\". More info https://en.wikipedia.org/wiki/Gzip</span>\n  <span class=\"token keyword\">defp</span> decompress_body<span class=\"token punctuation\">(</span><span class=\"token boolean\">nil</span><span class=\"token punctuation\">,</span> body<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token attr-name\">do:</span> body\n  <span class=\"token keyword\">defp</span> decompress_body<span class=\"token punctuation\">(</span><span class=\"token string\">\"identity\"</span><span class=\"token punctuation\">,</span> body<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token attr-name\">do:</span> body\n  <span class=\"token keyword\">defp</span> decompress_body<span class=\"token punctuation\">(</span><span class=\"token string\">\"gzip\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&lt;&lt;</span><span class=\"token number\">31</span><span class=\"token punctuation\">,</span> <span class=\"token number\">139</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> _<span class=\"token operator\">::</span>binary<span class=\"token punctuation\">>></span> <span class=\"token operator\">=</span> body<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token attr-name\">do:</span> <span class=\"token atom symbol\">:zlib</span><span class=\"token punctuation\">.</span>gunzip<span class=\"token punctuation\">(</span>body<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">defp</span> decompress_body<span class=\"token punctuation\">(</span><span class=\"token string\">\"gzip\"</span><span class=\"token punctuation\">,</span> body<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token attr-name\">do:</span> body\n  <span class=\"token keyword\">defp</span> decompress_body<span class=\"token punctuation\">(</span><span class=\"token string\">\"x-gzip\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&lt;&lt;</span><span class=\"token number\">31</span><span class=\"token punctuation\">,</span> <span class=\"token number\">139</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> _<span class=\"token operator\">::</span>binary<span class=\"token punctuation\">>></span> <span class=\"token operator\">=</span> body<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token attr-name\">do:</span> <span class=\"token atom symbol\">:zlib</span><span class=\"token punctuation\">.</span>gunzip<span class=\"token punctuation\">(</span>body<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">defp</span> decompress_body<span class=\"token punctuation\">(</span><span class=\"token string\">\"x-gzip\"</span><span class=\"token punctuation\">,</span> body<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token attr-name\">do:</span> body\n  <span class=\"token keyword\">defp</span> decompress_body<span class=\"token punctuation\">(</span><span class=\"token string\">\"deflate\"</span><span class=\"token punctuation\">,</span> body<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token attr-name\">do:</span> <span class=\"token atom symbol\">:zlib</span><span class=\"token punctuation\">.</span>unzip<span class=\"token punctuation\">(</span>body<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">defp</span> decompress_body<span class=\"token punctuation\">(</span>other<span class=\"token punctuation\">,</span> body<span class=\"token punctuation\">)</span> <span class=\"token keyword\">do</span>\n    Logger<span class=\"token punctuation\">.</span>error<span class=\"token punctuation\">(</span><span class=\"token string\">\"No support for decompression of body using '<span class=\"token interpolation\"><span class=\"token delimiter punctuation\">#{</span>other<span class=\"token delimiter punctuation\">}</span></span>' algorithm.\"</span><span class=\"token punctuation\">)</span>\n    body\n  <span class=\"token keyword\">end</span>\n\n  <span class=\"token keyword\">defp</span> parse_charset<span class=\"token punctuation\">(</span><span class=\"token boolean\">nil</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token attr-name\">do:</span> <span class=\"token boolean\">nil</span>\n  <span class=\"token keyword\">defp</span> parse_charset<span class=\"token punctuation\">(</span>content_type<span class=\"token punctuation\">)</span> <span class=\"token keyword\">do</span>\n    with <span class=\"token punctuation\">{</span><span class=\"token atom symbol\">:ok</span><span class=\"token punctuation\">,</span> _<span class=\"token punctuation\">,</span> _<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">%</span><span class=\"token punctuation\">{</span><span class=\"token string\">\"charset\"</span> <span class=\"token operator\">=></span> charset<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span> <span class=\"token operator\">&lt;-</span> Plug<span class=\"token punctuation\">.</span>Conn<span class=\"token punctuation\">.</span>Utils<span class=\"token punctuation\">.</span>content_type<span class=\"token punctuation\">(</span>content_type<span class=\"token punctuation\">)</span> <span class=\"token keyword\">do</span>\n      <span class=\"token keyword\">cond</span> <span class=\"token keyword\">do</span>\n        charset <span class=\"token operator\">=~</span> <span class=\"token regex\">~r/utf-?8/</span> <span class=\"token operator\">-></span> <span class=\"token atom symbol\">:utf8</span>\n        charset <span class=\"token operator\">=~</span> <span class=\"token regex\">~r/iso-?8859-?1/</span> <span class=\"token operator\">-></span> <span class=\"token atom symbol\">:latin1</span>\n        <span class=\"token boolean\">true</span> <span class=\"token operator\">-></span> charset\n      <span class=\"token keyword\">end</span>\n    <span class=\"token keyword\">else</span>\n      _ <span class=\"token operator\">-></span> <span class=\"token boolean\">nil</span>\n    <span class=\"token keyword\">end</span>\n  <span class=\"token keyword\">end</span>\n\n  <span class=\"token comment\"># When the header isn't sent, the RFC spec says we should assume ISO-8859-1, but the default is</span>\n  <span class=\"token comment\"># actually different per format, eg, XML should be assumed UTF-8. We're going to not re-encode</span>\n  <span class=\"token comment\"># if it's not sent and assume UTF-8. This should be safe for most cases.</span>\n  <span class=\"token keyword\">defp</span> reencode_body<span class=\"token punctuation\">(</span><span class=\"token boolean\">nil</span><span class=\"token punctuation\">,</span> body<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token attr-name\">do:</span> body\n  <span class=\"token keyword\">defp</span> reencode_body<span class=\"token punctuation\">(</span><span class=\"token atom symbol\">:utf8</span><span class=\"token punctuation\">,</span> body<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token attr-name\">do:</span> body\n  <span class=\"token keyword\">defp</span> reencode_body<span class=\"token punctuation\">(</span><span class=\"token atom symbol\">:latin1</span><span class=\"token punctuation\">,</span> body<span class=\"token punctuation\">)</span> <span class=\"token keyword\">do</span>\n    <span class=\"token keyword\">case</span> <span class=\"token atom symbol\">:unicode</span><span class=\"token punctuation\">.</span>characters_to_binary<span class=\"token punctuation\">(</span>body<span class=\"token punctuation\">,</span> <span class=\"token atom symbol\">:latin1</span><span class=\"token punctuation\">,</span> <span class=\"token atom symbol\">:utf8</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">do</span>\n      <span class=\"token punctuation\">{</span><span class=\"token atom symbol\">:error</span><span class=\"token punctuation\">,</span> binary<span class=\"token punctuation\">,</span> rest<span class=\"token punctuation\">}</span> <span class=\"token operator\">-></span>\n        Logger<span class=\"token punctuation\">.</span>error<span class=\"token punctuation\">(</span><span class=\"token string\">\"Failed to re-encode text. BODY: <span class=\"token interpolation\"><span class=\"token delimiter punctuation\">#{</span>inspect binary<span class=\"token delimiter punctuation\">}</span></span> REST: <span class=\"token interpolation\"><span class=\"token delimiter punctuation\">#{</span>inspect rest<span class=\"token delimiter punctuation\">}</span></span>\"</span><span class=\"token punctuation\">)</span>\n        body\n\n      <span class=\"token punctuation\">{</span><span class=\"token atom symbol\">:incomplete</span><span class=\"token punctuation\">,</span> reencoded_text<span class=\"token punctuation\">,</span> rest<span class=\"token punctuation\">}</span> <span class=\"token operator\">-></span>\n        Logger<span class=\"token punctuation\">.</span>warn<span class=\"token punctuation\">(</span><span class=\"token string\">\"Failed to re-encode entire text. Dropping characters: <span class=\"token interpolation\"><span class=\"token delimiter punctuation\">#{</span>inspect rest<span class=\"token delimiter punctuation\">}</span></span>\"</span><span class=\"token punctuation\">)</span>\n        reencoded_text\n\n      reencoded_text <span class=\"token operator\">-></span>\n        reencoded_text\n    <span class=\"token keyword\">end</span>\n  <span class=\"token keyword\">end</span>\n  <span class=\"token keyword\">defp</span> reencode_body<span class=\"token punctuation\">(</span>other<span class=\"token punctuation\">,</span> body<span class=\"token punctuation\">)</span> <span class=\"token keyword\">do</span>\n    Logger<span class=\"token punctuation\">.</span>error<span class=\"token punctuation\">(</span><span class=\"token string\">\"Need to implement re-encoding support for: <span class=\"token interpolation\"><span class=\"token delimiter punctuation\">#{</span>other<span class=\"token delimiter punctuation\">}</span></span>\"</span><span class=\"token punctuation\">)</span>\n    body\n  <span class=\"token keyword\">end</span>\n<span class=\"token keyword\">end</span></code></pre>\n      </div>\n<h2>Or use <a href=\"https://github.com/teamon/tesla\">[[Tesla]]</a></h2>\n<p>Tesla supports decompression out of the box; so if you started on that HTTP\nclient, you probably didn’t have to worry about any of this :)</p>","frontmatter":{"title":"HTTPoison and Decompression","date":"June 01, 2019","tags":["elixir"],"originalUrl":null}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/blog/httpoison-decompression/","previous":{"fields":{"slug":"/blog/ruby-rails-and-circle-ci-workflows/"},"frontmatter":{"title":"Ruby, Rails, and CircleCI 2.0 Workflows","tags":["ruby"],"originalUrl":"https://www.viget.com/articles/ruby-rails-and-circle-ci-2-0/","excerpt":"Know your tools -- CircleCI 2.0 Workflows\n"}},"next":null}}