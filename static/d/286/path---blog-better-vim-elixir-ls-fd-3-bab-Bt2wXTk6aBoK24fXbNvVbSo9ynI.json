{"data":{"site":{"siteMetadata":{"title":"David Bernheisel","author":"David Bernheisel"}},"markdownRemark":{"id":"b0ff425e-4bba-5df7-a3e1-4c86445e05f6","excerpt":"tldr:Problem ArisesRecently I upgraded a project to Elixir 1.10, and this version of Elixir\nintroduces . I’m working in the project, and…","timeToRead":7,"html":"<p>tldr:</p>\n<div class=\"gatsby-highlight\" data-language=\"vim\">\n      <pre class=\"language-vim\"><code class=\"language-vim\"><span class=\"token keyword\">let</span> g<span class=\"token punctuation\">:</span>ElixirLS <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token string\">\"path\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"installed\"</span><span class=\"token punctuation\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"installing\"</span><span class=\"token punctuation\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> g<span class=\"token punctuation\">:</span>ElixirLS<span class=\"token operator\">.</span><span class=\"token function\">get_info</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> abort\n  <span class=\"token keyword\">if</span> <span class=\"token operator\">!</span><span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span>g<span class=\"token punctuation\">:</span>ElixirLS<span class=\"token operator\">.</span><span class=\"token builtin\">path</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">let</span> g<span class=\"token punctuation\">:</span>ElixirLS<span class=\"token operator\">.</span>install_into <span class=\"token operator\">=</span> <span class=\"token function\">system</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"asdf which elixir\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"silent\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token operator\">-</span><span class=\"token number\">12</span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">if</span> <span class=\"token operator\">!</span>v<span class=\"token punctuation\">:</span>shell_error\n      <span class=\"token keyword\">let</span> g<span class=\"token punctuation\">:</span>ElixirLS<span class=\"token operator\">.</span><span class=\"token builtin\">path</span> <span class=\"token operator\">=</span> g<span class=\"token punctuation\">:</span>ElixirLS<span class=\"token operator\">.</span>install_into <span class=\"token operator\">.</span> <span class=\"token string\">'elixir_ls'</span>\n      <span class=\"token keyword\">let</span> g<span class=\"token punctuation\">:</span>ElixirLS<span class=\"token operator\">.</span><span class=\"token builtin\">bin</span> <span class=\"token operator\">=</span> g<span class=\"token punctuation\">:</span>ElixirLS<span class=\"token operator\">.</span><span class=\"token builtin\">path</span> <span class=\"token operator\">.</span> <span class=\"token string\">\"/release/language_server.sh\"</span>\n      <span class=\"token keyword\">let</span> g<span class=\"token punctuation\">:</span>ElixirLS<span class=\"token operator\">.</span>installed <span class=\"token operator\">=</span> <span class=\"token function\">executable</span><span class=\"token punctuation\">(</span>g<span class=\"token punctuation\">:</span>ElixirLS<span class=\"token operator\">.</span><span class=\"token builtin\">bin</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">endif</span>\n  <span class=\"token keyword\">endif</span>\n  <span class=\"token keyword\">return</span> g<span class=\"token punctuation\">:</span>ElixirLS\n<span class=\"token keyword\">endfunction</span>\n\n<span class=\"token keyword\">function</span> g<span class=\"token punctuation\">:</span>ElixirLS<span class=\"token operator\">.</span><span class=\"token function\">on_stderr</span><span class=\"token punctuation\">(</span>_job_id<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">,</span> event<span class=\"token punctuation\">)</span> abort\n   <span class=\"token keyword\">echom</span> <span class=\"token function\">join</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">:</span>data<span class=\"token punctuation\">,</span> <span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">endfunction</span>\n\n<span class=\"token keyword\">function</span> g<span class=\"token punctuation\">:</span>ElixirLS<span class=\"token operator\">.</span><span class=\"token function\">on_exit</span><span class=\"token punctuation\">(</span>_job_id<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">,</span> event<span class=\"token punctuation\">)</span> abort\n  <span class=\"token keyword\">if</span> a<span class=\"token punctuation\">:</span>data <span class=\"token operator\">==</span> <span class=\"token number\">0</span>\n    <span class=\"token keyword\">let</span> g<span class=\"token punctuation\">:</span>ElixirLS<span class=\"token operator\">.</span>installed <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n    <span class=\"token keyword\">echom</span> <span class=\"token string\">\">>> Finished compiling ElixirLS\"</span>\n    execute <span class=\"token string\">\"CocRestart\"</span>\n  <span class=\"token keyword\">else</span>\n    <span class=\"token keyword\">let</span> g<span class=\"token punctuation\">:</span>ElixirLS<span class=\"token operator\">.</span>installing <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n    <span class=\"token keyword\">echom</span> <span class=\"token string\">\">>> There was a problem installing ElixirLS. Check :messages\"</span>\n  <span class=\"token keyword\">endif</span>\n<span class=\"token keyword\">endfunction</span>\n\n<span class=\"token keyword\">function</span> g<span class=\"token punctuation\">:</span>ElixirLS<span class=\"token operator\">.</span><span class=\"token function\">install</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> abort\n  <span class=\"token keyword\">let</span> me <span class=\"token operator\">=</span> <span class=\"token function\">copy</span><span class=\"token punctuation\">(</span>g<span class=\"token punctuation\">:</span>ElixirLS<span class=\"token operator\">.</span><span class=\"token function\">get_info</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">if</span> me<span class=\"token operator\">.</span>installed <span class=\"token operator\">||</span> me<span class=\"token operator\">.</span>installing\n    <span class=\"token keyword\">return</span>\n  <span class=\"token keyword\">else</span>\n    <span class=\"token keyword\">let</span> g<span class=\"token punctuation\">:</span>ElixirLS<span class=\"token operator\">.</span>installing <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n    <span class=\"token keyword\">echom</span> <span class=\"token string\">\">>> Compiling ElixirLS\"</span>\n    <span class=\"token keyword\">let</span> toolversion <span class=\"token operator\">=</span> <span class=\"token function\">fnamemodify</span><span class=\"token punctuation\">(</span><span class=\"token function\">findfile</span><span class=\"token punctuation\">(</span><span class=\"token string\">\".tool-versions\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\".;\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\":p\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">call</span> <span class=\"token function\">jobstart</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"git clone https://github.com/elixir-lsp/elixir-ls.git '\"</span> <span class=\"token operator\">.</span> me<span class=\"token operator\">.</span><span class=\"token builtin\">path</span> <span class=\"token operator\">.</span> <span class=\"token string\">\"' &amp;&amp; \"</span><span class=\"token operator\">.</span>\n          \\ <span class=\"token string\">\"cd '\"</span> <span class=\"token operator\">.</span> me<span class=\"token operator\">.</span><span class=\"token builtin\">path</span> <span class=\"token operator\">.</span> <span class=\"token string\">\"' &amp;&amp; \"</span><span class=\"token operator\">.</span>\n          \\ <span class=\"token string\">\"rm .tool-versions &amp;&amp; \"</span><span class=\"token operator\">.</span>\n          \\ <span class=\"token string\">\"cp \"</span> <span class=\"token operator\">.</span> toolversion <span class=\"token operator\">.</span> <span class=\"token string\">\" .tool-versions &amp;&amp; \"</span><span class=\"token operator\">.</span>\n          \\ <span class=\"token string\">\"mix local.hex --force --if-missing &amp;&amp; \"</span><span class=\"token operator\">.</span>\n          \\ <span class=\"token string\">\"mix local.rebar --force &amp;&amp; \"</span><span class=\"token operator\">.</span>\n          \\ <span class=\"token string\">\"mix deps.get &amp;&amp; \"</span><span class=\"token operator\">.</span>\n          \\ <span class=\"token string\">\"mix compile &amp;&amp; \"</span><span class=\"token operator\">.</span>\n          \\ <span class=\"token string\">\"mix elixir_ls.release\"</span><span class=\"token punctuation\">,</span> me<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">endif</span>\n  <span class=\"token keyword\">call</span> coc#<span class=\"token function\">config</span><span class=\"token punctuation\">(</span><span class=\"token string\">'elixir.pathToElixirLS'</span><span class=\"token punctuation\">,</span> me<span class=\"token operator\">.</span><span class=\"token builtin\">bin</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">endfunction</span>\n\naugroup elixirLS\n  <span class=\"token builtin\">autocmd</span> FileType elixir <span class=\"token keyword\">call</span> g<span class=\"token punctuation\">:</span>ElixirLS<span class=\"token operator\">.</span><span class=\"token function\">install</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\naugroup END</code></pre>\n      </div>\n<h2>Problem Arises</h2>\n<p>Recently I upgraded a project to Elixir 1.10, and this version of Elixir\nintroduces <a href=\"https://hexdocs.pm/elixir/1.10.0/Application.html#compile_env/3\"><code class=\"language-text\">Application.compile_env</code></a>. I’m working in the project, and\neverything’s fine until I want to pull the documentation for the new function…</p>\n<p>… it doesn’t show; in fact the language server is telling me this function\ndoesn’t exist. But of course it does! What’s wrong?</p>\n<p>My language server was compiled with Elixir 1.8.2-otp-21 and was installed into\none folder in my drive that all my projects look at, so it acts like a global\nlanguage server.</p>\n<p><img src=\"/ugh-40b6774b66241e08a7ad6e1416713899.gif\" alt=\"ugh...\"></p>\n<h2>Other Solutions?</h2>\n<p>There are several articles out there that assist vimmers in getting ElixirLS\nsetup for them. Here are some:</p>\n<ul>\n<li><a href=\"https://medium.com/@hauleth/dumb-elixir-visual-and-improved-editor-53c23a0800e4\">https://medium.com/@hauleth/dumb-elixir-visual-and-improved-editor-53c23a0800e4</a></li>\n<li><a href=\"https://www.mitchellhanberg.com/post/2018/10/18/how-to-use-elixir-ls-with-vim/\">https://www.mitchellhanberg.com/post/2018/10/18/how-to-use-elixir-ls-with-vim/</a></li>\n<li><a href=\"https://dev.to/sophiabrandt/neovim-and-languageclient-for-elixir-1p8b\">https://dev.to/sophiabrandt/neovim-and-languageclient-for-elixir-1p8b</a></li>\n<li><a href=\"https://www.rockyourcode.com/developing-with-elixir-in-vim/\">https://www.rockyourcode.com/developing-with-elixir-in-vim/</a></li>\n</ul>\n<p>But they all lead developers to install The One Global ElixirLS, and I suppose\nif you upgrade your project’s Elixir version you must recompile your One Global\nElixirLS too.</p>\n<h2>My Solution</h2>\n<p><img src=\"/time-for-solution-9eaf33a65a6fab255262cbb4d3262033.gif\" alt=\"time to VimScript it\"></p>\n<p>This solution is unabashedly about my setup. I use <a href=\"https://github.com/asdf-vm/asdf\">asdf</a>,\n<a href=\"https://github.com/elixir-lsp/elixir-ls\">elixir-lsp/elixir-ls</a>, <a href=\"https://github.com/neoclide/coc.nvim\">coc.nvim</a>, <a href=\"https://github.com/amiralies/coc-elixir\">coc-elixir</a> to tell coc about ElixirLS, and\n<a href=\"https://neovim.io/\">neovim</a>. If you don’t use these these tools, my vimscript will not work for you\nwithout modification.</p>\n<p>Let’s walk through it. Read through the comments.</p>\n<div class=\"gatsby-highlight\" data-language=\"vim\">\n      <pre class=\"language-vim\"><code class=\"language-vim\"><span class=\"token comment\">\" Initialize a global dictionary. It's going to assume we are not installed</span>\n<span class=\"token keyword\">let</span> g<span class=\"token punctuation\">:</span>ElixirLS <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token string\">\"path\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"installed\"</span><span class=\"token punctuation\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"installing\"</span><span class=\"token punctuation\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">\" Define a function on the dictionary </span><span class=\"token string\">'get_info'</span> <span class=\"token builtin\">key</span>\n<span class=\"token keyword\">function</span> g<span class=\"token punctuation\">:</span>ElixirLS<span class=\"token operator\">.</span><span class=\"token function\">get_info</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> abort\n  <span class=\"token comment\">\" If the path is empty, like when initialized, let's gather all this intel.</span>\n  <span class=\"token comment\">\" If we already know the path, that means we've already run through this code</span>\n  <span class=\"token comment\">\" path and don't need to query asdf again, which keeps things fast</span>\n  <span class=\"token keyword\">if</span> <span class=\"token operator\">!</span><span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span>g<span class=\"token punctuation\">:</span>ElixirLS<span class=\"token operator\">.</span><span class=\"token builtin\">path</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">\" shell out and get the path to the current location of elixir</span>\n    <span class=\"token comment\">\" This implies that it will only work for your project when you</span>\n    <span class=\"token comment\">\" open neovim from within the project folder. We're cutting the last 12</span>\n    <span class=\"token comment\">\" characters off because we don't want the newline, nor the /bin/elixir</span>\n\n    <span class=\"token comment\">\" `asdf which elixir` returns </span><span class=\"token string\">'/home/dbernheisel/.asdf/installs/elixir/1.10.0-otp-22/bin/elixir'</span>\n    <span class=\"token comment\">\" and I want </span><span class=\"token string\">'/home/dbernheisel/.asdf/installs/elixir/1.10.0-otp-22'</span>\n    <span class=\"token keyword\">let</span> g<span class=\"token punctuation\">:</span>ElixirLS<span class=\"token operator\">.</span>install_into <span class=\"token operator\">=</span> <span class=\"token function\">system</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"asdf which elixir\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"silent\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token operator\">-</span><span class=\"token number\">12</span><span class=\"token punctuation\">]</span>\n\n    <span class=\"token comment\">\" if `asdf which elixir` does not return in an error, let's keep going</span>\n    <span class=\"token keyword\">if</span> <span class=\"token operator\">!</span>v<span class=\"token punctuation\">:</span>shell_error\n\n      <span class=\"token comment\">\" let's install elixir_ls into the .../1.10.0-otp-22/elixir_ls folder</span>\n      <span class=\"token keyword\">let</span> g<span class=\"token punctuation\">:</span>ElixirLS<span class=\"token operator\">.</span><span class=\"token builtin\">path</span> <span class=\"token operator\">=</span> g<span class=\"token punctuation\">:</span>ElixirLS<span class=\"token operator\">.</span>install_into <span class=\"token operator\">.</span> <span class=\"token string\">'elixir_ls'</span>\n\n      <span class=\"token comment\">\" We'll need to tell coc.nvim the new path to the language server</span>\n      <span class=\"token comment\">\" executable</span>\n      <span class=\"token keyword\">let</span> g<span class=\"token punctuation\">:</span>ElixirLS<span class=\"token operator\">.</span><span class=\"token builtin\">bin</span> <span class=\"token operator\">=</span> g<span class=\"token punctuation\">:</span>ElixirLS<span class=\"token operator\">.</span><span class=\"token builtin\">path</span> <span class=\"token operator\">.</span> <span class=\"token string\">\"/release/language_server.sh\"</span>\n\n      <span class=\"token comment\">\" Finally, if it is already present and executable, we send a batsignal</span>\n      <span class=\"token comment\">\" up to say we're installed.</span>\n      <span class=\"token keyword\">let</span> g<span class=\"token punctuation\">:</span>ElixirLS<span class=\"token operator\">.</span>installed <span class=\"token operator\">=</span> <span class=\"token function\">executable</span><span class=\"token punctuation\">(</span>g<span class=\"token punctuation\">:</span>ElixirLS<span class=\"token operator\">.</span><span class=\"token builtin\">bin</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">endif</span>\n  <span class=\"token keyword\">endif</span>\n\n  <span class=\"token keyword\">return</span> g<span class=\"token punctuation\">:</span>ElixirLS\n<span class=\"token keyword\">endfunction</span></code></pre>\n      </div>\n<p>The basic flow so far is:</p>\n<ol>\n<li>Use <code class=\"language-text\">asdf which elixir</code> to grab the current Elixir’s installed path.</li>\n<li>We’re going to install ElixirLS into the same path into a <code class=\"language-text\">./elixir_ls</code>\nfolder.</li>\n<li>Check if everything’s already installed.</li>\n<li>We should only have to get_info() once during a vim session, which keeps\nthings fast and only hits <code class=\"language-text\">asdf</code> once.</li>\n</ol>\n<p>Moving on!</p>\n<div class=\"gatsby-highlight\" data-language=\"vim\">\n      <pre class=\"language-vim\"><code class=\"language-vim\"><span class=\"token comment\">\" Define a function on the dictionary </span><span class=\"token string\">'install'</span> <span class=\"token builtin\">key</span>\n<span class=\"token keyword\">function</span> g<span class=\"token punctuation\">:</span>ElixirLS<span class=\"token operator\">.</span><span class=\"token function\">install</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> abort\n  <span class=\"token comment\">\" Let's get a copy of the global information we already know.</span>\n  <span class=\"token keyword\">let</span> me <span class=\"token operator\">=</span> <span class=\"token function\">copy</span><span class=\"token punctuation\">(</span>g<span class=\"token punctuation\">:</span>ElixirLS<span class=\"token operator\">.</span><span class=\"token function\">get_info</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token comment\">\" If ElixirLS is already installed... well... we are done so leave.</span>\n  <span class=\"token comment\">\" We're also going to check if it is in process of installing it since there</span>\n  <span class=\"token comment\">\" could be multiple calls to g:ElixirLS.install() before it's finished. In</span>\n  <span class=\"token comment\">\" Vimscript 0 is falsey, so later we'll want to set it to 1 which is truthy.</span>\n  <span class=\"token keyword\">if</span> me<span class=\"token operator\">.</span>installed <span class=\"token operator\">||</span> me<span class=\"token operator\">.</span>installing\n    <span class=\"token keyword\">return</span>\n  <span class=\"token keyword\">else</span>\n    <span class=\"token comment\">\" Mark that we are starting the installation process so we don't clobber</span>\n    <span class=\"token comment\">\" ourselves and get confusing errors.</span>\n    <span class=\"token keyword\">let</span> g<span class=\"token punctuation\">:</span>ElixirLS<span class=\"token operator\">.</span>installing <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n    <span class=\"token comment\">\" Let's send a message so we can debug later where we are in the process</span>\n    <span class=\"token keyword\">echom</span> <span class=\"token string\">\">>> Compiling ElixirLS\"</span>\n\n    <span class=\"token comment\">\" Ok, this is hack, but elixir-lsp/elixir-ls ships with their own asdf</span>\n    <span class=\"token comment\">\" .tool-versions file, which I don't want since I want to compile it with</span>\n    <span class=\"token comment\">\" the same version as my project. Let's find it. The `findfile()` function</span>\n    <span class=\"token comment\">\" will travel upwards until it finds the file and returns `.tool-versions`,</span>\n    <span class=\"token comment\">\" and then we expand the file to an absolute path with `fnamemodify`</span>\n    <span class=\"token keyword\">let</span> toolversion <span class=\"token operator\">=</span> <span class=\"token function\">fnamemodify</span><span class=\"token punctuation\">(</span><span class=\"token function\">findfile</span><span class=\"token punctuation\">(</span><span class=\"token string\">\".tool-versions\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\".;\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\":p\"</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\">\" Here is the Neovim-specific part. Vim8+ has async jobs so if you're not</span>\n    <span class=\"token comment\">\" using neovim, you can probably port this to whatever vim8 uses. We're</span>\n    <span class=\"token comment\">\" essentially going to clone ElixirLS and compile it with our project's</span>\n    <span class=\"token comment\">\" tool-versions file. If we didn't use jobstart() and instead used</span>\n    <span class=\"token comment\">\" system() or execute() it would be synchronous, and your vim would be</span>\n    <span class=\"token comment\">\" frozen for a good 20 seconds or so.</span>\n    <span class=\"token keyword\">call</span> <span class=\"token function\">jobstart</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"git clone https://github.com/elixir-lsp/elixir-ls.git '\"</span> <span class=\"token operator\">.</span> me<span class=\"token operator\">.</span><span class=\"token builtin\">path</span> <span class=\"token operator\">.</span> <span class=\"token string\">\"' &amp;&amp; \"</span><span class=\"token operator\">.</span>\n          \\ <span class=\"token string\">\"cd '\"</span> <span class=\"token operator\">.</span> me<span class=\"token operator\">.</span><span class=\"token builtin\">path</span> <span class=\"token operator\">.</span> <span class=\"token string\">\"' &amp;&amp; \"</span><span class=\"token operator\">.</span>\n          \\ <span class=\"token string\">\"rm .tool-versions &amp;&amp; \"</span><span class=\"token operator\">.</span>\n          \\ <span class=\"token string\">\"cp \"</span> <span class=\"token operator\">.</span> toolversion <span class=\"token operator\">.</span> <span class=\"token string\">\" .tool-versions &amp;&amp; \"</span><span class=\"token operator\">.</span>\n          \\ <span class=\"token string\">\"mix local.hex --force --if-missing &amp;&amp; \"</span><span class=\"token operator\">.</span>\n          \\ <span class=\"token string\">\"mix local.rebar --force &amp;&amp; \"</span><span class=\"token operator\">.</span>\n          \\ <span class=\"token string\">\"mix deps.get &amp;&amp; \"</span><span class=\"token operator\">.</span>\n          \\ <span class=\"token string\">\"mix compile &amp;&amp; \"</span><span class=\"token operator\">.</span>\n          \\ <span class=\"token string\">\"mix elixir_ls.release\"</span><span class=\"token punctuation\">,</span> me<span class=\"token punctuation\">)</span>\n      <span class=\"token comment\">\" Neovim supplies jobstart() which accepts several callbacks:</span>\n      <span class=\"token comment\">\"   - on_stdout</span>\n      <span class=\"token comment\">\"   - on_stderr</span>\n      <span class=\"token comment\">\"   - on_exit</span>\n\n      <span class=\"token comment\">\" These will be defined shortly on the g:ElixirLS dictionary we're</span>\n      <span class=\"token comment\">\" creating.</span>\n      <span class=\"token comment\">\" See :h job-control for more information.</span>\n\n  <span class=\"token keyword\">endif</span>\n\n  <span class=\"token comment\">\" Update coc-elixir's configuration to point to our ElixirLS executable</span>\n  <span class=\"token comment\">\" This doesn't take into effect yet though.</span>\n  <span class=\"token keyword\">call</span> coc#<span class=\"token function\">config</span><span class=\"token punctuation\">(</span><span class=\"token string\">'elixir.pathToElixirLS'</span><span class=\"token punctuation\">,</span> me<span class=\"token operator\">.</span><span class=\"token builtin\">bin</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">endfunction</span>\n\n<span class=\"token comment\">\" Whenever we enter into an Elixir file, we should try to install ElixirLS. If</span>\n<span class=\"token comment\">\" you know of a better way to manage this lifecycle, let me know. I tried to</span>\n<span class=\"token comment\">\" make it performant with early returns and only running once, but I feel like</span>\n<span class=\"token comment\">\" there might be a better hook.</span>\naugroup cocEx\n  <span class=\"token builtin\">autocmd</span> FileType elixir<span class=\"token punctuation\">,</span>eelixir <span class=\"token keyword\">call</span> g<span class=\"token punctuation\">:</span>ElixirLS<span class=\"token operator\">.</span><span class=\"token function\">install</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\naugroup END</code></pre>\n      </div>\n<p>The basic flow so far is:</p>\n<ol>\n<li>Use <code class=\"language-text\">asdf which elixir</code> to grab the current Elixir’s installed path.</li>\n<li>We’re going to install ElixirLS into the same path into a <code class=\"language-text\">./elixir_ls</code>\nfolder.</li>\n<li>Check if everything’s already installed.</li>\n<li>We should only have to <code class=\"language-text\">get_info()</code> once during a vim session, which keeps\nthings fast and only hits asdf once.</li>\n<li>When we enter an Elixir file, run <code class=\"language-text\">install()</code>. If it’s already installed,\nthen return early to keep things fast.</li>\n<li><code class=\"language-text\">git clone</code> the ElixirLS into the specific Elixir version installation\nfolder</li>\n<li>Copy our own <code class=\"language-text\">.tool-versions</code> file so it compiles with the right version</li>\n<li>Compile it and make the ElixirLS release so we can use it in coc.nvim</li>\n</ol>\n<p>Moving on! Only the callbacks now…</p>\n<div class=\"gatsby-highlight\" data-language=\"vim\">\n      <pre class=\"language-vim\"><code class=\"language-vim\"><span class=\"token comment\">\" Define a function on the dictionary `on_stderr` key</span>\n<span class=\"token keyword\">function</span> g<span class=\"token punctuation\">:</span>ElixirLS<span class=\"token operator\">.</span><span class=\"token function\">on_stderr</span><span class=\"token punctuation\">(</span>_job_id<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">,</span> event<span class=\"token punctuation\">)</span> abort\n  <span class=\"token comment\">\" All we</span><span class=\"token string\">'re going to do is add the errors into vim'</span>s messages<span class=\"token operator\">.</span> Neovim sends\n  <span class=\"token comment\">\" these as lists, so we'll join them since we can only echo string messages</span>\n  <span class=\"token keyword\">echom</span> <span class=\"token function\">join</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">:</span>data<span class=\"token punctuation\">,</span> <span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">endfunction</span>\n\n<span class=\"token comment\">\" Define a function on the dictionary `on_exit` key</span>\n<span class=\"token keyword\">function</span> g<span class=\"token punctuation\">:</span>ElixirLS<span class=\"token operator\">.</span><span class=\"token function\">on_exit</span><span class=\"token punctuation\">(</span>_job_id<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">,</span> event<span class=\"token punctuation\">)</span> abort\n  <span class=\"token comment\">\" if the exit code 0, meaning successful, then we've done something right!</span>\n  <span class=\"token keyword\">if</span> a<span class=\"token punctuation\">:</span>data <span class=\"token operator\">==</span> <span class=\"token number\">0</span>\n    <span class=\"token comment\">\" Mark ourselves as installed so we don't do this process again</span>\n    <span class=\"token keyword\">let</span> g<span class=\"token punctuation\">:</span>ElixirLS<span class=\"token operator\">.</span>installed <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n    <span class=\"token keyword\">echom</span> <span class=\"token string\">\">>> Finished compiling ElixirLS\"</span>\n\n    <span class=\"token comment\">\" Restart coc.nvim so it can use the newly-compiled ElixirLS executable</span>\n    execute <span class=\"token string\">\"CocRestart\"</span>\n  <span class=\"token keyword\">else</span>\n    <span class=\"token comment\">\" Unmark that we're installing, so if we wanted to try again, we could.</span>\n    <span class=\"token keyword\">let</span> g<span class=\"token punctuation\">:</span>ElixirLS<span class=\"token operator\">.</span>installing <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n    <span class=\"token keyword\">echom</span> <span class=\"token string\">\">>> There was a problem installing ElixirLS. Check :messages\"</span>\n  <span class=\"token keyword\">endif</span>\n<span class=\"token keyword\">endfunction</span></code></pre>\n      </div>\n<p>And there you have it — a self-installing ElixirLS with neovim and coc.nvim.</p>","frontmatter":{"title":"Better Elixir LS with Neovim, coc.nvim, and asdf","date":"February 01, 2020","tags":["elixir","neovim","asdf"],"originalUrl":null}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/blog/better-vim-elixir-ls/","previous":{"fields":{"slug":"/blog/ecto_changeset_tips/"},"frontmatter":{"title":"Ecto Tips: UUID Boilerplate, Docs, and Composing Changesets","tags":["elixir","ecto"],"originalUrl":null,"excerpt":"There are some helpful techniques you can employ to help you and your\ncoworkers when writing long changeset functions. It's hard to remember what's\nrequired, optional, and defaulted. DB-generated UUIDs. And composing\nchangesets.\n"}},"next":null}}