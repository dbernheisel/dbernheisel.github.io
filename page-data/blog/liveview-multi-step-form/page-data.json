{"componentChunkName":"component---src-templates-blog-post-js","path":"/blog/liveview-multi-step-form/","result":{"data":{"site":{"siteMetadata":{"title":"David Bernheisel","author":"David Bernheisel"}},"markdownRemark":{"id":"4bdcefd0-96e5-5636-b1b0-b0a60a876a06","excerpt":"Phoenix LiveView has been a dream to work with so far. I really recommend\nlooking at it for your next web application. Building Tailwind…","timeToRead":16,"html":"<p><a href=\"https://github.com/phoenixframework/phoenix_live_view\">Phoenix LiveView</a> has been a dream to work with so far. I <em>really</em> recommend\nlooking at it for your next web application. Building Tailwind, Elixir, and\nPhoenix LiveView with some Vue sprinklings has been the most enjoyable tech\nstack I’ve used in a long while.</p>\n<p>One of the benefits I love about LiveView is that it enables me to consolidate\nsome of common front-end logic into the backend, where the source of truth\nbelongs. A great example is a form, especially long-running or multi-step forms.</p>\n<p>Let me show you what I mean.</p>\n<p>\n\t\t<video\n\t\t\tsrc=/long-form-demo.mp4\n\t\t\twidth=\"auto\"\n\t\t\theight=\"auto\"\n\t\t\tpreload=\"auto\"\n\t\t\tmuted=\"true\"\n\t\t\ttitle=\"Demo of Multi-step form\"\n\t\t\tautoplay\n\t\t\tplaysinline\n\t\t\tcontrols\n\t\t\tloop\n\t\t></video>\n\t</p>\n<p>This is accomplished without any AJAX calls, no SPAs, and no page reloads.</p>\n<p>I coded this form twice. Let me share with you my journey and some techniques I\nused to help organize code.</p>\n<h2>The Ugly Way (First pass)</h2>\n<p>I coded it all with a single LiveView.</p>\n<p>It become quite ugly.</p>\n<p>I was still trying to figure out what I wanted on the form and still learning\nLiveView generally. Eventually, this LiveView became an ugly 1000+-line horror\nshow that managed state in multiple places.</p>\n<p>It was a single <code>&#x3C;form></code> that handled all the fields for the database-backed\nrecord, and each step was hidden until you hit “next”, so every change in the\nform sends the entire form values.</p>\n<p>The EEX was something like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"erb\"><pre class=\"language-erb\"><code class=\"language-erb\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>container<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token erb language-erb\"><span class=\"token delimiter punctuation\">&lt;%=</span> f <span class=\"token operator\">=</span> form_for<span class=\"token punctuation\">(</span><span class=\"token variable\">@changeset</span><span class=\"token punctuation\">,</span> phx_validate<span class=\"token punctuation\">:</span> <span class=\"token symbol\">:validate</span><span class=\"token punctuation\">,</span> phx_save<span class=\"token punctuation\">:</span> <span class=\"token symbol\">:save</span> <span class=\"token delimiter punctuation\">%></span></span>\n\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span><span class=\"token erb language-erb\"><span class=\"token delimiter punctuation\">&lt;%=</span> <span class=\"token keyword\">unless</span> <span class=\"token variable\">@progress</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">==</span> <span class=\"token string\">\"who\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">do</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"hidden\"</span> <span class=\"token delimiter punctuation\">%></span></span><span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token erb language-erb\"><span class=\"token delimiter punctuation\">&lt;%</span><span class=\"token comment\"># my Who-related form inputs </span><span class=\"token delimiter punctuation\">%></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span><span class=\"token erb language-erb\"><span class=\"token delimiter punctuation\">&lt;%=</span> <span class=\"token keyword\">unless</span> <span class=\"token variable\">@progress</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">==</span> <span class=\"token string\">\"what\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">do</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"hidden\"</span> <span class=\"token delimiter punctuation\">%></span></span><span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token erb language-erb\"><span class=\"token delimiter punctuation\">&lt;%</span><span class=\"token comment\"># my What-related form inputs </span><span class=\"token delimiter punctuation\">%></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span><span class=\"token erb language-erb\"><span class=\"token delimiter punctuation\">&lt;%=</span> <span class=\"token keyword\">unless</span> <span class=\"token variable\">@progress</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">==</span> <span class=\"token string\">\"when\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">do</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"hidden\"</span> <span class=\"token delimiter punctuation\">%></span></span><span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token erb language-erb\"><span class=\"token delimiter punctuation\">&lt;%</span><span class=\"token comment\"># my When-related form inputs </span><span class=\"token delimiter punctuation\">%></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>form</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>I found that this approach has several drawbacks:</p>\n<ul>\n<li>When the user hits “enter”, the form will try to submit. If you’re on the\nfirst step, you probably don’t want that to submitted yet until they’re\non the last step. You can override this with some JavaScript, but this\nnon-standard behavior made things more complicated than it should be. I’ll\nneed the JavaScript to know which step is last, and track which step it’s\ncurrently on. Ugh… I did this and it wasn’t great. I wanted to delete\nmyself.</li>\n<li>When the user is on a different step, you still need to manage all the “state”\nof other steps. This is a lot of “weight” to worry about and ensure\n<em>doesn’t</em> change.</li>\n<li>As soon as the user interacts with the form on the first step, validations\nwill occur for the entire form, <strong>even for those inputs on hidden steps</strong>.\nThis means errors will already be populated before the user even interacted\nwith them.</li>\n<li>Testing the big form was difficult. The tools were great— I just\nbad-developered and didn’t break it down well.</li>\n</ul>\n<p>Generally, I found it harder to “reason about”, especially when I have computed\nfields and help text based on user input.</p>\n<p>For example, I need to persist two DateTimes with timezones, but I don’t want to\npresent that to the user as <code>datetime_select</code>s and have them select a timezone\nfrom a drop-down.</p>\n<p>Instead I want a date picker, and then separately collect the times and merge it\nwith the user’s detected timezone (this will later be improved to allow them to\nselect a timezone and prefer a user’s set timezone while registering). Something\nlike this:</p>\n<div class=\"gatsby-highlight\" data-language=\"erb\"><pre class=\"language-erb\"><code class=\"language-erb\"><span class=\"token erb language-erb\"><span class=\"token delimiter punctuation\">&lt;%=</span> date_select f<span class=\"token punctuation\">,</span> <span class=\"token symbol\">:date</span> <span class=\"token delimiter punctuation\">%></span></span>\n<span class=\"token erb language-erb\"><span class=\"token delimiter punctuation\">&lt;%=</span> time_input f<span class=\"token punctuation\">,</span> <span class=\"token symbol\">:start_time</span> <span class=\"token delimiter punctuation\">%></span></span>\n<span class=\"token erb language-erb\"><span class=\"token delimiter punctuation\">&lt;%=</span> time_input f<span class=\"token punctuation\">,</span> <span class=\"token symbol\">:end_time</span> <span class=\"token delimiter punctuation\">%></span></span>\nYour duration is <span class=\"token erb language-erb\"><span class=\"token delimiter punctuation\">&lt;%=</span> <span class=\"token variable\">@duration</span> <span class=\"token delimiter punctuation\">%></span></span></code></pre></div>\n<p>so in my params, I would receive something like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"elixir\"><pre class=\"language-elixir\"><code class=\"language-elixir\"><span class=\"token keyword\">def</span> handle_event<span class=\"token punctuation\">(</span><span class=\"token string\">\"validate\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">%</span><span class=\"token punctuation\">{</span><span class=\"token string\">\"myform\"</span> <span class=\"token operator\">=></span> params<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> socket<span class=\"token punctuation\">)</span> <span class=\"token keyword\">do</span>\n  IO<span class=\"token punctuation\">.</span>inspect params<span class=\"token punctuation\">,</span> <span class=\"token attr-name\">label:</span> <span class=\"token string\">\"PARAMS\"</span>\n  <span class=\"token punctuation\">{</span><span class=\"token atom symbol\">:noreply</span><span class=\"token punctuation\">,</span> socket<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">end</span>\n\n<span class=\"token comment\">#=> PARAMS: %{</span>\n<span class=\"token comment\">#  \"date\" => %{\"year\" => 2020, \"month\" => 1, \"day\" => 1},</span>\n<span class=\"token comment\">#  \"start_time\" => \"08:00\",</span>\n<span class=\"token comment\"># \" end_time\" => \"10:00\"</span>\n<span class=\"token comment\"># }</span></code></pre></div>\n<p>There’s a complicated mechanism in the time pickers that made it harder. I\nneeded to detect what changed:</p>\n<ol>\n<li>Was it the <code>end_time</code>? Then let’s extend the duration as well and accept the\nnew <code>end_time</code>.</li>\n<li>Was it the <code>start_time</code>? Then let’s back the <code>end_time</code> up to the same\nduration away from the <code>start_time</code>.</li>\n<li>At some point, if we accept user input for <code>duration</code>, then we we’d want to\nextend the <code>end_time</code> with the new duration.</li>\n</ol>\n<p>Now I have some fields, I need to compute them into my event struct somehow.\nThis is how it needs to end up:</p>\n<div class=\"gatsby-highlight\" data-language=\"elixir\"><pre class=\"language-elixir\"><code class=\"language-elixir\">record<span class=\"token punctuation\">.</span>start_at_tz <span class=\"token comment\">#=> \"America/New_York\"</span>\nrecord<span class=\"token punctuation\">.</span>start_at_wall <span class=\"token comment\">#=> ~N[2020-01-01T08:00:00]</span>\nrecord<span class=\"token punctuation\">.</span>start_at_utc <span class=\"token comment\">#=> ~U[2020-01-01T13:00:00Z]</span>\n\nrecord<span class=\"token punctuation\">.</span>end_at_tz <span class=\"token comment\">#=> \"America/New_York\"</span>\nrecord<span class=\"token punctuation\">.</span>end_at_wall <span class=\"token comment\">#=> ~N[2020-01-01T10:00:00]</span>\nrecord<span class=\"token punctuation\">.</span>end_at_utc <span class=\"token comment\">#=> ~U[2020-01-01T15:00:00Z]</span>\n\nrecord<span class=\"token punctuation\">.</span>duration <span class=\"token comment\">#=> 7200 # seconds which is 2 hours</span></code></pre></div>\n<p>This is going to be a lot of work!</p>\n<p>Let’s not have the giant form all be in one template, or even partials; let’s\nsplit the form up into components. These components will let me manage these\ncomputed fields easier, as well as solve some other UX issues mentioned above.</p>\n<h2>Let’s break it down:</h2>\n<ul>\n<li><a href=\"#formprogress\">Manage form progress in the parent LiveView.</a></li>\n<li><a href=\"#extract\">Split the multi-step form into LiveComponents. At least one for each visible step.</a></li>\n<li><a href=\"#clientside\">Send input supplied client-side via <code>phx-hook</code>.</a></li>\n<li><a href=\"#clientinput\">Handle input changes from the users from the component</a></li>\n<li><a href=\"#subformsubmission\">Handle stepped-form submission</a></li>\n<li><a href=\"#formsubmission\">Handle final form submission.</a></li>\n</ul>\n<p><a aria-hidden=\"true\" name=\"formprogress\"></a></p>\n<h2>Managing the form progress</h2>\n<p>I managed the form step progress by defining a <code>%Step{}</code> and then writing the\norder out in the liveview as a module attribute.</p>\n<div class=\"gatsby-highlight\" data-language=\"elixir\"><pre class=\"language-elixir\"><code class=\"language-elixir\"><span class=\"token keyword\">defmodule</span> MyAppWeb<span class=\"token punctuation\">.</span>EventLive<span class=\"token punctuation\">.</span>Step <span class=\"token keyword\">do</span>\n  <span class=\"token attribute variable\">@moduledoc</span> <span class=\"token string\">\"Describe a step in the multi-step form and where it can go.\"</span>\n  <span class=\"token keyword\">defstruct</span> <span class=\"token punctuation\">[</span><span class=\"token atom symbol\">:name</span><span class=\"token punctuation\">,</span> <span class=\"token atom symbol\">:prev</span><span class=\"token punctuation\">,</span> <span class=\"token atom symbol\">:next</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">end</span>\n\n<span class=\"token comment\"># in the liveview</span>\n\n<span class=\"token keyword\">defmodule</span> MyAppWeb<span class=\"token punctuation\">.</span>EventLive<span class=\"token punctuation\">.</span>New <span class=\"token keyword\">do</span>\n  <span class=\"token comment\"># ...snip...</span>\n\n  <span class=\"token attribute variable\">@steps</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">%</span>Step<span class=\"token punctuation\">{</span><span class=\"token attr-name\">name:</span> <span class=\"token string\">\"who\"</span><span class=\"token punctuation\">,</span> <span class=\"token attr-name\">prev:</span> <span class=\"token boolean\">nil</span><span class=\"token punctuation\">,</span> <span class=\"token attr-name\">next:</span> <span class=\"token string\">\"what\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">%</span>Step<span class=\"token punctuation\">{</span><span class=\"token attr-name\">name:</span> <span class=\"token string\">\"what\"</span><span class=\"token punctuation\">,</span> <span class=\"token attr-name\">prev:</span> <span class=\"token string\">\"who\"</span><span class=\"token punctuation\">,</span> <span class=\"token attr-name\">next:</span> <span class=\"token string\">\"when\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">%</span>Step<span class=\"token punctuation\">{</span><span class=\"token attr-name\">name:</span> <span class=\"token string\">\"when\"</span><span class=\"token punctuation\">,</span> <span class=\"token attr-name\">prev:</span> <span class=\"token string\">\"what\"</span><span class=\"token punctuation\">,</span> <span class=\"token attr-name\">next:</span> <span class=\"token string\">\"where\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">%</span>Step<span class=\"token punctuation\">{</span><span class=\"token attr-name\">name:</span> <span class=\"token string\">\"where\"</span><span class=\"token punctuation\">,</span> <span class=\"token attr-name\">prev:</span> <span class=\"token string\">\"when\"</span><span class=\"token punctuation\">,</span> <span class=\"token attr-name\">next:</span> <span class=\"token boolean\">nil</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">]</span>\n\n  <span class=\"token keyword\">def</span> mount<span class=\"token punctuation\">(</span>_params<span class=\"token punctuation\">,</span> session<span class=\"token punctuation\">,</span> socket<span class=\"token punctuation\">)</span> <span class=\"token keyword\">do</span>\n    socket <span class=\"token operator\">=</span> authenticate<span class=\"token punctuation\">(</span>socket<span class=\"token punctuation\">,</span> session<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token atom symbol\">:with_organizations</span><span class=\"token punctuation\">,</span> <span class=\"token atom symbol\">:with_profile</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    first_step <span class=\"token operator\">=</span> List<span class=\"token punctuation\">.</span>first<span class=\"token punctuation\">(</span><span class=\"token attribute variable\">@steps</span><span class=\"token punctuation\">)</span>\n    event <span class=\"token operator\">=</span> <span class=\"token punctuation\">%</span>Event<span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n    params <span class=\"token operator\">=</span> <span class=\"token punctuation\">%</span><span class=\"token punctuation\">{</span><span class=\"token attr-name\">creator_id:</span> socket<span class=\"token punctuation\">.</span>assigns<span class=\"token punctuation\">.</span>current_user<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">}</span>\n\n    <span class=\"token punctuation\">{</span><span class=\"token atom symbol\">:ok</span><span class=\"token punctuation\">,</span>\n      socket\n      <span class=\"token operator\">|></span> assign<span class=\"token punctuation\">(</span><span class=\"token atom symbol\">:event</span><span class=\"token punctuation\">,</span> event<span class=\"token punctuation\">)</span>\n      <span class=\"token operator\">|></span> assign<span class=\"token punctuation\">(</span><span class=\"token atom symbol\">:params</span><span class=\"token punctuation\">,</span> params<span class=\"token punctuation\">)</span>\n      <span class=\"token operator\">|></span> assign<span class=\"token punctuation\">(</span><span class=\"token atom symbol\">:changeset</span><span class=\"token punctuation\">,</span> Event<span class=\"token punctuation\">.</span>changeset<span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">,</span> params<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n      <span class=\"token operator\">|></span> assign<span class=\"token punctuation\">(</span><span class=\"token atom symbol\">:progress</span><span class=\"token punctuation\">,</span> first_step<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">end</span>\n\n  <span class=\"token comment\"># ...snip...</span>\n<span class=\"token keyword\">end</span></code></pre></div>\n<p>When the underlying live components are finished, they’ll send a message to the\nparent LiveView which will re-assign <code>:progress</code>; the conditionals in the\ntemplate will apply/remove the “hidden” class for the next appropriate step, or\nprevious step. You’ll see that as you read on.</p>\n<p>Let’s chop up the form.</p>\n<p><a aria-hidden=\"true\" name=\"extract\"></a></p>\n<h2>Extract to LiveComponents</h2>\n<p>All this ugly-but-necessary logic should live in “form objects”. In Ecto-land\nthese can be managed with embedded schemas. These form objects are responsible\nfor the state of their own fields, and compute their own values without\naffecting other steps’ values. The domain becomes much clearer.</p>\n<p>When the form is submitted, it will trigger the “save” event from the\nLiveComponent. The LiveComponent can then pass the completed params up to its\nparent LiveView if the changeset is valid. The parent LiveView can track these\nparams separately, sitting on it until final save, persisted as a draft, or\nwhatever you need.</p>\n<p>This has some benefits:</p>\n<ul>\n<li>form submission (hitting enter) no longer needs to override default behavior.</li>\n<li>isolates testing to it’s own form and LiveComponent.</li>\n<li>your form’s “domain” has clearer boundaries.</li>\n<li>user interaction and form validation makes more sense; only the visible form\nis “tainted” when the user changes it (opposed to it being tainted before\nthe user even sees it).</li>\n</ul>\n<p>The multi-step form now looks like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"erb\"><pre class=\"language-erb\"><code class=\"language-erb\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>container<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span><span class=\"token erb language-erb\"><span class=\"token delimiter punctuation\">&lt;%=</span> <span class=\"token keyword\">unless</span> <span class=\"token variable\">@progress</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">==</span> <span class=\"token string\">\"who\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">do</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"hidden\"</span> <span class=\"token delimiter punctuation\">%></span></span><span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token erb language-erb\"><span class=\"token delimiter punctuation\">&lt;%=</span> live_component <span class=\"token variable\">@socket</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">WhoComponent</span><span class=\"token punctuation\">,</span>\n      id<span class=\"token punctuation\">:</span> <span class=\"token string\">\"who\"</span><span class=\"token punctuation\">,</span>\n      event<span class=\"token punctuation\">:</span> <span class=\"token variable\">@event</span><span class=\"token punctuation\">,</span>\n      current_user<span class=\"token punctuation\">:</span> <span class=\"token variable\">@current_user</span>\n    <span class=\"token delimiter punctuation\">%></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span><span class=\"token erb language-erb\"><span class=\"token delimiter punctuation\">&lt;%=</span> <span class=\"token keyword\">unless</span> <span class=\"token variable\">@progress</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">==</span> <span class=\"token string\">\"what\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">do</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"hidden\"</span> <span class=\"token delimiter punctuation\">%></span></span><span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token erb language-erb\"><span class=\"token delimiter punctuation\">&lt;%=</span> live_component <span class=\"token variable\">@socket</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">WhatComponent</span><span class=\"token punctuation\">,</span> id<span class=\"token punctuation\">:</span> <span class=\"token string\">\"what\"</span><span class=\"token punctuation\">,</span> event<span class=\"token punctuation\">:</span> <span class=\"token variable\">@event</span> <span class=\"token delimiter punctuation\">%></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span><span class=\"token erb language-erb\"><span class=\"token delimiter punctuation\">&lt;%=</span> <span class=\"token keyword\">unless</span> <span class=\"token variable\">@progress</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">==</span> <span class=\"token string\">\"when\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">do</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"hidden\"</span> <span class=\"token delimiter punctuation\">%></span></span><span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token erb language-erb\"><span class=\"token delimiter punctuation\">&lt;%=</span> live_component <span class=\"token variable\">@socket</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">WhenComponent</span><span class=\"token punctuation\">,</span>\n      id<span class=\"token punctuation\">:</span> <span class=\"token string\">\"when\"</span><span class=\"token punctuation\">,</span>\n      event<span class=\"token punctuation\">:</span> <span class=\"token variable\">@event</span><span class=\"token punctuation\">,</span>\n      current_user<span class=\"token punctuation\">:</span> <span class=\"token variable\">@current_user</span>\n    <span class=\"token delimiter punctuation\">%></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span><span class=\"token erb language-erb\"><span class=\"token delimiter punctuation\">&lt;%=</span> <span class=\"token keyword\">unless</span> <span class=\"token variable\">@progress</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">==</span> <span class=\"token string\">\"where\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">do</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"hidden\"</span> <span class=\"token delimiter punctuation\">%></span></span><span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token erb language-erb\"><span class=\"token delimiter punctuation\">&lt;%=</span> live_component <span class=\"token variable\">@socket</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">WhereComponent</span><span class=\"token punctuation\">,</span>\n      id<span class=\"token punctuation\">:</span> <span class=\"token string\">\"where\"</span><span class=\"token punctuation\">,</span>\n      submit_text<span class=\"token punctuation\">:</span> t<span class=\"token punctuation\">(</span><span class=\"token string\">\"Create\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      event<span class=\"token punctuation\">:</span> <span class=\"token variable\">@event</span>\n    <span class=\"token delimiter punctuation\">%></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>Let’s focus on the <code>WhenComponent</code>.</p>\n<p>Here’s the big idea:</p>\n<ul>\n<li>Inside of the WhenComponent, we need our <code>embedded_schema</code> to represent and\nstore the fields we care about on the step.</li>\n<li>When loading/updating the component itself, we’re going to initialize the\nchangeset with the fields from the record.</li>\n<li>When handling validation events, we’re going to throw the params into the\nchangeset and assign the new changeset back.</li>\n<li>The computed values will be updated from the changeset and/or pulled out of\nthe changeset and assigned into the socket.</li>\n<li>When handling the save event, we’re going to ensure the changeset is valid,\nand if so, tell the parent LiveView that we’re good to proceed. We’ll send\nthe struct up to the parent LiveView. This struct will contain the computed\nfields so it should be easier for the parent to stitch these steps’ params\ntogether into the final changeset that’s actually persisted.</li>\n</ul>\n<p>Again, the flow should look like this:</p>\n<ol>\n<li>On mounting, take the Event and pluck the relevant fields out of it to create\na WhenComponent form backed by an <code>embedded_schema</code>.</li>\n<li>When the user is on the step, take the changes as they come and let the user\niterate on the form until it’s valid.</li>\n<li>When the changeset is valid and the user tries to submit it, pass the final\nstruct up to the parent LiveView. The parent LiveView can then switch to the\nnext step.</li>\n</ol>\n<p>Here is the component code:</p>\n<div class=\"gatsby-highlight\" data-language=\"elixir\"><pre class=\"language-elixir\"><code class=\"language-elixir\"><span class=\"token keyword\">defmodule</span> MyAppWeb<span class=\"token punctuation\">.</span>EventLive<span class=\"token punctuation\">.</span>WhenComponent <span class=\"token keyword\">do</span>\n  <span class=\"token keyword\">use</span> MyAppWeb<span class=\"token punctuation\">,</span> <span class=\"token atom symbol\">:live_component</span>\n  <span class=\"token keyword\">alias</span> Ecto<span class=\"token punctuation\">.</span>Changeset\n\n  <span class=\"token attribute variable\">@primary_key</span> <span class=\"token boolean\">false</span>\n  embedded_schema <span class=\"token keyword\">do</span>\n    field <span class=\"token atom symbol\">:timezone</span><span class=\"token punctuation\">,</span> <span class=\"token atom symbol\">:string</span>\n    field <span class=\"token atom symbol\">:start_at_date</span><span class=\"token punctuation\">,</span> <span class=\"token atom symbol\">:date</span>\n    field <span class=\"token atom symbol\">:start_at_time</span><span class=\"token punctuation\">,</span> <span class=\"token atom symbol\">:time</span>\n    field <span class=\"token atom symbol\">:start_at</span><span class=\"token punctuation\">,</span> <span class=\"token atom symbol\">:utc_datetime</span>  <span class=\"token comment\"># Not on the form. This is computed</span>\n\n    field <span class=\"token atom symbol\">:end_at_date</span><span class=\"token punctuation\">,</span> <span class=\"token atom symbol\">:date</span>\n    field <span class=\"token atom symbol\">:end_at_time</span><span class=\"token punctuation\">,</span> <span class=\"token atom symbol\">:time</span>\n    field <span class=\"token atom symbol\">:end_at</span><span class=\"token punctuation\">,</span> <span class=\"token atom symbol\">:utc_datetime</span>  <span class=\"token comment\"># Not on the form. This is computed</span>\n\n    field <span class=\"token atom symbol\">:duration</span><span class=\"token punctuation\">,</span> <span class=\"token atom symbol\">:integer</span>  <span class=\"token comment\"># Not on the form. This is computed and displayed</span>\n  <span class=\"token keyword\">end</span>\n\n  <span class=\"token attribute variable\">@impl</span> Phoenix<span class=\"token punctuation\">.</span>LiveComponent\n  <span class=\"token keyword\">def</span> update<span class=\"token punctuation\">(</span>assigns<span class=\"token punctuation\">,</span> socket<span class=\"token punctuation\">)</span> <span class=\"token keyword\">do</span>\n    whenevent <span class=\"token operator\">=</span> from_event<span class=\"token punctuation\">(</span>assigns<span class=\"token punctuation\">.</span>event<span class=\"token punctuation\">,</span> assigns<span class=\"token punctuation\">.</span>current_user<span class=\"token punctuation\">.</span>profile<span class=\"token punctuation\">.</span>timezone<span class=\"token punctuation\">)</span>\n    params <span class=\"token operator\">=</span> <span class=\"token punctuation\">%</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n    changeset <span class=\"token operator\">=</span> changeset<span class=\"token punctuation\">(</span>whenevent<span class=\"token punctuation\">,</span> params<span class=\"token punctuation\">)</span>\n\n    <span class=\"token punctuation\">{</span><span class=\"token atom symbol\">:ok</span><span class=\"token punctuation\">,</span>\n      socket\n      <span class=\"token operator\">|></span> assign<span class=\"token punctuation\">(</span>assigns<span class=\"token punctuation\">)</span>\n      <span class=\"token operator\">|></span> assign<span class=\"token punctuation\">(</span><span class=\"token atom symbol\">:when</span><span class=\"token punctuation\">,</span> whenevent<span class=\"token punctuation\">)</span>\n      <span class=\"token operator\">|></span> assign<span class=\"token punctuation\">(</span><span class=\"token atom symbol\">:when_changeset</span><span class=\"token punctuation\">,</span> changeset<span class=\"token punctuation\">)</span>\n      <span class=\"token operator\">|></span> assign_computed<span class=\"token punctuation\">(</span>changeset<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">end</span>\n\n  <span class=\"token attribute variable\">@impl</span> Phoenix<span class=\"token punctuation\">.</span>LiveComponent\n  <span class=\"token keyword\">def</span> handle_event<span class=\"token punctuation\">(</span><span class=\"token string\">\"validate\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">%</span><span class=\"token punctuation\">{</span><span class=\"token string\">\"when_component\"</span> <span class=\"token operator\">=></span> params<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> socket<span class=\"token punctuation\">)</span> <span class=\"token keyword\">do</span>\n    adjusted_params <span class=\"token operator\">=</span> adjust_time_params<span class=\"token punctuation\">(</span>params<span class=\"token punctuation\">,</span> socket<span class=\"token punctuation\">.</span>assigns<span class=\"token punctuation\">.</span>when_changeset<span class=\"token punctuation\">)</span>\n    changeset <span class=\"token operator\">=</span> changeset<span class=\"token punctuation\">(</span>socket<span class=\"token punctuation\">.</span>assigns<span class=\"token punctuation\">.</span><span class=\"token keyword\">when</span><span class=\"token punctuation\">,</span> adjusted_params<span class=\"token punctuation\">)</span>\n\n    <span class=\"token punctuation\">{</span><span class=\"token atom symbol\">:noreply</span><span class=\"token punctuation\">,</span>\n      socket\n      <span class=\"token operator\">|></span> assign<span class=\"token punctuation\">(</span><span class=\"token atom symbol\">:when_changeset</span><span class=\"token punctuation\">,</span> changeset<span class=\"token punctuation\">)</span>\n      <span class=\"token operator\">|></span> assign_computed<span class=\"token punctuation\">(</span>changeset<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">end</span>\n\n  <span class=\"token attribute variable\">@impl</span> Phoenix<span class=\"token punctuation\">.</span>LiveComponent\n  <span class=\"token keyword\">def</span> handle_event<span class=\"token punctuation\">(</span><span class=\"token string\">\"save\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">%</span><span class=\"token punctuation\">{</span><span class=\"token string\">\"when_component\"</span> <span class=\"token operator\">=></span> params<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> socket<span class=\"token punctuation\">)</span> <span class=\"token keyword\">do</span>\n    socket<span class=\"token punctuation\">.</span>assigns<span class=\"token punctuation\">.</span><span class=\"token keyword\">when</span>\n    <span class=\"token operator\">|></span> changeset<span class=\"token punctuation\">(</span>params<span class=\"token punctuation\">)</span>\n    <span class=\"token operator\">|></span> Changeset<span class=\"token punctuation\">.</span>apply_action<span class=\"token punctuation\">(</span><span class=\"token atom symbol\">:insert</span><span class=\"token punctuation\">)</span>\n    <span class=\"token operator\">|></span> <span class=\"token keyword\">case</span> <span class=\"token keyword\">do</span>\n      <span class=\"token punctuation\">{</span><span class=\"token atom symbol\">:ok</span><span class=\"token punctuation\">,</span> record<span class=\"token punctuation\">}</span> <span class=\"token operator\">-></span>\n        send<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token atom symbol\">:proceed</span><span class=\"token punctuation\">,</span> record<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span><span class=\"token atom symbol\">:noreply</span><span class=\"token punctuation\">,</span> socket<span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">{</span><span class=\"token atom symbol\">:error</span><span class=\"token punctuation\">,</span> changeset<span class=\"token punctuation\">}</span> <span class=\"token operator\">-></span>\n        <span class=\"token punctuation\">{</span><span class=\"token atom symbol\">:noreply</span><span class=\"token punctuation\">,</span>\n          socket\n          <span class=\"token operator\">|></span> assign<span class=\"token punctuation\">(</span><span class=\"token atom symbol\">:when_changeset</span><span class=\"token punctuation\">,</span> changeset<span class=\"token punctuation\">)</span>\n          <span class=\"token operator\">|></span> assign_computed<span class=\"token punctuation\">(</span>changeset<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">end</span>\n  <span class=\"token keyword\">end</span>\n\n  <span class=\"token attribute variable\">@impl</span> Phoenix<span class=\"token punctuation\">.</span>LiveComponent\n  <span class=\"token keyword\">def</span> handle_event<span class=\"token punctuation\">(</span><span class=\"token string\">\"timezone\"</span><span class=\"token punctuation\">,</span> detected_timezone<span class=\"token punctuation\">,</span> socket<span class=\"token punctuation\">)</span> <span class=\"token keyword\">do</span>\n    params <span class=\"token operator\">=</span> Map<span class=\"token punctuation\">.</span>put<span class=\"token punctuation\">(</span>socket<span class=\"token punctuation\">.</span>assigns<span class=\"token punctuation\">.</span>when_changeset<span class=\"token punctuation\">.</span>params<span class=\"token punctuation\">,</span> <span class=\"token string\">\"timezone\"</span><span class=\"token punctuation\">,</span> detected_timezone<span class=\"token punctuation\">)</span>\n    changeset <span class=\"token operator\">=</span> changeset<span class=\"token punctuation\">(</span>socket<span class=\"token punctuation\">.</span>assigns<span class=\"token punctuation\">.</span>when_changeset<span class=\"token punctuation\">,</span> params<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span><span class=\"token atom symbol\">:noreply</span><span class=\"token punctuation\">,</span>\n      socket\n      <span class=\"token operator\">|></span> assign<span class=\"token punctuation\">(</span><span class=\"token atom symbol\">:when_changeset</span><span class=\"token punctuation\">,</span> changeset<span class=\"token punctuation\">)</span>\n      <span class=\"token operator\">|></span> assign_computed<span class=\"token punctuation\">(</span>changeset<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">end</span>\n\n  <span class=\"token attribute variable\">@fields</span> <span class=\"token string\">~w[timezone start_at_date start_at_time end_at_date end_at_time duration]a</span>\n  <span class=\"token keyword\">def</span> changeset<span class=\"token punctuation\">(</span>whenevent<span class=\"token punctuation\">,</span> params<span class=\"token punctuation\">)</span> <span class=\"token keyword\">do</span>\n    whenevent\n    <span class=\"token operator\">|></span> Changeset<span class=\"token punctuation\">.</span>cast<span class=\"token punctuation\">(</span>params<span class=\"token punctuation\">,</span> <span class=\"token attribute variable\">@fields</span><span class=\"token punctuation\">)</span>\n    <span class=\"token operator\">|></span> put_stitched_datetime<span class=\"token punctuation\">(</span><span class=\"token atom symbol\">:start_at</span><span class=\"token punctuation\">)</span>\n    <span class=\"token operator\">|></span> put_stitched_datetime<span class=\"token punctuation\">(</span><span class=\"token atom symbol\">:end_at</span><span class=\"token punctuation\">)</span>\n    <span class=\"token operator\">|></span> ensure_duration<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">end</span>\n\n  <span class=\"token keyword\">defp</span> put_stitched_datetime<span class=\"token punctuation\">(</span>changeset<span class=\"token punctuation\">,</span> field<span class=\"token punctuation\">)</span> <span class=\"token keyword\">do</span>\n    timezone <span class=\"token operator\">=</span> Changeset<span class=\"token punctuation\">.</span>get_field<span class=\"token punctuation\">(</span>changeset<span class=\"token punctuation\">,</span> <span class=\"token atom symbol\">:timezone</span><span class=\"token punctuation\">)</span>\n    date <span class=\"token operator\">=</span> Changeset<span class=\"token punctuation\">.</span>get_field<span class=\"token punctuation\">(</span>changeset<span class=\"token punctuation\">,</span> :<span class=\"token string\">\"<span class=\"token interpolation\"><span class=\"token delimiter punctuation\">#{</span>field<span class=\"token delimiter punctuation\">}</span></span>_date\"</span><span class=\"token punctuation\">)</span>\n    time <span class=\"token operator\">=</span> Changeset<span class=\"token punctuation\">.</span>get_field<span class=\"token punctuation\">(</span>changeset<span class=\"token punctuation\">,</span> :<span class=\"token string\">\"<span class=\"token interpolation\"><span class=\"token delimiter punctuation\">#{</span>field<span class=\"token delimiter punctuation\">}</span></span>_time\"</span><span class=\"token punctuation\">,</span> ~T<span class=\"token punctuation\">[</span><span class=\"token number\">00</span><span class=\"token atom symbol\">:00</span><span class=\"token atom symbol\">:00</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span><span class=\"token atom symbol\">:ok</span><span class=\"token punctuation\">,</span> ndt<span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> NaiveDateTime<span class=\"token punctuation\">.</span>new<span class=\"token punctuation\">(</span>date<span class=\"token punctuation\">,</span> time<span class=\"token punctuation\">)</span>\n\n    Changeset<span class=\"token punctuation\">.</span>put_change<span class=\"token punctuation\">(</span>changeset<span class=\"token punctuation\">,</span> field<span class=\"token punctuation\">,</span> DateTime<span class=\"token punctuation\">.</span>from_naive!<span class=\"token punctuation\">(</span>ndt<span class=\"token punctuation\">,</span> timezone<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">end</span>\n\n  <span class=\"token keyword\">def</span> from_event<span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">,</span> profile_timezone<span class=\"token punctuation\">)</span> <span class=\"token keyword\">do</span>\n    <span class=\"token punctuation\">%</span>__MODULE__<span class=\"token punctuation\">{</span><span class=\"token attr-name\">timezone:</span> event<span class=\"token punctuation\">.</span>start_at_tz <span class=\"token operator\">||</span> profile_timezone <span class=\"token operator\">||</span> <span class=\"token string\">\"Etc/UTC\"</span><span class=\"token punctuation\">}</span>\n    <span class=\"token operator\">|></span> put_start_at_date<span class=\"token punctuation\">(</span>to_date<span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">.</span>start_at<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token operator\">|></span> put_start_at_time<span class=\"token punctuation\">(</span>to_time<span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">.</span>start_at<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token operator\">|></span> put_end_at_date<span class=\"token punctuation\">(</span>to_date<span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">.</span>end_at<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token operator\">|></span> put_end_at_time<span class=\"token punctuation\">(</span>to_time<span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">.</span>end_at<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token operator\">|></span> put_end_at<span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">.</span>end_at<span class=\"token punctuation\">)</span>\n    <span class=\"token operator\">|></span> put_start_at<span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">.</span>start_at<span class=\"token punctuation\">)</span>\n    <span class=\"token operator\">|></span> put_duration<span class=\"token punctuation\">(</span>calc_duration<span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">.</span>start_at<span class=\"token punctuation\">,</span> event<span class=\"token punctuation\">.</span>end_at<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">end</span>\n\n  <span class=\"token keyword\">defp</span> ensure_duration<span class=\"token punctuation\">(</span>changeset<span class=\"token punctuation\">)</span> <span class=\"token keyword\">do</span>\n    <span class=\"token keyword\">if</span> Changeset<span class=\"token punctuation\">.</span>get_field<span class=\"token punctuation\">(</span>changeset<span class=\"token punctuation\">,</span> <span class=\"token atom symbol\">:duration</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">do</span>\n      changeset\n    <span class=\"token keyword\">else</span>\n      start_at <span class=\"token operator\">=</span> Changeset<span class=\"token punctuation\">.</span>get_field<span class=\"token punctuation\">(</span>changeset<span class=\"token punctuation\">,</span> <span class=\"token atom symbol\">:start_at</span><span class=\"token punctuation\">)</span>\n      end_at <span class=\"token operator\">=</span> Changeset<span class=\"token punctuation\">.</span>get_field<span class=\"token punctuation\">(</span>changeset<span class=\"token punctuation\">,</span> <span class=\"token atom symbol\">:end_at</span><span class=\"token punctuation\">)</span>\n      Changeset<span class=\"token punctuation\">.</span>put_change<span class=\"token punctuation\">(</span>changeset<span class=\"token punctuation\">,</span> <span class=\"token atom symbol\">:duration</span><span class=\"token punctuation\">,</span> calc_duration<span class=\"token punctuation\">(</span>start_at<span class=\"token punctuation\">,</span> end_at<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">end</span>\n  <span class=\"token keyword\">end</span>\n\n  <span class=\"token keyword\">defp</span> assign_computed<span class=\"token punctuation\">(</span>socket<span class=\"token punctuation\">,</span> changeset<span class=\"token punctuation\">)</span> <span class=\"token keyword\">do</span>\n    <span class=\"token comment\"># I need the start_at for the DatePicker component that I render from this</span>\n    <span class=\"token comment\"># component. I render the timezone and duration on the form. Lastly I</span>\n    <span class=\"token comment\"># compute and render some autocomplete suggestions from the values in the</span>\n    <span class=\"token comment\"># changeset.</span>\n    socket\n    <span class=\"token operator\">|></span> assign<span class=\"token punctuation\">(</span><span class=\"token atom symbol\">:timezone</span><span class=\"token punctuation\">,</span> Changeset<span class=\"token punctuation\">.</span>get_field<span class=\"token punctuation\">(</span>changeset<span class=\"token punctuation\">,</span> <span class=\"token atom symbol\">:timezone</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token operator\">|></span> assign<span class=\"token punctuation\">(</span><span class=\"token atom symbol\">:start_at</span><span class=\"token punctuation\">,</span> Changeset<span class=\"token punctuation\">.</span>get_field<span class=\"token punctuation\">(</span>changeset<span class=\"token punctuation\">,</span> <span class=\"token atom symbol\">:start_at</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token operator\">|></span> assign<span class=\"token punctuation\">(</span><span class=\"token atom symbol\">:duration</span><span class=\"token punctuation\">,</span> Changeset<span class=\"token punctuation\">.</span>get_field<span class=\"token punctuation\">(</span>changeset<span class=\"token punctuation\">,</span> <span class=\"token atom symbol\">:duration</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token operator\">|></span> assign<span class=\"token punctuation\">(</span><span class=\"token atom symbol\">:start_time_autocomplete</span><span class=\"token punctuation\">,</span> start_autocompletes<span class=\"token punctuation\">(</span>changeset<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token operator\">|></span> assign<span class=\"token punctuation\">(</span><span class=\"token atom symbol\">:end_time_autocomplete</span><span class=\"token punctuation\">,</span> end_autocompletes<span class=\"token punctuation\">(</span>changeset<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">end</span>\n\n  <span class=\"token comment\"># I'll leave some of these helper functions out, but they're essentially</span>\n  <span class=\"token comment\"># providing nil-safety, applying defaults, and calculating from other fields</span>\n<span class=\"token keyword\">end</span></code></pre></div>\n<p><a aria-hidden=\"true\" name=\"clientside\"></a></p>\n<h2>Getting the user’s timezone with <code>phx-hook</code></h2>\n<p>We can estimate what the user’s timezone is by asking the browser. <strong>NOTE</strong> <em>I\ndon’t recommend you use this as your only source of user timezone.</em> Use this as\nan example for how to get JavaScript-sourced input</p>\n<p>Let’s get the timezone. We’ll need some JavaScript.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">window<span class=\"token punctuation\">.</span>userTimezone <span class=\"token operator\">=</span> Intl<span class=\"token punctuation\">.</span><span class=\"token function\">DateTimeFormat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">resolvedOptions</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>timeZone\n\n<span class=\"token comment\">// initialize the Phoenix LiveView socket, and pass this in as a hook:</span>\n\nhooks<span class=\"token punctuation\">.</span>UserTimeZone <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">mounted</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> phoenix <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> target <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>el<span class=\"token punctuation\">.</span>dataset<span class=\"token punctuation\">.</span>phoenixTarget<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> els <span class=\"token operator\">=</span> phoenix<span class=\"token punctuation\">.</span>el<span class=\"token punctuation\">.</span><span class=\"token function\">querySelectorAll</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"input\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> el <span class=\"token keyword\">of</span> els<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> el<span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> window<span class=\"token punctuation\">.</span>userTimezone<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n    phoenix<span class=\"token punctuation\">.</span><span class=\"token function\">pushEventTo</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> <span class=\"token string\">\"timezone\"</span><span class=\"token punctuation\">,</span> window<span class=\"token punctuation\">.</span>userTimezone<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"erb\"><pre class=\"language-erb\"><code class=\"language-erb\"><span class=\"token erb language-erb\"><span class=\"token delimiter punctuation\">&lt;%</span><span class=\"token comment\"># Timezone in the WhenComponent form </span><span class=\"token delimiter punctuation\">%></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">phx-hook</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>UserTimeZone<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">data-phoenix-target</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>#<span class=\"token erb language-erb\"><span class=\"token delimiter punctuation\">&lt;%=</span> <span class=\"token variable\">@id</span> <span class=\"token delimiter punctuation\">%></span></span><span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>user-time-zone<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">phx-update</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>ignore<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token erb language-erb\"><span class=\"token delimiter punctuation\">&lt;%=</span> hidden_input f<span class=\"token punctuation\">,</span> <span class=\"token symbol\">:timezone</span> <span class=\"token delimiter punctuation\">%></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>When the page is rendered, I’ll get a <code>hidden_input</code> populated with the detected\ntimezone. This will be included in further form changes and params sent to the\nLiveView process. Remember to wrap it with a <code>phx-update=\"ignore\"</code> so the\nJavaScript-mutated value isn’t overwritten by LiveView.</p>\n<p>You’ll notice that I’m also using <code>pushEventTo</code> after mounting. This is needed\nbecause the user may not have interacted with the form yet to trigger a change,\nso until then, I won’t have user’s timezone! I want it pushed immediately so I\ncan update the form’s changeset. Also, <code>pushEventTo</code> is used instead of\n<code>pushEvent</code> because this is a LiveComponent, so I want the event pushed to the\nLiveComponent and not the parent LiveView. I pass the target in via a data\nattribute so I don’t confuse it with Phoenix’s own <code>phx-target</code>.</p>\n<p>When handling the event, we’ll merge the timezone with the existing params of\nthe changeset, and then re-apply the changeset and re-compute fields.</p>\n<div class=\"gatsby-highlight\" data-language=\"elixir\"><pre class=\"language-elixir\"><code class=\"language-elixir\"><span class=\"token attribute variable\">@impl</span> Phoenix<span class=\"token punctuation\">.</span>LiveComponent\n<span class=\"token keyword\">def</span> handle_event<span class=\"token punctuation\">(</span><span class=\"token string\">\"timezone\"</span><span class=\"token punctuation\">,</span> detected_timezone<span class=\"token punctuation\">,</span> socket<span class=\"token punctuation\">)</span> <span class=\"token keyword\">do</span>\n  params <span class=\"token operator\">=</span> Map<span class=\"token punctuation\">.</span>put<span class=\"token punctuation\">(</span>socket<span class=\"token punctuation\">.</span>assigns<span class=\"token punctuation\">.</span>when_changeset<span class=\"token punctuation\">.</span>params<span class=\"token punctuation\">,</span> <span class=\"token string\">\"timezone\"</span><span class=\"token punctuation\">,</span> detected_timezone<span class=\"token punctuation\">)</span>\n  changeset <span class=\"token operator\">=</span> changeset<span class=\"token punctuation\">(</span>socket<span class=\"token punctuation\">.</span>assigns<span class=\"token punctuation\">.</span>when_changeset<span class=\"token punctuation\">,</span> params<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">{</span><span class=\"token atom symbol\">:noreply</span><span class=\"token punctuation\">,</span>\n    socket\n    <span class=\"token operator\">|></span> assign<span class=\"token punctuation\">(</span><span class=\"token atom symbol\">:when_changeset</span><span class=\"token punctuation\">,</span> changeset<span class=\"token punctuation\">)</span>\n    <span class=\"token operator\">|></span> assign_computed<span class=\"token punctuation\">(</span>changeset<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">end</span></code></pre></div>\n<p><a aria-hidden=\"true\" name=\"clientinput\"></a></p>\n<h2>Handling sub-form change events</h2>\n<p>Handling form change events doesn’t change with this <code>embedded_schema</code> and\ncomponent-ized approach. It’s standard Phoenix and Ecto changeset forms, so it’s\nnot very interesting to look at. But remember that you’ll need to use\n<code>phx-target</code> to send  changes to the LiveComponent, otherwise they may bubble up\nto your parent LiveView.</p>\n<p>In my case, I also need to adjust the parameters that come in, so we’ll look at\nthat! I need to check to see what field is changing and apply new parameters\nbased on what is changing.</p>\n<div class=\"gatsby-highlight\" data-language=\"elixir\"><pre class=\"language-elixir\"><code class=\"language-elixir\"><span class=\"token attribute variable\">@impl</span> Phoenix<span class=\"token punctuation\">.</span>LiveComponent\n<span class=\"token keyword\">def</span> handle_event<span class=\"token punctuation\">(</span><span class=\"token string\">\"validate\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">%</span><span class=\"token punctuation\">{</span><span class=\"token string\">\"when_component\"</span> <span class=\"token operator\">=></span> params<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> socket<span class=\"token punctuation\">)</span> <span class=\"token keyword\">do</span>\n  adjusted_params <span class=\"token operator\">=</span> adjust_time_params<span class=\"token punctuation\">(</span>params<span class=\"token punctuation\">,</span> socket<span class=\"token punctuation\">.</span>assigns<span class=\"token punctuation\">.</span>when_changeset<span class=\"token punctuation\">)</span>\n  changeset <span class=\"token operator\">=</span> changeset<span class=\"token punctuation\">(</span>socket<span class=\"token punctuation\">.</span>assigns<span class=\"token punctuation\">.</span><span class=\"token keyword\">when</span><span class=\"token punctuation\">,</span> adjusted_params<span class=\"token punctuation\">)</span>\n\n  <span class=\"token punctuation\">{</span><span class=\"token atom symbol\">:noreply</span><span class=\"token punctuation\">,</span>\n    socket\n    <span class=\"token operator\">|></span> assign<span class=\"token punctuation\">(</span><span class=\"token atom symbol\">:when_changeset</span><span class=\"token punctuation\">,</span> changeset<span class=\"token punctuation\">)</span>\n    <span class=\"token operator\">|></span> assign_computed<span class=\"token punctuation\">(</span>changeset<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">end</span>\n\n<span class=\"token keyword\">defp</span> assign_computed<span class=\"token punctuation\">(</span>socket<span class=\"token punctuation\">,</span> changeset<span class=\"token punctuation\">)</span> <span class=\"token keyword\">do</span>\n  <span class=\"token comment\"># I need the start_at for the DatePicker component that I render from this</span>\n  <span class=\"token comment\"># component. I render the timezone and duration on the form. Lastly I</span>\n  <span class=\"token comment\"># compute and render some autocomplete suggestions from the values in the</span>\n  <span class=\"token comment\"># changeset</span>\n  socket\n  <span class=\"token operator\">|></span> assign<span class=\"token punctuation\">(</span><span class=\"token atom symbol\">:timezone</span><span class=\"token punctuation\">,</span> Changeset<span class=\"token punctuation\">.</span>get_field<span class=\"token punctuation\">(</span>changeset<span class=\"token punctuation\">,</span> <span class=\"token atom symbol\">:timezone</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token operator\">|></span> assign<span class=\"token punctuation\">(</span><span class=\"token atom symbol\">:start_at</span><span class=\"token punctuation\">,</span> Changeset<span class=\"token punctuation\">.</span>get_field<span class=\"token punctuation\">(</span>changeset<span class=\"token punctuation\">,</span> <span class=\"token atom symbol\">:start_at</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token operator\">|></span> assign<span class=\"token punctuation\">(</span><span class=\"token atom symbol\">:duration</span><span class=\"token punctuation\">,</span> Changeset<span class=\"token punctuation\">.</span>get_field<span class=\"token punctuation\">(</span>changeset<span class=\"token punctuation\">,</span> <span class=\"token atom symbol\">:duration</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token operator\">|></span> assign<span class=\"token punctuation\">(</span><span class=\"token atom symbol\">:start_time_autocomplete</span><span class=\"token punctuation\">,</span> start_autocompletes<span class=\"token punctuation\">(</span>changeset<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token operator\">|></span> assign<span class=\"token punctuation\">(</span><span class=\"token atom symbol\">:end_time_autocomplete</span><span class=\"token punctuation\">,</span> end_autocompletes<span class=\"token punctuation\">(</span>changeset<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">end</span>\n\n<span class=\"token keyword\">defp</span> adjust_time_params<span class=\"token punctuation\">(</span>params<span class=\"token punctuation\">,</span> changeset<span class=\"token punctuation\">)</span> <span class=\"token keyword\">do</span>\n  start_at_time <span class=\"token operator\">=</span> params_to_time<span class=\"token punctuation\">(</span>params<span class=\"token punctuation\">[</span><span class=\"token string\">\"start_at_time\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n  end_at_time <span class=\"token operator\">=</span> params_to_time<span class=\"token punctuation\">(</span>params<span class=\"token punctuation\">[</span><span class=\"token string\">\"end_at_time\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">cond</span> <span class=\"token keyword\">do</span>\n    end_at_time <span class=\"token operator\">!=</span> Changeset<span class=\"token punctuation\">.</span>get_field<span class=\"token punctuation\">(</span>changeset<span class=\"token punctuation\">,</span> <span class=\"token atom symbol\">:end_at_time</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span>\n      params_from_new_end_time<span class=\"token punctuation\">(</span>start_at_time<span class=\"token punctuation\">,</span> end_at_time<span class=\"token punctuation\">,</span> params<span class=\"token punctuation\">)</span>\n\n    start_at_time <span class=\"token operator\">!=</span> Changeset<span class=\"token punctuation\">.</span>get_field<span class=\"token punctuation\">(</span>changeset<span class=\"token punctuation\">,</span> <span class=\"token atom symbol\">:start_at_time</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span>\n      duration <span class=\"token operator\">=</span> Changeset<span class=\"token punctuation\">.</span>get_field<span class=\"token punctuation\">(</span>changeset<span class=\"token punctuation\">,</span> <span class=\"token atom symbol\">:duration</span><span class=\"token punctuation\">)</span>\n      params_from_new_start_time<span class=\"token punctuation\">(</span>start_at_time<span class=\"token punctuation\">,</span> duration<span class=\"token punctuation\">,</span> params<span class=\"token punctuation\">)</span>\n\n    <span class=\"token boolean\">true</span> <span class=\"token operator\">-></span>\n      params\n  <span class=\"token keyword\">end</span>\n<span class=\"token keyword\">end</span></code></pre></div>\n<p>Remember, we’re in a LiveComponent so we want to target the changes to itself\nand not the parent LiveView. This is accomplished with <code>phx-target</code> on the form.</p>\n<div class=\"gatsby-highlight\" data-language=\"erb\"><pre class=\"language-erb\"><code class=\"language-erb\"><span class=\"token erb language-erb\"><span class=\"token delimiter punctuation\">&lt;%=</span> f <span class=\"token operator\">=</span> form_for <span class=\"token variable\">@when_changeset</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"#\"</span><span class=\"token punctuation\">,</span>\n  phx_change<span class=\"token punctuation\">:</span> <span class=\"token symbol\">:validate</span><span class=\"token punctuation\">,</span>\n  phx_target<span class=\"token punctuation\">:</span> <span class=\"token string\">\"#<span class=\"token interpolation\"><span class=\"token comment\">#{@id}</span></span>\"</span><span class=\"token punctuation\">,</span>\n  phx_submit<span class=\"token punctuation\">:</span> <span class=\"token symbol\">:save</span><span class=\"token punctuation\">,</span>\n  id<span class=\"token punctuation\">:</span> <span class=\"token variable\">@id</span> <span class=\"token delimiter punctuation\">%></span></span>\n\n  <span class=\"token erb language-erb\"><span class=\"token delimiter punctuation\">&lt;%</span><span class=\"token comment\"># ... timezone input mentioned above ... </span><span class=\"token delimiter punctuation\">%></span></span>\n\n  <span class=\"token erb language-erb\"><span class=\"token delimiter punctuation\">&lt;%=</span> date_select f<span class=\"token punctuation\">,</span> <span class=\"token symbol\">:date</span> <span class=\"token delimiter punctuation\">%></span></span>\n  <span class=\"token erb language-erb\"><span class=\"token delimiter punctuation\">&lt;%=</span> time_input f<span class=\"token punctuation\">,</span> <span class=\"token symbol\">:start_time</span> <span class=\"token delimiter punctuation\">%></span></span>\n  <span class=\"token erb language-erb\"><span class=\"token delimiter punctuation\">&lt;%=</span> time_input f<span class=\"token punctuation\">,</span> <span class=\"token symbol\">:end_time</span> <span class=\"token delimiter punctuation\">%></span></span>\n  Your duration is <span class=\"token erb language-erb\"><span class=\"token delimiter punctuation\">&lt;%=</span> <span class=\"token variable\">@duration</span> <span class=\"token delimiter punctuation\">%></span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>form</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p><a aria-hidden=\"true\" name=\"subformsubmission\"></a></p>\n<h2>Handling the sub-form submission</h2>\n<p>When the user tries to submit the form, either by hitting “enter” or clicking on\nthe submit button, I need to validate the form once again, and if it’s good tell\nthe parent LiveView that it’s ok to proceed and supply all the\nhelpfully-computed values.</p>\n<p>This time we’ll check if the changeset is valid with\n<a href=\"https://hexdocs.pm/ecto/Ecto.Changeset.html#apply_action/2\"><code>Ecto.Changeset.apply_action/2</code></a>. Based on that result, we’ll let the\nLiveComponent send a message to <del>itself</del>. Actually, a LiveComponent doesn’t\nrun in its own process, instead it’s running inside the parent LiveView’s\nprocess. So <code>self()</code> is actually the LiveView and not the LiveComponent. This is\nhow we can send the parent LiveView the result!</p>\n<p>You can <a href=\"https://hexdocs.pm/phoenix_live_view/Phoenix.LiveComponent.html#module-liveview-as-the-source-of-truth\">read more about LiveComponent and sources of truth in the docs</a>.</p>\n<div class=\"gatsby-highlight\" data-language=\"elixir\"><pre class=\"language-elixir\"><code class=\"language-elixir\"><span class=\"token attribute variable\">@impl</span> Phoenix<span class=\"token punctuation\">.</span>LiveComponent\n<span class=\"token keyword\">def</span> handle_event<span class=\"token punctuation\">(</span><span class=\"token string\">\"save\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">%</span><span class=\"token punctuation\">{</span><span class=\"token string\">\"when_component\"</span> <span class=\"token operator\">=></span> params<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> socket<span class=\"token punctuation\">)</span> <span class=\"token keyword\">do</span>\n  socket<span class=\"token punctuation\">.</span>assigns<span class=\"token punctuation\">.</span><span class=\"token keyword\">when</span>\n  <span class=\"token operator\">|></span> changeset<span class=\"token punctuation\">(</span>params<span class=\"token punctuation\">)</span>\n  <span class=\"token operator\">|></span> Changeset<span class=\"token punctuation\">.</span>apply_action<span class=\"token punctuation\">(</span><span class=\"token atom symbol\">:insert</span><span class=\"token punctuation\">)</span>\n  <span class=\"token operator\">|></span> <span class=\"token keyword\">case</span> <span class=\"token keyword\">do</span>\n    <span class=\"token punctuation\">{</span><span class=\"token atom symbol\">:ok</span><span class=\"token punctuation\">,</span> record<span class=\"token punctuation\">}</span> <span class=\"token operator\">-></span>\n      send<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token atom symbol\">:proceed</span><span class=\"token punctuation\">,</span> record<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">{</span><span class=\"token atom symbol\">:noreply</span><span class=\"token punctuation\">,</span> socket<span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">{</span><span class=\"token atom symbol\">:error</span><span class=\"token punctuation\">,</span> changeset<span class=\"token punctuation\">}</span> <span class=\"token operator\">-></span>\n      <span class=\"token punctuation\">{</span><span class=\"token atom symbol\">:noreply</span><span class=\"token punctuation\">,</span>\n        socket\n        <span class=\"token operator\">|></span> assign<span class=\"token punctuation\">(</span><span class=\"token atom symbol\">:when_changeset</span><span class=\"token punctuation\">,</span> changeset<span class=\"token punctuation\">)</span>\n        <span class=\"token operator\">|></span> assign_computed<span class=\"token punctuation\">(</span>changeset<span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">end</span>\n<span class=\"token keyword\">end</span>\n\n<span class=\"token comment\"># and caught in the parent LiveView:</span>\n\n<span class=\"token attribute variable\">@impl</span> Phoenix<span class=\"token punctuation\">.</span>LiveView\n<span class=\"token keyword\">def</span> handle_info<span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token atom symbol\">:proceed</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">%</span>MyAppWeb<span class=\"token punctuation\">.</span>EventLive<span class=\"token punctuation\">.</span>WhenComponent<span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> form<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> socket<span class=\"token punctuation\">)</span> <span class=\"token keyword\">do</span>\n  <span class=\"token punctuation\">{</span><span class=\"token atom symbol\">:ok</span><span class=\"token punctuation\">,</span> start_at_wall<span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> NaiveDateTime<span class=\"token punctuation\">.</span>new<span class=\"token punctuation\">(</span>form<span class=\"token punctuation\">.</span>start_at_date<span class=\"token punctuation\">,</span> form<span class=\"token punctuation\">.</span>start_at_time<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">{</span><span class=\"token atom symbol\">:ok</span><span class=\"token punctuation\">,</span> end_at_wall<span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> NaiveDateTime<span class=\"token punctuation\">.</span>new<span class=\"token punctuation\">(</span>form<span class=\"token punctuation\">.</span>end_at_date<span class=\"token punctuation\">,</span> form<span class=\"token punctuation\">.</span>end_at_time<span class=\"token punctuation\">)</span>\n\n  params <span class=\"token operator\">=</span> <span class=\"token punctuation\">%</span><span class=\"token punctuation\">{</span>\n    <span class=\"token attr-name\">start_at_utc:</span> form<span class=\"token punctuation\">.</span>start_at<span class=\"token punctuation\">,</span>\n    <span class=\"token attr-name\">start_at_wall:</span> start_at_wall<span class=\"token punctuation\">,</span>\n    <span class=\"token attr-name\">start_at_tz:</span> form<span class=\"token punctuation\">.</span>timezone<span class=\"token punctuation\">,</span>\n    <span class=\"token attr-name\">end_at_utc:</span> form<span class=\"token punctuation\">.</span>end_at<span class=\"token punctuation\">,</span>\n    <span class=\"token attr-name\">end_at_wall:</span> end_at_wall<span class=\"token punctuation\">,</span>\n    <span class=\"token attr-name\">end_at_tz:</span> form<span class=\"token punctuation\">.</span>timezone\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token punctuation\">{</span><span class=\"token atom symbol\">:noreply</span><span class=\"token punctuation\">,</span>\n    socket\n    <span class=\"token operator\">|></span> assign<span class=\"token punctuation\">(</span><span class=\"token atom symbol\">:params</span><span class=\"token punctuation\">,</span> Map<span class=\"token punctuation\">.</span>merge<span class=\"token punctuation\">(</span>socket<span class=\"token punctuation\">.</span>assigns<span class=\"token punctuation\">.</span>params<span class=\"token punctuation\">,</span> params<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token operator\">|></span> assign_step<span class=\"token punctuation\">(</span><span class=\"token atom symbol\">:next</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">end</span></code></pre></div>\n<p><a aria-hidden=\"true\" name=\"formsubmission\"></a></p>\n<h2>Handling the overall form submission</h2>\n<p>You’ll notice that I have a function <code>assign_step</code> above. Let’s go to the parent\nLiveView and figure out how to change steps, except on the last step we want to\npersist. We’ll look for the steps in the <code>@steps</code> module attribute, assign it,\nand that should swap-out the form for the next one!</p>\n<p>If there isn’t a next step, then that must mean that we’re finished, so we\nshould try to save.</p>\n<div class=\"gatsby-highlight\" data-language=\"elixir\"><pre class=\"language-elixir\"><code class=\"language-elixir\"><span class=\"token keyword\">defmodule</span> MyAppWeb<span class=\"token punctuation\">.</span>EventLive<span class=\"token punctuation\">.</span>Step <span class=\"token keyword\">do</span>\n  <span class=\"token attribute variable\">@moduledoc</span> <span class=\"token string\">\"Describe a step in the multi-step form and where it can go.\"</span>\n  <span class=\"token keyword\">defstruct</span> <span class=\"token punctuation\">[</span><span class=\"token atom symbol\">:name</span><span class=\"token punctuation\">,</span> <span class=\"token atom symbol\">:prev</span><span class=\"token punctuation\">,</span> <span class=\"token atom symbol\">:next</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">end</span>\n\n<span class=\"token keyword\">defmodule</span> MyAppWeb<span class=\"token punctuation\">.</span>EventLive<span class=\"token punctuation\">.</span>New <span class=\"token keyword\">do</span>\n  <span class=\"token keyword\">use</span> MyAppWeb<span class=\"token punctuation\">,</span> <span class=\"token atom symbol\">:live_view</span>\n  <span class=\"token keyword\">alias</span> Ecto<span class=\"token punctuation\">.</span>Changeset\n  <span class=\"token comment\"># ...snip...</span>\n\n  <span class=\"token keyword\">defp</span> assign_step<span class=\"token punctuation\">(</span>socket<span class=\"token punctuation\">,</span> step<span class=\"token punctuation\">)</span> <span class=\"token keyword\">do</span>\n    <span class=\"token keyword\">if</span> new_step <span class=\"token operator\">=</span> Enum<span class=\"token punctuation\">.</span>find<span class=\"token punctuation\">(</span><span class=\"token attribute variable\">@steps</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span> <span class=\"token argument variable\">&amp;1</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">==</span> Map<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span>socket<span class=\"token punctuation\">.</span>assigns<span class=\"token punctuation\">.</span>progress<span class=\"token punctuation\">,</span> step<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">do</span>\n      assign<span class=\"token punctuation\">(</span>socket<span class=\"token punctuation\">,</span> <span class=\"token atom symbol\">:progress</span><span class=\"token punctuation\">,</span> new_step<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">else</span>\n      save<span class=\"token punctuation\">(</span>socket<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">end</span>\n  <span class=\"token keyword\">end</span>\n\n  <span class=\"token keyword\">def</span> save<span class=\"token punctuation\">(</span>socket<span class=\"token punctuation\">)</span> <span class=\"token keyword\">do</span>\n    <span class=\"token comment\"># remember we've merged all params together, so this should be the complete</span>\n    <span class=\"token comment\"># picture.</span>\n    <span class=\"token keyword\">case</span> Schedule<span class=\"token punctuation\">.</span>create_event<span class=\"token punctuation\">(</span>socket<span class=\"token punctuation\">.</span>assigns<span class=\"token punctuation\">.</span>params<span class=\"token punctuation\">)</span> <span class=\"token keyword\">do</span>\n      <span class=\"token punctuation\">{</span><span class=\"token atom symbol\">:ok</span><span class=\"token punctuation\">,</span> event<span class=\"token punctuation\">}</span> <span class=\"token operator\">-></span>\n          socket\n          <span class=\"token operator\">|></span> put_flash<span class=\"token punctuation\">(</span><span class=\"token atom symbol\">:info</span><span class=\"token punctuation\">,</span> t<span class=\"token punctuation\">(</span><span class=\"token string\">\"Event Created\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n          <span class=\"token operator\">|></span> push_redirect<span class=\"token punctuation\">(</span><span class=\"token attr-name\">to:</span> Routes<span class=\"token punctuation\">.</span>live_path<span class=\"token punctuation\">(</span>socket<span class=\"token punctuation\">,</span> EventLive<span class=\"token punctuation\">.</span>Show<span class=\"token punctuation\">,</span> event<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n      <span class=\"token punctuation\">{</span><span class=\"token atom symbol\">:error</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">%</span>Changeset<span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> changeset<span class=\"token punctuation\">}</span> <span class=\"token operator\">-></span>\n         socket\n         <span class=\"token operator\">|></span> assign<span class=\"token punctuation\">(</span><span class=\"token atom symbol\">:changeset</span><span class=\"token punctuation\">,</span> changeset<span class=\"token punctuation\">)</span>\n         <span class=\"token operator\">|></span> put_flash<span class=\"token punctuation\">(</span><span class=\"token atom symbol\">:error</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"There is an issue with what you filled in\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">end</span>\n  <span class=\"token keyword\">end</span>\n\n  <span class=\"token attribute variable\">@impl</span> Phoenix<span class=\"token punctuation\">.</span>LiveView\n  <span class=\"token keyword\">def</span> handle_event<span class=\"token punctuation\">(</span><span class=\"token string\">\"prev-step\"</span><span class=\"token punctuation\">,</span> _content<span class=\"token punctuation\">,</span> socket<span class=\"token punctuation\">)</span> <span class=\"token keyword\">do</span>\n    <span class=\"token punctuation\">{</span><span class=\"token atom symbol\">:noreply</span><span class=\"token punctuation\">,</span> assign_step<span class=\"token punctuation\">(</span>socket<span class=\"token punctuation\">,</span> <span class=\"token atom symbol\">:prev</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">end</span>\n<span class=\"token keyword\">end</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"erb\"><pre class=\"language-erb\"><code class=\"language-erb\"><span class=\"token erb language-erb\"><span class=\"token delimiter punctuation\">&lt;%=</span> <span class=\"token constant\">MyAppWeb</span><span class=\"token punctuation\">.</span><span class=\"token constant\">Components</span><span class=\"token punctuation\">.</span>secondary_button<span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">(</span><span class=\"token string\">\"Back\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> phx_click<span class=\"token punctuation\">:</span> <span class=\"token string\">\"prev-step\"</span><span class=\"token punctuation\">)</span> <span class=\"token delimiter punctuation\">%></span></span>\n<span class=\"token erb language-erb\"><span class=\"token delimiter punctuation\">&lt;%=</span> <span class=\"token constant\">MyAppWeb</span><span class=\"token punctuation\">.</span><span class=\"token constant\">Components</span><span class=\"token punctuation\">.</span>primary_button<span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">(</span><span class=\"token string\">\"Next\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> phx_disable_with<span class=\"token punctuation\">:</span> <span class=\"token string\">\"...\"</span><span class=\"token punctuation\">,</span> submit<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token delimiter punctuation\">%></span></span></code></pre></div>\n<p>Back buttons are easy too. Add <code>phx-click=\"prev-step\"</code> and handle the event in\nthe same way, except using <code>:prev</code>. Make sure there’s no back button on the\nfirst step! (otherwise you’ll mistakenly try to save).</p>\n<h2>Conclusion</h2>\n<p>I hope this helps you out in your endeavors to tackle long and complicated\nforms. Tweet me <a href=\"https://twitter.com/bernheisel\">@bernheisel</a> if you have suggestions or enjoyed this post!</p>\n<h2>Update</h2>\n<p>You might want to persist a draft record in-between steps. This is a great idea!\nIf you do this, then you can leverage LiveView’s <code>handle_params</code> to navigate to\nthe appropriate step depending on the draft’s progress.</p>\n<p>Also, some of my code examples aren’t very good for managing existing resources.\nKeep that in mind when developing your own multi-step form. This was written for\nthe context of <em>creating a new event</em>, and not editing an existing event.\nSubscribe to my RSS feed to check for a new post that revisits this problem.</p>","frontmatter":{"title":"Phoenix LiveView: Multi-step forms","date":"May 13, 2020","tags":["elixir","ecto","phoenix"],"originalUrl":null}}},"pageContext":{"slug":"/blog/liveview-multi-step-form/","previous":{"fields":{"slug":"/blog/elixir-mix-ecto-changeset-podcast/"},"frontmatter":{"title":"Ecto Changesets on Elixir Mix podcast","tags":["elixir","podcast"],"originalUrl":null,"excerpt":"I was invited to talk on the Elixir Mix podcast. We talked about the Ecto\nChangesets and modeling change well.\n"}},"next":{"fields":{"slug":"/blog/starting-a-new-podcast/"},"frontmatter":{"title":"Starting a New Podcast with Thinking |> Elixir","tags":["elixir","podcast"],"originalUrl":null,"excerpt":"I joined the Thinking |> Elixir Podcast! I would really love it if you shared\nit with shared with your friends who know or are discovering Elixir.\n"}}}}}