{"componentChunkName":"component---src-templates-blog-post-js","path":"/blog/vim-elixir-ls-plug/","result":{"data":{"site":{"siteMetadata":{"title":"David Bernheisel","author":"David Bernheisel"}},"markdownRemark":{"id":"8ec43387-c454-5380-9783-4cd89cc9b1e9","excerpt":"Kassio’s Post was inspirational, and I adapted from his setup. My setup is a\nlittle different from his: I use asdf to manage my installed…","timeToRead":10,"html":"<p><a href=\"https://kassio.github.io/2019/03/21/elixir-ls-on-coc.nvim.html\">Kassio’s Post</a> was inspirational, and I adapted from his setup. My setup is a\nlittle different from his:</p>\n<ul>\n<li>I use <a href=\"https://asdf-vm.com\">asdf</a> to manage my installed Elixir and Erlang versions. The ElixirLS\nproject has a tested Elixir version it was developed with; and I’d like to\nuse that same version. I also don’t want to have to worry about not having\nthe same installed versions as them.</li>\n<li>I use <a href=\"https://github.com/junegunn/vim-plug\">vim-plug</a>. It has a neat feature where you can clone any repository\nwhether or not it’s built for vim or not. In this case, I’m going to use it\nto grab a copy of ElixirLS, and have it run a post-update hook. ElixirLS\ndoesn’t have any vim code that gets loaded, so it’s benign.</li>\n<li>I wanted to let the compilation happen asynchronously. I don’t want\ncompilation to lock up the UI.</li>\n</ul>\n<h2>The Proof</h2>\n<p>Here’s <a href=\"https://github.com/elixir-lsp/elixir-ls\">ElixirLS</a> in action inside vim with <a href=\"https://github.com/neoclide/coc.nvim\">nvim.coc</a>:</p>\n<p><img src=\"/15e5b60e71e3cb72ffcbbc60de96791e/elixir-ls-in-action.gif\" alt=\"ElixirLS in action\"></p>\n<p>Here’s me manually calling to update ElixirLS. I have a terminal on the right\nthat is watching the filesystem so we can see it’s actually doing something:</p>\n<p><img src=\"/2dc5c9710c16b2cc959adb3103a58caa/ManuallyCalling.gif\" alt=\"Elixir Manual Update\"></p>\n<p>Here’s me using vim-plug to update ElixirLS. I have a terminal on the right\nthat is watching the filesystem so we can see it’s actually doing something:</p>\n<p><img src=\"/4ffe506c18effd46392cef0a61e55a4b/PlugUpdate.gif\" alt=\"Elixir Manual Update\"></p>\n<h2>The Vimscript</h2>\n<p>Here’s the vim setup:</p>\n<pre class=\"grvsc-container atom-one-light grvsc-mm-t88nfI\" data-language=\"vim\" data-index=\"0\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-t5WxC3-10 grvsc-t88nfI-6\">call plug#begin(&#39;~/.config/nvim/plugged&#39;)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-t5WxC3-10 grvsc-t88nfI-6\">  Plug &#39;elixir-lsp/elixir-ls&#39;, { &#39;do&#39;: { -&gt; g:ElixirLS.compile() } }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-t5WxC3-10 grvsc-t88nfI-6\">  Plug &#39;neoclide/coc.nvim&#39;, {&#39;branch&#39;: &#39;release&#39;}</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-t5WxC3-10 grvsc-t88nfI-6\">call plug#end()</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-t5WxC3-10 grvsc-t88nfI-6\">let g:coc_global_extensions = [&#39;coc-elixir&#39;, &#39;coc-diagnostic&#39;]</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-t5WxC3-10 grvsc-t88nfI-6\">let g:ElixirLS = {}</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-t5WxC3-10 grvsc-t88nfI-6\">let ElixirLS.path = stdpath(&#39;config&#39;).&#39;/plugged/elixir-ls&#39;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-t5WxC3-10 grvsc-t88nfI-6\">let ElixirLS.lsp = ElixirLS.path.&#39;/release/language_server.sh&#39;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-t5WxC3-10 grvsc-t88nfI-6\">let ElixirLS.cmd = join([</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-t5WxC3-10 grvsc-t88nfI-6\">        \\ &#39;asdf install &amp;&amp;&#39;,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-t5WxC3-10 grvsc-t88nfI-6\">        \\ &#39;mix do&#39;,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-t5WxC3-10 grvsc-t88nfI-6\">        \\ &#39;local.hex --force --if-missing,&#39;,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-t5WxC3-10 grvsc-t88nfI-6\">        \\ &#39;local.rebar --force,&#39;,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-t5WxC3-10 grvsc-t88nfI-6\">        \\ &#39;deps.get,&#39;,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-t5WxC3-10 grvsc-t88nfI-6\">        \\ &#39;compile,&#39;,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-t5WxC3-10 grvsc-t88nfI-6\">        \\ &#39;elixir_ls.release&#39;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-t5WxC3-10 grvsc-t88nfI-6\">        \\ ], &#39; &#39;)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-t5WxC3-10 grvsc-t88nfI-6\">function ElixirLS.on_stdout(_job_id, data, _event)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-t5WxC3-10 grvsc-t88nfI-6\">  let self.output[-1] .= a:data[0]</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-t5WxC3-10 grvsc-t88nfI-6\">  call extend(self.output, a:data[1:])</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-t5WxC3-10 grvsc-t88nfI-6\">endfunction</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-t5WxC3-10 grvsc-t88nfI-6\">let ElixirLS.on_stderr = function(ElixirLS.on_stdout)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-t5WxC3-10 grvsc-t88nfI-6\">function ElixirLS.on_exit(_job_id, exitcode, _event)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-t5WxC3-10 grvsc-t88nfI-6\">  if a:exitcode[0] == 0</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-t5WxC3-10 grvsc-t88nfI-6\">    echom &#39;&gt;&gt;&gt; ElixirLS compiled&#39;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-t5WxC3-10 grvsc-t88nfI-6\">  else</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-t5WxC3-10 grvsc-t88nfI-6\">    echoerr join(self.output, &#39; &#39;)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-t5WxC3-10 grvsc-t88nfI-6\">    echoerr &#39;&gt;&gt;&gt; ElixirLS compilation failed&#39;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-t5WxC3-10 grvsc-t88nfI-6\">  endif</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-t5WxC3-10 grvsc-t88nfI-6\">endfunction</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-t5WxC3-10 grvsc-t88nfI-6\">function ElixirLS.compile()</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-t5WxC3-10 grvsc-t88nfI-6\">  let me = copy(g:ElixirLS)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-t5WxC3-10 grvsc-t88nfI-6\">  let me.output = [&#39;&#39;]</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-t5WxC3-10 grvsc-t88nfI-6\">  echom &#39;&gt;&gt;&gt; compiling ElixirLS&#39;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-t5WxC3-10 grvsc-t88nfI-6\">  let me.id = jobstart(&#39;cd &#39; . me.path . &#39; &amp;&amp; git pull &amp;&amp; &#39; . me.cmd, me)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-t5WxC3-10 grvsc-t88nfI-6\">endfunction</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-t5WxC3-7 grvsc-t5WxC3-i grvsc-t88nfI-3\">&quot; If you want to wait on the compilation only when running :PlugUpdate</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-t5WxC3-7 grvsc-t5WxC3-i grvsc-t88nfI-3\">&quot; then have the post-update hook use this function instead:</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-t5WxC3-7 grvsc-t5WxC3-i grvsc-t88nfI-3\">&quot; function ElixirLS.compile_sync()</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-t5WxC3-7 grvsc-t5WxC3-i grvsc-t88nfI-3\">&quot;   echom &#39;&gt;&gt;&gt; compiling ElixirLS&#39;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-t5WxC3-7 grvsc-t5WxC3-i grvsc-t88nfI-3\">&quot;   silent call system(g:ElixirLS.cmd)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-t5WxC3-7 grvsc-t5WxC3-i grvsc-t88nfI-3\">&quot;   echom &#39;&gt;&gt;&gt; ElixirLS compiled&#39;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-t5WxC3-7 grvsc-t5WxC3-i grvsc-t88nfI-3\">&quot; endfunction</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-t5WxC3-7 grvsc-t5WxC3-i grvsc-t88nfI-3\">&quot; Then, update the Elixir language server</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-t5WxC3-10 grvsc-t88nfI-6\">call coc#config(&#39;elixir&#39;, {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-t5WxC3-10 grvsc-t88nfI-6\">  \\ &#39;command&#39;: g:ElixirLS.lsp,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-t5WxC3-10 grvsc-t88nfI-6\">  \\ &#39;filetypes&#39;: [&#39;elixir&#39;, &#39;eelixir&#39;]</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-t5WxC3-10 grvsc-t88nfI-6\">  \\})</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-t5WxC3-10 grvsc-t88nfI-6\">call coc#config(&#39;elixir.pathToElixirLS&#39;, g:ElixirLS.lsp)</span></span></span></code></pre>\n<p>And this is in my <code>:CocConfig</code> (<code>~/.config/nvim/coc-settings.json</code>):</p>\n<pre class=\"grvsc-container atom-one-light grvsc-mm-t88nfI\" data-language=\"json\" data-index=\"1\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-t5WxC3-1 grvsc-t88nfI-1\">{</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-t5WxC3-1 grvsc-t88nfI-1\">  </span><span class=\"grvsc-t5WxC3-5 grvsc-t88nfI-10 grvsc-t88nfI-i\">&quot;codeLens.enable&quot;</span><span class=\"grvsc-t5WxC3-1 grvsc-t88nfI-1\">: </span><span class=\"grvsc-t5WxC3-8 grvsc-t88nfI-4\">true</span><span class=\"grvsc-t5WxC3-1 grvsc-t88nfI-1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-t5WxC3-1 grvsc-t88nfI-1\">  </span><span class=\"grvsc-t5WxC3-5 grvsc-t88nfI-10 grvsc-t88nfI-i\">&quot;diagnostic-languageserver.filetypes&quot;</span><span class=\"grvsc-t5WxC3-1 grvsc-t88nfI-1\">: {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-t5WxC3-1 grvsc-t88nfI-1\">    </span><span class=\"grvsc-t5WxC3-5 grvsc-t88nfI-10 grvsc-t88nfI-i\">&quot;elixir&quot;</span><span class=\"grvsc-t5WxC3-1 grvsc-t88nfI-1\">: [</span><span class=\"grvsc-t5WxC3-10 grvsc-t88nfI-11\">&quot;mix_credo&quot;</span><span class=\"grvsc-t5WxC3-1 grvsc-t88nfI-1\">, </span><span class=\"grvsc-t5WxC3-10 grvsc-t88nfI-11\">&quot;mix_credo_compile&quot;</span><span class=\"grvsc-t5WxC3-1 grvsc-t88nfI-1\">],</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-t5WxC3-1 grvsc-t88nfI-1\">    </span><span class=\"grvsc-t5WxC3-5 grvsc-t88nfI-10 grvsc-t88nfI-i\">&quot;eelixir&quot;</span><span class=\"grvsc-t5WxC3-1 grvsc-t88nfI-1\">: [</span><span class=\"grvsc-t5WxC3-10 grvsc-t88nfI-11\">&quot;mix_credo&quot;</span><span class=\"grvsc-t5WxC3-1 grvsc-t88nfI-1\">, </span><span class=\"grvsc-t5WxC3-10 grvsc-t88nfI-11\">&quot;mix_credo_compile&quot;</span><span class=\"grvsc-t5WxC3-1 grvsc-t88nfI-1\">]</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-t5WxC3-1 grvsc-t88nfI-1\">  }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-t5WxC3-1 grvsc-t88nfI-1\">}</span></span></span></code></pre>\n<h2>Include coc.nvim, ElixirLS in plug</h2>\n<p>Starting from the top:</p>\n<pre class=\"grvsc-container atom-one-light grvsc-mm-t88nfI\" data-language=\"vim\" data-index=\"2\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-t5WxC3-10 grvsc-t88nfI-6\">call plug#begin(&#39;~/.config/nvim/plugged&#39;)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-t5WxC3-10 grvsc-t88nfI-6\">  Plug &#39;elixir-lsp/elixir-ls&#39;, { &#39;do&#39;: { -&gt; g:ElixirLS.compile() } }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-t5WxC3-10 grvsc-t88nfI-6\">  Plug &#39;neoclide/coc.nvim&#39;, {&#39;branch&#39;: &#39;release&#39;}</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-t5WxC3-10 grvsc-t88nfI-6\">call plug#end()</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-t5WxC3-10 grvsc-t88nfI-6\">let g:coc_global_extensions = [&#39;coc-elixir&#39;, &#39;coc-diagnostic&#39;]</span></span></span></code></pre>\n<p>I’m using vim-plug to grab some plugins. All we care about for now is coc.nvim\nand elixir-ls. I’m providing options for elixir-ls to perform an after-update\naction. In this case, a lambda which immediately evaluates <code>{ 'do': { -> g:ElixirLS.compile() } }</code></p>\n<p>To learn more about the vim lambda, check out <code>:h expr-lambda</code>. We’re going to\nlook at the <code>ElixirLS.compile()</code> function later.</p>\n<p>The coc.nvim setup is straight from their readme. I’m also adding some\nextensions that nvim.coc will install on its own after startup. In this case I\nwant <a href=\"https://github.com/amiralies/coc-elixir\">coc-elixir</a> and <a href=\"https://github.com/iamcco/coc-diagnostic\">coc-diagnostic</a>.</p>\n<p>coc-elixir provides coc.nvim the settings to know how to work with Elixir\nprojects and the language server. It also will build ElixirLS on its own, but\nwe’re going to circumvent that in a moment.</p>\n<p>coc-diagnostic is a generic bridge for many non-Language-Server tools like\nshellcheck and credo. In this case, I’m adding it for credo. I don’t need\ncoc-diagnostic to provide a formatter, since the main Elixir language server\nwill provide that already.</p>\n<h2>Define your vim ElixirLS dictionary</h2>\n<p>Next we’re going to create a dictionary with a couple of functions. This dict is\ngoing to manage several things for us:</p>\n<ul>\n<li>The path to the language server executable and directory.</li>\n<li>The commands to run when needing to compile</li>\n<li>Job hook functions so Neovim can run this task asynchronously</li>\n</ul>\n<p>Check out <code>:h dictionary-function</code> in vim for more info on how to be a bit more\nobject-oriented in your vim scripts. If you go down this rabbit hole, I really\nencourage you to look into <code>:h lua</code> as well which is better-suited for serious\nvim programming.</p>\n<pre class=\"grvsc-container atom-one-light grvsc-mm-t88nfI\" data-language=\"vim\" data-index=\"3\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-t5WxC3-10 grvsc-t88nfI-6\">let g:ElixirLS = {}</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-t5WxC3-10 grvsc-t88nfI-6\">let ElixirLS.path = stdpath(&#39;config&#39;).&#39;/plugged/elixir-ls&#39;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-t5WxC3-10 grvsc-t88nfI-6\">let ElixirLS.lsp = ElixirLS.path.&#39;/release/language_server.sh&#39;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-t5WxC3-10 grvsc-t88nfI-6\">let ElixirLS.cmd = join([</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-t5WxC3-10 grvsc-t88nfI-6\">        \\ &#39;asdf install &amp;&amp;&#39;,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-t5WxC3-10 grvsc-t88nfI-6\">        \\ &#39;mix do&#39;,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-t5WxC3-10 grvsc-t88nfI-6\">        \\   &#39;local.hex --force --if-missing,&#39;,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-t5WxC3-10 grvsc-t88nfI-6\">        \\   &#39;local.rebar --force,&#39;,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-t5WxC3-10 grvsc-t88nfI-6\">        \\   &#39;deps.get,&#39;,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-t5WxC3-10 grvsc-t88nfI-6\">        \\   &#39;compile,&#39;,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-t5WxC3-10 grvsc-t88nfI-6\">        \\   &#39;elixir_ls.release&#39;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-t5WxC3-10 grvsc-t88nfI-6\">        \\ ], &#39; &#39;)</span></span></span></code></pre>\n<p>So far it’s pretty standard stuff. We initialize an empty global dictionary\nfirst, then start stuffing some values in there. We’re using the function\n<code>stdpath</code> so we avoid hard-coding any paths.</p>\n<p>The <code>join([...], ' ')</code> is only a way to organize the commands in a visual way.\nIt’s not necessary; you can totally just concat some strings together. The end\nresult of this join is:</p>\n<pre class=\"grvsc-container atom-one-light grvsc-mm-t88nfI\" data-language=\"sh\" data-index=\"4\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-t5WxC3-1 grvsc-t88nfI-1\">$ asdf install </span><span class=\"grvsc-t5WxC3-1 grvsc-t88nfI-7\">&amp;&amp;</span><span class=\"grvsc-t5WxC3-1 grvsc-t88nfI-1\"> mix </span><span class=\"grvsc-t5WxC3-14 grvsc-t88nfI-7\">do</span><span class=\"grvsc-t5WxC3-1 grvsc-t88nfI-1\"> local.hex --force --if-missing, local.rebar --force, deps.get, compile, elixir_ls.release</span></span></span></code></pre>\n<p>Since I’m using <a href=\"https://asdf-vm.com\">asdf</a> and <a href=\"https://github.com/elixir-lsp/elixir-ls/blob/master/.tool-versions\">so are the ElixirLS\ndevelopers</a>\nI want to make sure I’m using the ElixirLS developers’ tools so I know for sure\nI won’t run into trouble while developing; I want my ElixirLS to be stable since\nit’s such an important tool for me.</p>\n<p>We’re going to leverage <a href=\"https://hexdocs.pm/mix/Mix.Tasks.Do.html\">mix do</a> so we’re not starting Elixir fresh for each\ncommand. This should speed some things up.</p>\n<h2>Run it in the background</h2>\n<pre class=\"grvsc-container atom-one-light grvsc-mm-t88nfI\" data-language=\"vim\" data-index=\"5\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-t5WxC3-10 grvsc-t88nfI-6\">function ElixirLS.on_stdout(_job_id, data, _event)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-t5WxC3-10 grvsc-t88nfI-6\">  let self.output[-1] .= a:data[0]</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-t5WxC3-10 grvsc-t88nfI-6\">  call extend(self.output, a:data[1:])</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-t5WxC3-10 grvsc-t88nfI-6\">endfunction</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-t5WxC3-10 grvsc-t88nfI-6\">let ElixirLS.on_stderr = function(ElixirLS.on_stdout)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-t5WxC3-10 grvsc-t88nfI-6\">function ElixirLS.on_exit(_job_id, exitcode, _event)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-t5WxC3-10 grvsc-t88nfI-6\">  if a:exitcode[0] == 0</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-t5WxC3-10 grvsc-t88nfI-6\">    echom &#39;&gt;&gt;&gt; ElixirLS compiled&#39;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-t5WxC3-10 grvsc-t88nfI-6\">  else</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-t5WxC3-10 grvsc-t88nfI-6\">    echoerr join(self.output, &#39; &#39;)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-t5WxC3-10 grvsc-t88nfI-6\">    echoerr &#39;&gt;&gt;&gt; ElixirLS compilation failed&#39;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-t5WxC3-10 grvsc-t88nfI-6\">  endif</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-t5WxC3-10 grvsc-t88nfI-6\">endfunction</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-t5WxC3-10 grvsc-t88nfI-6\">function ElixirLS.compile()</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-t5WxC3-10 grvsc-t88nfI-6\">  let me = copy(g:ElixirLS)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-t5WxC3-10 grvsc-t88nfI-6\">  let me.output = [&#39;&#39;]</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-t5WxC3-10 grvsc-t88nfI-6\">  echom &#39;&gt;&gt;&gt; compiling ElixirLS&#39;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-t5WxC3-10 grvsc-t88nfI-6\">  let me.id = jobstart(&#39;cd &#39; . me.path . &#39; &amp;&amp; git pull &amp;&amp; &#39; . me.cmd, me)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-t5WxC3-10 grvsc-t88nfI-6\">endfunction</span></span></span></code></pre>\n<p>These functions are adding keys to the ElixirLS dictionary. If I echo out the\ndictionary, you’ll see a normal dictionary with some funcrefs.</p>\n<pre class=\"grvsc-container atom-one-light grvsc-mm-t88nfI\" data-language=\"vim\" data-index=\"6\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-t5WxC3-10 grvsc-t88nfI-6\">:echo ElixirLS</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-t5WxC3-10 grvsc-t88nfI-6\">{</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-t5WxC3-10 grvsc-t88nfI-6\">  &#39;cmd&#39;: &#39;asdf install &amp;&amp; mix do local.hex --force --if-missing, local.rebar --force, deps.get, compile, elixir_ls.release&#39;,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-t5WxC3-10 grvsc-t88nfI-6\">  &#39;path&#39;: &#39;/home/me/.config/nvim/plugged/elixir-ls&#39;,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-t5WxC3-10 grvsc-t88nfI-6\">  &#39;on_exit&#39;: function(&#39;2&#39;),</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-t5WxC3-10 grvsc-t88nfI-6\">  &#39;on_stdout&#39;: function(&#39;1&#39;),</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-t5WxC3-10 grvsc-t88nfI-6\">  &#39;lsp&#39;: &#39;/home/me/.config/nvim/plugged/elixir-ls/release/language_server.sh&#39;,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-t5WxC3-10 grvsc-t88nfI-6\">  &#39;on_stderr&#39;: function(&#39;1&#39;, {...@0}),</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-t5WxC3-10 grvsc-t88nfI-6\">  &#39;compile&#39;: function(&#39;3&#39;)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-t5WxC3-10 grvsc-t88nfI-6\">}</span></span></span></code></pre>\n<p>One of the great things about Neovim (and Vim8+) is that it really pushed\nasynchronous work forward. Neovim introduced some functions to manage background\njobs. The one we end up using is <code>jobstart({cmd}[, {opts}])</code> (check out <code>:h jobstart</code>).\n<strong>Heads up</strong> this is for Neovim; Vim8 has a different API for asynchronous\nwork. It’s still <code>jobstart</code> but the options are different, so be sure to check\nout <code>:h job-options</code>.</p>\n<pre class=\"grvsc-container atom-one-light grvsc-mm-t88nfI\" data-language=\"vim\" data-index=\"7\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-t5WxC3-10 grvsc-t88nfI-6\">function ElixirLS.compile()</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-t5WxC3-10 grvsc-t88nfI-6\">  let me = copy(g:ElixirLS)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-t5WxC3-10 grvsc-t88nfI-6\">  let me.output = [&#39;&#39;]</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-t5WxC3-10 grvsc-t88nfI-6\">  echom &#39;&gt;&gt;&gt; compiling ElixirLS&#39;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-t5WxC3-10 grvsc-t88nfI-6\">  let me.id = jobstart(&#39;cd &#39; . me.path . &#39; &amp;&amp; git pull &amp;&amp; &#39; . me.cmd, me)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-t5WxC3-10 grvsc-t88nfI-6\">endfunction</span></span></span></code></pre>\n<p>First we’re going to make a copy of the dictionary since this can be\nasynchronous; we’ll call it <code>me</code>. Then we’ll initialize a new key <code>output</code> so we\ncan store all the background job’s output into it. Lastly, we’ll start the job.\nThe first argument (if a string) will shell out and execute the command you fed\nit.</p>\n<p>Here’s the complete command that ends up being sent:</p>\n<pre class=\"grvsc-container atom-one-light grvsc-mm-t88nfI\" data-language=\"bash\" data-index=\"8\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-t5WxC3-8 grvsc-t88nfI-10\">cd</span><span class=\"grvsc-t5WxC3-1 grvsc-t88nfI-1\"> {the-path} </span><span class=\"grvsc-t5WxC3-1 grvsc-t88nfI-7\">&amp;&amp;</span><span class=\"grvsc-t5WxC3-1 grvsc-t88nfI-1\"> \\</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-t5WxC3-1 grvsc-t88nfI-1\">  git pull </span><span class=\"grvsc-t5WxC3-1 grvsc-t88nfI-7\">&amp;&amp;</span><span class=\"grvsc-t5WxC3-1 grvsc-t88nfI-1\"> \\</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-t5WxC3-1 grvsc-t88nfI-1\">  asdf install </span><span class=\"grvsc-t5WxC3-1 grvsc-t88nfI-7\">&amp;&amp;</span><span class=\"grvsc-t5WxC3-1 grvsc-t88nfI-1\"> \\</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-t5WxC3-1 grvsc-t88nfI-1\">  mix </span><span class=\"grvsc-t5WxC3-14 grvsc-t88nfI-7\">do</span><span class=\"grvsc-t5WxC3-1 grvsc-t88nfI-1\"> local.hex --force --if-missing, local.rebar --force, deps.get, compile, elixir_ls.release</span></span></span></code></pre>\n<p><strong>If you’re only using this via vim-plug</strong>, then vim-plug will take care of the\n<code>cd {the-path} &#x26;&#x26; git pull</code> on its own, so we don’t need to include that.\nTotally skip it and only include <code>me.cmd</code>. In my case, I wanted to be able to\nrun <code>:call ElixirLS.compile()</code> myself as well which will need to perform those\ntasks. It doesn’t hurt to keep those commands but they’re redundant.</p>\n<p>The last argument <code>me</code> is a dictionary that contains the keys that point to\nfunctions that will accept a certain signature; the three functions it cares\nabout are:</p>\n<ul>\n<li><code>on_stdout(job_id, data, event)</code></li>\n<li><code>on_stderr(job_id, data, event)</code></li>\n<li><code>on_exit(job_id, exitcode, _event)</code></li>\n</ul>\n<p>The values that are passed into these functions are a bit odd, but remember it’s\nfocused on a stream of data, and not all the data at once. This means that the\ndata you get will be an array of values from the background job’s output (either\nstdout or stderr).</p>\n<p>Let’s look at one of the functions that receives the hook:</p>\n<pre class=\"grvsc-container atom-one-light grvsc-mm-t88nfI\" data-language=\"vim\" data-index=\"9\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-t5WxC3-10 grvsc-t88nfI-6\">function ElixirLS.on_stdout(_job_id, data, _event)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-t5WxC3-10 grvsc-t88nfI-6\">  let self.output[-1] .= a:data[0]</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-t5WxC3-10 grvsc-t88nfI-6\">  call extend(self.output, a:data[1:])</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-t5WxC3-10 grvsc-t88nfI-6\">endfunction</span></span></span></code></pre>\n<p><code>self</code> refers to the copy of the ElixirLS dictionary that started this job.\n(check out <code>:h self</code>). Before we started the job, we initialized the dictionary\nto have an <code>output</code> key that had a list with one empty string <code>['']</code>. We’re\ngoing to use this list and append all the incoming output into it. At the very\nend, <code>self.output</code> have something like <code>['hey', 'hi\\nthere', \"I'm d', 'one now']</code>. Since the data isn’t necessarily split at newlines, we’re going to\ncombine the last stored output’s with the first incoming element, and then add\nthe rest of the incoming data to the stored output.</p>\n<p><code>let self.output[-1] .= a:data[0]</code>. Take the last stored element and concat the\nfirst incoming data’s element, and then assign it back to <code>self.output[-1]</code>.\nThen add the two lists together. <code>extend()</code> will mutate the first element.</p>\n<p>Since we want to treat <code>stderr</code> and <code>stdout</code> as the same kind of output, we’re\ngoing to have the <code>on_stderr</code> callback forward the call to the <code>on_stdout</code>\nfunction. This avoids duplicating the code.</p>\n<p>Finally, let’s look at the <code>on_exit</code> callback:</p>\n<pre class=\"grvsc-container atom-one-light grvsc-mm-t88nfI\" data-language=\"vim\" data-index=\"10\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-t5WxC3-10 grvsc-t88nfI-6\">function ElixirLS.on_exit(_job_id, exitcode, _event)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-t5WxC3-10 grvsc-t88nfI-6\">  if a:exitcode[0] == 0</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-t5WxC3-10 grvsc-t88nfI-6\">    echom &#39;&gt;&gt;&gt; ElixirLS compiled&#39;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-t5WxC3-10 grvsc-t88nfI-6\">  else</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-t5WxC3-10 grvsc-t88nfI-6\">    echoerr join(self.output, &#39; &#39;)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-t5WxC3-10 grvsc-t88nfI-6\">    echoerr &#39;&gt;&gt;&gt; ElixirLS compilation failed&#39;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-t5WxC3-10 grvsc-t88nfI-6\">  endif</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-t5WxC3-10 grvsc-t88nfI-6\">endfunction</span></span></span></code></pre>\n<p>The exitcode is passed into this function, but it’s still the funky buffer-like\narray but it should always just be the one element with the exit code. If it’s\n0, then it exited ok without error so let’s echo a message indicating we’re\ndone.</p>\n<p>Otherwise, let’s echo out the entire output as an error that I can find with\n<code>:messages</code> and investigate what went wrong.</p>\n<p>All this means now is that we can run <code>:PlugUpdate</code> and ElixirLS will now update\nitself, ensuring it’s running on the best version of Elixir for itself,\neverything’s updated, downloaded, and recompiled without issue. I can also run\n<code>ElixirLS.compile()</code> at any time if I suspect I need to update ElixirLS.</p>\n<p>With nvim.coc I can also check <code>:CocInfo</code> to see if the language servers are\nrunning ok.</p>\n<h2>Use the fruits of the labor</h2>\n<pre class=\"grvsc-container atom-one-light grvsc-mm-t88nfI\" data-language=\"vim\" data-index=\"11\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-t5WxC3-10 grvsc-t88nfI-6\">call coc#config(&#39;elixir&#39;, {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-t5WxC3-10 grvsc-t88nfI-6\">  \\ &#39;command&#39;: g:ElixirLS.lsp,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-t5WxC3-10 grvsc-t88nfI-6\">  \\ &#39;filetypes&#39;: [&#39;elixir&#39;, &#39;eelixir&#39;]</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-t5WxC3-10 grvsc-t88nfI-6\">  \\})</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-t5WxC3-10 grvsc-t88nfI-6\">call coc#config(&#39;elixir.pathToElixirLS&#39;, g:ElixirLS.lsp)</span></span></span></code></pre>\n<p>Almost done!!</p>\n<p>We have a somewhat dynamic path for the newly-compiled ElixirLS. On my Mac, the\npath could be <code>/Users/me/.config/...</code>, but on my Linux computer it would be\n<code>/home/me/.config/...</code>. CocConfig is a JSON file that can’t evaluate any\nenvironment variables, so I need to resort to calling it from within vim. This\nreally works out though.</p>\n<p>The first <code>coc#config</code> is telling coc.nvim in general that there is an available\nlanguage server for the <code>elixir</code> and <code>eexlixir</code> filetypes. Lastly, we’re going\nto tell <code>coc-elixir</code> to use our own compiled ElixirLS so it doesn’t need to go\noff on its own and try to manage the installation and compilation of ElixirLS.</p>\n<p>======</p>\n<p>Have any vim and Elixir tips of your own? TWEEEEEEEET at me <a href=\"https://twitter.com/bernheisel\">@bernheisel</a></p>\n<style class=\"grvsc-styles\">\n  .grvsc-container {\n    overflow: auto;\n    position: relative;\n    -webkit-overflow-scrolling: touch;\n    padding-top: 1rem;\n    padding-top: var(--grvsc-padding-top, var(--grvsc-padding-v, 1rem));\n    padding-bottom: 1rem;\n    padding-bottom: var(--grvsc-padding-bottom, var(--grvsc-padding-v, 1rem));\n    border-radius: 8px;\n    border-radius: var(--grvsc-border-radius, 8px);\n    font-feature-settings: normal;\n    line-height: 1.4;\n  }\n  \n  .grvsc-code {\n    display: table;\n  }\n  \n  .grvsc-line {\n    display: table-row;\n    box-sizing: border-box;\n    width: 100%;\n    position: relative;\n  }\n  \n  .grvsc-line > * {\n    position: relative;\n  }\n  \n  .grvsc-gutter-pad {\n    display: table-cell;\n    padding-left: 0.75rem;\n    padding-left: calc(var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem)) / 2);\n  }\n  \n  .grvsc-gutter {\n    display: table-cell;\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    user-select: none;\n  }\n  \n  .grvsc-gutter::before {\n    content: attr(data-content);\n  }\n  \n  .grvsc-source {\n    display: table-cell;\n    padding-left: 1.5rem;\n    padding-left: var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem));\n    padding-right: 1.5rem;\n    padding-right: var(--grvsc-padding-right, var(--grvsc-padding-h, 1.5rem));\n  }\n  \n  .grvsc-source:empty::after {\n    content: ' ';\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    user-select: none;\n  }\n  \n  .grvsc-gutter + .grvsc-source {\n    padding-left: 0.75rem;\n    padding-left: calc(var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem)) / 2);\n  }\n  \n  /* Line transformer styles */\n  \n  .grvsc-has-line-highlighting > .grvsc-code > .grvsc-line::before {\n    content: ' ';\n    position: absolute;\n    width: 100%;\n  }\n  \n  .grvsc-line-diff-add::before {\n    background-color: var(--grvsc-line-diff-add-background-color, rgba(0, 255, 60, 0.2));\n  }\n  \n  .grvsc-line-diff-del::before {\n    background-color: var(--grvsc-line-diff-del-background-color, rgba(255, 0, 20, 0.2));\n  }\n  \n  .grvsc-line-number {\n    padding: 0 2px;\n    text-align: right;\n    opacity: 0.7;\n  }\n  \n  .atom-one-light {\n    background-color: #FAFAFA;\n    color: #383A42;\n  }\n  .atom-one-light .grvsc-t5WxC3-i { font-style: italic; }\n  .atom-one-light .grvsc-t5WxC3-10 { color: #50A14F; }\n  .atom-one-light .grvsc-t5WxC3-7 { color: #A0A1A7; }\n  .atom-one-light .grvsc-t5WxC3-1 { color: #383A42; }\n  .atom-one-light .grvsc-t5WxC3-5 { color: #E45649; }\n  .atom-one-light .grvsc-t5WxC3-8 { color: #0184BC; }\n  .atom-one-light .grvsc-t5WxC3-14 { color: #A626A4; }\n  .atom-one-light .grvsc-line-highlighted::before {\n    background-color: var(--grvsc-line-highlighted-background-color, rgba(0, 0, 0, 0.05));\n    box-shadow: inset var(--grvsc-line-highlighted-border-width, 4px) 0 0 0 var(--grvsc-line-highlighted-border-color, rgba(0, 0, 0, 0.2));\n  }\n  \n  /* Monokai Phoenix */\n  @media (prefers-color-scheme: dark) {\n    .grvsc-mm-t88nfI {\n      background-color: #1e1e1e;\n      color: #F8F8F2;\n    }\n    .grvsc-mm-t88nfI .grvsc-t88nfI-i { font-style: italic; }\n    .grvsc-mm-t88nfI .grvsc-t88nfI-6 { color: #E6DB74; }\n    .grvsc-mm-t88nfI .grvsc-t88nfI-3 { color: #75715E; }\n    .grvsc-mm-t88nfI .grvsc-t88nfI-1 { color: #F8F8F2; }\n    .grvsc-mm-t88nfI .grvsc-t88nfI-10 { color: #66D9EF; }\n    .grvsc-mm-t88nfI .grvsc-t88nfI-4 { color: #AE81FF; }\n    .grvsc-mm-t88nfI .grvsc-t88nfI-11 { color: #CFCFC2; }\n    .grvsc-mm-t88nfI .grvsc-t88nfI-7 { color: #F92672; }\n    .grvsc-mm-t88nfI .grvsc-line-highlighted::before {\n      background-color: var(--grvsc-line-highlighted-background-color, rgba(255, 255, 255, 0.1));\n      box-shadow: inset var(--grvsc-line-highlighted-border-width, 4px) 0 0 0 var(--grvsc-line-highlighted-border-color, rgba(255, 255, 255, 0.5));\n    }\n  }\n</style>","frontmatter":{"title":"Managing ElixirLS updates in Neovim with asdf and vim-plug","date":"March 03, 2020","tags":["elixir","vim"],"originalUrl":null}}},"pageContext":{"slug":"/blog/vim-elixir-ls-plug/","previous":{"fields":{"slug":"/blog/ecto_changeset_tips/"},"frontmatter":{"title":"Ecto Tips: UUID Boilerplate, Docs, and Composing Changesets","tags":["elixir","ecto"],"originalUrl":null,"excerpt":"There are some helpful techniques you can employ to help you and your\ncoworkers when writing long changeset functions. It's hard to remember what's\nrequired, optional, and defaulted. DB-generated UUIDs. And composing\nchangesets.\n"}},"next":{"fields":{"slug":"/blog/newtab-notes-chrome-extension/"},"frontmatter":{"title":"NewTab Notes Extension","tags":["chrome","javascript"],"originalUrl":null,"excerpt":null}}}}}