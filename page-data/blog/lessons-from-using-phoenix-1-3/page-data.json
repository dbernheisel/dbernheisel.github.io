{"componentChunkName":"component---src-templates-blog-post-js","path":"/blog/lessons-from-using-phoenix-1-3/","result":{"data":{"site":{"siteMetadata":{"title":"David Bernheisel","author":"David Bernheisel"}},"markdownRemark":{"id":"168dfbd6-5341-555d-b507-fa325c083c9d","excerpt":"Phoenix 1.3 introduces contexts, which has been met with some resistance. I’ve\ndeveloped an application using it and learned some lessons.","timeToRead":11,"html":"<p>Phoenix 1.3 introduces contexts, which has been met with some resistance. I’ve\ndeveloped an application using it and learned some lessons.</p>\n<!-- excerpt -->\n<p><strong>[WARNING]</strong> I like contexts.</p>\n<p><img src=\"/8b9d64dd7a997f9c55116b167429a478/homer-backing-up.gif\" alt=\"me, now, ashamed and hiding because I am probably going against the grain that\nother smarter-than-me people likely established already\"></p>\n<p>Phew… I just wanted to admit that up front. Now that I got that out of the\nway, I am going to share my journey about using Phoenix 1.3.0 and contexts.</p>\n<hr>\n<ul>\n<li><a href=\"#experience\">My context</a></li>\n<li>\n<p>Lessons:</p>\n<ul>\n<li><a href=\"#dontgenerators\">Don’t use the generators</a></li>\n<li><a href=\"#dothedomain\">Embrace the domain vocabulary</a></li>\n<li><a href=\"#bloated\">Avoid the bloat</a></li>\n<li><a href=\"#maybeumbrella\">Consider before umbrellas</a></li>\n</ul>\n</li>\n<li><a href=\"#giveitago\">You should give it a shot</a></li>\n</ul>\n<p><a name=\"experience\"></a></p>\n<h2>Experience</h2>\n<p>I worked on a greenfield project and had an opportunity to use Phoenix\n1.3.0-rc2. With Phoenix 1.3.0 just released, I thought it might be timely to\ninform other developers what it’s like to work with contexts, and some\nrecommendations I have after working on a project using contexts for several\nmonths.</p>\n<p>If you don’t know what a context is:</p>\n<ul>\n<li><a href=\"https://youtu.be/tMO28ar0lW8?t=12m21s\">watch Chris McCord talk about\nit</a></li>\n<li>or <a href=\"https://martinfowler.com/bliki/BoundedContext.html\">read Martin Fowler’s explanation of Bounded\nContext</a></li>\n<li>or <a href=\"http://phoenixframework.org/blog/phoenix-1-3-0-released\">read the Phoenix 1.3 release\npost</a></li>\n<li>\n<p>or read my tldr version:</p>\n<blockquote>\n<p>A context is a module that defines the interface between a set of\ninter-related models/schemas to the rest of the application (like other\ncontexts). A context is an internal API that provides opportunity to name\nthings better and organize code.</p>\n</blockquote>\n</li>\n</ul>\n<p>A practical example: instead of your controller talking to the database, your\ncontroller will talk to the context, and the context will interface with\nnecessary functions and schemas and modules to accomplish the task.</p>\n<p><strong>NOTE:</strong> I did not use 1.3.0-rc3 which changes the <code>Web</code> namespace, so I will\nskip that part. I think that’s a good change, but I have no real experience with\nthose tweaks yet.</p>\n<h2>Lessons</h2>\n<p><a name=\"dontgenerators\"></a></p>\n<h3>Don’t use the generators more than once</h3>\n<p>With Phoenix 1.3, I only recommend using the <code>phx</code> generators ONCE in a\ngreenfield project. After that, ditch them. Ditch them because once you’ve\nadjusted the code to your liking (and you’ll definitely need to edit the\ngenerated code), using the generators again may <em><strong>inject</strong></em> generated code into\nyour existing files, which likely don’t follow your patterns anymore.</p>\n<p>Since I’m recommending against something, let’s jump into examples and find out\nwhy.</p>\n<p>Here’s what I had to do with the generated files:</p>\n<ul>\n<li>\n<p><strong>Rewrite the tests because they setup a fixture for the schema.</strong></p>\n<p>This isn’t a bad idea in itself, but I wanted to use\n<a href=\"https://github.com/thoughtbot/ex_machina\">ex_machina</a> for setting up test\nscenarios. At first, I thought the generated fixture was a great idea.  I’m\nproviding an interface for creating widgets, so I should use it in my tests,\nright?</p>\n<p>Here’s the problem:</p>\n<p>Imagine if someone introduced a bug in <code>create_widget()</code>— now all your tests\nthat involve inserting a <code>widget</code> breaks. That’s unreasonable, because I’m not\ntesting <em>getting to that state</em> most of the time, I’m testing the unit of\nfunctionality or integration between functions. Instead, I want the tests for\n<code>create_widget()</code> to fail (and any reliant integration tests), as opposed to\nthe <strong>WHOLE TEST SUITE</strong> breaking and thus freaking me out. When the whole\ntest suite breaks, it’s harder to discern where the problem is.</p>\n</li>\n<li>\n<p><strong>Separate the schema-specific tests into their own test file.</strong></p>\n<p>The new context organization only generates a test file for the <em>context</em>, and\nnot a schema. As I kept building the application, it became evident that the\ncontext file and context test file were getting too large. I felt compelled to\nisolate and organize this big bag-o’-functions into smaller bags-o’-functions.\nI decided to start splitting the tests into different schema-related files,\nlike <code>{context}/{schema}_test.exs</code>. Since I split the test files, it became\nclearer where I should place tests for custom changeset functions as well.</p>\n<p>I also want to be more careful about how I use <code>describe</code> and <code>test</code> blocks,\nsince ExUnit doesn’t support nested <code>describe</code> or context blocks.  The\ngenerated test names were also a bit long for my taste, so I moved the\nfunction name to the <code>describe</code> block, and then used the test title to\ndescribe the context and the expected result.</p>\n<p>Lastly, the generated style was … different.</p>\n<ul>\n<li>I don’t like aliasing modules in the middle of the file. I feel\nthey belong at the top of the file.</li>\n<li>I keep module attributes near the top of the file.</li>\n<li>I avoid the function parenthesis unless I need them.</li>\n</ul>\n<p>Here is an example of how I changed things:</p>\n<div class=\"gatsby-highlight\" data-language=\"elixir\"><pre class=\"language-elixir\"><code class=\"language-elixir\"><span class=\"token comment\"># BEFORE</span>\n<span class=\"token comment\"># test/my_app/things_test.exs</span>\n<span class=\"token keyword\">defmodule</span> MyApp<span class=\"token punctuation\">.</span>ThingsTest <span class=\"token keyword\">do</span>\n<span class=\"token keyword\">use</span> MyApp<span class=\"token punctuation\">.</span>DataCase\n<span class=\"token keyword\">alias</span> MyApp<span class=\"token punctuation\">.</span>Things\n\ndescribe <span class=\"token string\">\"widgets\"</span> <span class=\"token keyword\">do</span>\n  <span class=\"token keyword\">alias</span> MyApp<span class=\"token punctuation\">.</span>Things<span class=\"token punctuation\">.</span>Widget\n\n  <span class=\"token attribute variable\">@valid_attrs</span> <span class=\"token punctuation\">%</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n  <span class=\"token attribute variable\">@update_attrs</span> <span class=\"token punctuation\">%</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n  <span class=\"token attribute variable\">@invalid_attrs</span> <span class=\"token punctuation\">%</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">def</span> widget_fixture<span class=\"token punctuation\">(</span>attrs <span class=\"token operator\">\\\\</span> <span class=\"token punctuation\">%</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">do</span>\n    <span class=\"token punctuation\">{</span><span class=\"token atom symbol\">:ok</span><span class=\"token punctuation\">,</span> widget<span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span>\n      attrs\n      <span class=\"token operator\">|></span> Enum<span class=\"token punctuation\">.</span>into<span class=\"token punctuation\">(</span><span class=\"token attribute variable\">@valid_attrs</span><span class=\"token punctuation\">)</span>\n      <span class=\"token operator\">|></span> Things<span class=\"token punctuation\">.</span>create_widget<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    widget\n  <span class=\"token keyword\">end</span>\n\n  test <span class=\"token string\">\"list_widgets/0 returns all widgets\"</span> <span class=\"token keyword\">do</span>\n    widget_one <span class=\"token operator\">=</span> widget_fixture<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    widget_two <span class=\"token operator\">=</span> widget_fixture<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    assert Things<span class=\"token punctuation\">.</span>list_widgets<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token punctuation\">[</span>widget_one<span class=\"token punctuation\">,</span> widget_two<span class=\"token punctuation\">]</span>\n  <span class=\"token keyword\">end</span>\n\n  <span class=\"token comment\"># I added this, just to go along with their style and to show</span>\n  <span class=\"token comment\"># what a typical new developer would do with this existing pattern</span>\n  test <span class=\"token string\">\"list_widgets/1 returns all widgets limited by list of id\"</span> <span class=\"token keyword\">do</span>\n    widget_one <span class=\"token operator\">=</span> widget_fixture<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    _widget_two <span class=\"token operator\">=</span> widget_fixture<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    assert Things<span class=\"token punctuation\">.</span>list_widgets<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>widget_one<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token punctuation\">[</span>widget_one<span class=\"token punctuation\">]</span>\n  <span class=\"token keyword\">end</span>\n\n  <span class=\"token comment\">#...</span>\n<span class=\"token keyword\">end</span>\n<span class=\"token keyword\">end</span>\n\n<span class=\"token comment\"># AFTER</span>\n<span class=\"token comment\"># test/my_app/things/widget_test.exs</span>\n<span class=\"token keyword\">defmodule</span> MyApp<span class=\"token punctuation\">.</span>Things<span class=\"token punctuation\">.</span>WidgetTest <span class=\"token keyword\">do</span>\n<span class=\"token keyword\">use</span> MyApp<span class=\"token punctuation\">.</span>DataCase\n<span class=\"token keyword\">import</span> MyApp<span class=\"token punctuation\">.</span>Factory\n<span class=\"token keyword\">alias</span> MyApp<span class=\"token punctuation\">.</span>Things\n<span class=\"token keyword\">alias</span> MyApp<span class=\"token punctuation\">.</span>Things<span class=\"token punctuation\">.</span>Widget\n\ndescribe <span class=\"token string\">\"list_widgets\"</span> <span class=\"token keyword\">do</span>\n  test <span class=\"token string\">\"returns all widgets\"</span> <span class=\"token keyword\">do</span>\n    <span class=\"token punctuation\">[</span>widget_one<span class=\"token punctuation\">,</span> widget_two<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> insert_pair<span class=\"token punctuation\">(</span><span class=\"token atom symbol\">:widget</span><span class=\"token punctuation\">)</span>\n\n    assert Things<span class=\"token punctuation\">.</span>list_widgets <span class=\"token operator\">==</span> <span class=\"token punctuation\">[</span>widget_one<span class=\"token punctuation\">,</span> widget_two<span class=\"token punctuation\">]</span>\n  <span class=\"token keyword\">end</span>\n\n  test <span class=\"token string\">\"when given list of ids, returns all widgets in ids\"</span> <span class=\"token keyword\">do</span>\n    <span class=\"token punctuation\">[</span>widget_one<span class=\"token punctuation\">,</span> _widget_two<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> insert_pair<span class=\"token punctuation\">(</span><span class=\"token atom symbol\">:widget</span><span class=\"token punctuation\">)</span>\n\n    assert Things<span class=\"token punctuation\">.</span>list_widgets<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>widget_one<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token punctuation\">[</span>widget_one<span class=\"token punctuation\">]</span>\n  <span class=\"token keyword\">end</span>\n<span class=\"token keyword\">end</span>\n\n<span class=\"token comment\">#...</span>\n<span class=\"token keyword\">end</span></code></pre></div>\n<p>I like this so much better, and I’m afraid that just going with the generated\npattern will lead newer developers down a path of bloated files.</p>\n</li>\n</ul>\n<p>It’s more apparent to me in Phoenix 1.3.0 that the generators are much more a\nteaching tool for new developers than meant to be used in an ongoing fashion\nthroughout a project’s lifetime. If you’ve formed your opinion, or your\norganization has a coding style within Phoenix, then you might appreciate\nknowing you can customize the templates that the generators will use. You can do\nthis by copying them out of <code>deps/phoenix/priv/templates</code> and into your\nproject’s <code>priv/templates</code> folder. That’s pretty awesome.</p>\n<p>Recap: for new developers, Phoenix’s new generators are a great learning tool,\nbut I don’t recommend using them after the first use.</p>\n<p><a name=\"dothedomain\"></a></p>\n<h3>Embrace the domain vocabulary</h3>\n<p>I realized that my understanding of contexts at the time was flawed, and that\nmany of the examples out in the blog-o-sphere were not helpful for me when I was\nin the trenches myself.</p>\n<p>I imagine that most (all?) projects have their own domain AND vocabulary, and to\nbe readable for folks in that domain it is helpful to share that vocabulary.</p>\n<p>This coming example may not apply to you, but this is the beauty of contexts:\nyour needs WILL differ and your domain vocabulary will help determine how to\norganize your code.</p>\n<p>The project I was working on had different terms for their warehouse workers:</p>\n<ul>\n<li>Operators</li>\n<li>Supervisors</li>\n<li>Admins</li>\n<li>SalesAssociate</li>\n</ul>\n<p>This roughly corresponds with a typical <code>User</code> schema that <code>belongs_to</code> a <code>Role</code>\nschema. I placed both schemas into a new context called <code>Accounts</code>, and all\nuser-related functions are in that context file. I hesitated with the domain\nvocabulary thinking that generic terms were going to be more flexible later.</p>\n<p>As the project evolved, that decision turned out to be a mistake</p>\n<p>Instead of something like this (using a generic term <code>Accounts</code> as the context):</p>\n<div class=\"gatsby-highlight\" data-language=\"elixir\"><pre class=\"language-elixir\"><code class=\"language-elixir\"><span class=\"token keyword\">defmodule</span> MyApp<span class=\"token punctuation\">.</span>Accounts <span class=\"token keyword\">do</span>\n  <span class=\"token keyword\">alias</span> MyApp<span class=\"token punctuation\">.</span>Accounts<span class=\"token punctuation\">.</span>User\n\n  <span class=\"token attribute variable\">@operator_role_id</span> <span class=\"token number\">2</span>\n  <span class=\"token attribute variable\">@supervisor_role_id</span> <span class=\"token number\">1</span>\n\n  <span class=\"token keyword\">def</span> list_operators<span class=\"token punctuation\">(</span>queryable <span class=\"token operator\">\\\\</span> User<span class=\"token punctuation\">)</span> <span class=\"token keyword\">do</span>\n    queryable <span class=\"token operator\">|></span> where<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>u<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> u<span class=\"token punctuation\">.</span>role_id <span class=\"token operator\">==</span> <span class=\"token operator\">^</span><span class=\"token attribute variable\">@operator_role</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">end</span>\n\n  <span class=\"token keyword\">def</span> list_supervisors<span class=\"token punctuation\">(</span>queryable <span class=\"token operator\">\\\\</span> User<span class=\"token punctuation\">)</span> <span class=\"token keyword\">do</span>\n    queryable <span class=\"token operator\">|></span> where<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>u<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> u<span class=\"token punctuation\">.</span>role_id <span class=\"token operator\">==</span> <span class=\"token operator\">^</span><span class=\"token attribute variable\">@supervisor_role</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">end</span>\n\n  <span class=\"token comment\"># ...</span>\n<span class=\"token keyword\">end</span></code></pre></div>\n<p>I could have done this (using domain vocabulary as context boundaries):</p>\n<div class=\"gatsby-highlight\" data-language=\"elixir\"><pre class=\"language-elixir\"><code class=\"language-elixir\"><span class=\"token keyword\">defmodule</span> MyApp<span class=\"token punctuation\">.</span>Operators <span class=\"token keyword\">do</span>\n  <span class=\"token keyword\">alias</span> MyApp<span class=\"token punctuation\">.</span>Accounts<span class=\"token punctuation\">.</span>User\n\n  <span class=\"token attribute variable\">@role_id</span> <span class=\"token number\">2</span>\n\n  <span class=\"token keyword\">def</span> list<span class=\"token punctuation\">(</span>queryable <span class=\"token operator\">\\\\</span> User<span class=\"token punctuation\">)</span> <span class=\"token keyword\">do</span>\n    queryable <span class=\"token operator\">|></span> where<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>u<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> u<span class=\"token punctuation\">.</span>role_id <span class=\"token operator\">==</span> <span class=\"token operator\">^</span><span class=\"token attribute variable\">@role_id</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">end</span>\n\n  <span class=\"token comment\"># ...</span>\n<span class=\"token keyword\">end</span>\n\n<span class=\"token comment\"># notice the namespace difference</span>\n<span class=\"token keyword\">defmodule</span> MyApp<span class=\"token punctuation\">.</span>Supervisors <span class=\"token keyword\">do</span>\n  <span class=\"token keyword\">alias</span> MyApp<span class=\"token punctuation\">.</span>Accounts<span class=\"token punctuation\">.</span>User\n\n  <span class=\"token attribute variable\">@role_id</span> <span class=\"token number\">1</span>\n\n  <span class=\"token keyword\">def</span> list<span class=\"token punctuation\">(</span>queryable <span class=\"token operator\">\\\\</span> User<span class=\"token punctuation\">)</span> <span class=\"token keyword\">do</span>\n    queryable <span class=\"token operator\">|></span> where<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>u<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> u<span class=\"token punctuation\">.</span>role_id <span class=\"token operator\">==</span> <span class=\"token operator\">^</span><span class=\"token attribute variable\">@role_id</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">end</span>\n\n  <span class=\"token comment\"># ...</span>\n<span class=\"token keyword\">end</span></code></pre></div>\n<p>This example is really simple, but it starts to show its strength later when you\nhave other conditionals and need to ask your data more questions.</p>\n<p>With the example above, I’d actually argue that having one combined context is\npreferable because it’s all we need—but, knowing how the application <strong>will</strong>\ngrow, and how a lot of questions are asked against the user’s role, then it’ll\nbe more apparent having the separated context <strong>will</strong> be helpful.</p>\n<div class=\"gatsby-highlight\" data-language=\"elixir\"><pre class=\"language-elixir\"><code class=\"language-elixir\"><span class=\"token keyword\">defmodule</span> MyApp<span class=\"token punctuation\">.</span>Operators <span class=\"token keyword\">do</span>\n  <span class=\"token keyword\">alias</span> MyApp<span class=\"token punctuation\">.</span>Activities<span class=\"token punctuation\">.</span>Event\n\n  <span class=\"token keyword\">def</span> update_event<span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">,</span> params<span class=\"token punctuation\">)</span> <span class=\"token keyword\">do</span>\n    event\n    <span class=\"token operator\">|></span> prepare_event<span class=\"token punctuation\">(</span>params<span class=\"token punctuation\">)</span>\n    <span class=\"token operator\">|></span> Repo<span class=\"token punctuation\">.</span>update\n  <span class=\"token keyword\">end</span>\n\n  <span class=\"token keyword\">def</span> prepare_event<span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">,</span> params<span class=\"token punctuation\">)</span> <span class=\"token keyword\">do</span>\n    event <span class=\"token operator\">|></span> Event<span class=\"token punctuation\">.</span>operator_changeset<span class=\"token punctuation\">(</span>params<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">end</span>\n\n  <span class=\"token comment\"># ...</span>\n<span class=\"token keyword\">end</span>\n\n<span class=\"token keyword\">defmodule</span> MyApp<span class=\"token punctuation\">.</span>Supervisors <span class=\"token keyword\">do</span>\n  <span class=\"token keyword\">alias</span> MyApp<span class=\"token punctuation\">.</span>Activities<span class=\"token punctuation\">.</span>Event\n\n  <span class=\"token keyword\">def</span> update_event<span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">,</span> params<span class=\"token punctuation\">)</span> <span class=\"token keyword\">do</span>\n    event\n    <span class=\"token operator\">|></span> prepare_event<span class=\"token punctuation\">(</span>params<span class=\"token punctuation\">)</span>\n    <span class=\"token operator\">|></span> Repo<span class=\"token punctuation\">.</span>update\n  <span class=\"token keyword\">end</span>\n\n  <span class=\"token comment\"># Notice that we're calling a different changeset</span>\n  <span class=\"token keyword\">def</span> prepare_event<span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">,</span> params<span class=\"token punctuation\">)</span> <span class=\"token keyword\">do</span>\n    event <span class=\"token operator\">|></span> Event<span class=\"token punctuation\">.</span>supervisor_changeset<span class=\"token punctuation\">(</span>params<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">end</span>\n\n  <span class=\"token comment\"># ...</span>\n<span class=\"token keyword\">end</span></code></pre></div>\n<p>Above we’re adding another function that has different permissions regarding\nwhat the user may update on an event. The <code>supervisor_changeset</code> will cast all\nparams, whereas the <code>operator_changeset</code> will cast only a subset of params. This\nwould also be reflected for preparing any forms in templates.</p>\n<p>All the above <em>requires</em> you to understand the vocabulary before building, which\nis the critique I usually hear about contexts: “It requires more up-front\ncognitive thought before I can be productive.” Prior to 1.3, not knowing domain\nup front might not hurt so much because it’s not built into the structure, but\nwith 1.3 and presumably later, it may hurt more. Despite that, it’s <em>totally</em>\nworth it.</p>\n<h3>Avoid the bloat<a name=\"bloated\"></a></h3>\n<p>Above, I glossed-over what contexts help us achieve: making interfaces between\nyour abstractions. A context (aka domain interface) will help organize actions.\nI <em>love</em> this.</p>\n<p>I decided in this experiment to <em>really</em> give contexts a go and roll with the\nphilosophy. At the same time, I <em>hated</em> the bloated context that it had become\nafter needing to interact with several schemas in the same context. At some\npoint, I had several hundred lines in a context file; it was easy to let the\ncontext file grow. <strong>RESIST</strong>. Use domain-related vocabulary to keep contexts\nsmall. I had to determine how to organize the code better.</p>\n<p>A technique that helped keep contexts small was to limit them a set of action\nverbs, like <code>list</code> <code>prepare</code> <code>create</code> <code>update</code> and <code>delete</code> (some semblance to\nCRUD actions). Outside of those verbs, I put them into supporting modules. For\nexample, <code>def list</code> actually hits the database and returns the list of things—\nit did not return an Ecto query that I could further modify. I saved those\nquery-building functions for a <code>Context.Query</code> module. This helped keep my\n<code>list</code> function simple, and helped me make composable queries.</p>\n<p>My controllers and other services then <em>only</em> call functions in context modules.</p>\n<p>For example:</p>\n<div class=\"gatsby-highlight\" data-language=\"elixir\"><pre class=\"language-elixir\"><code class=\"language-elixir\"><span class=\"token keyword\">defmodule</span> MyApp<span class=\"token punctuation\">.</span>Operators <span class=\"token keyword\">do</span>\n  <span class=\"token comment\"># MyApp.Accounts is now a namespace for schemas, not a context</span>\n  <span class=\"token keyword\">alias</span> MyApp<span class=\"token punctuation\">.</span>Accounts<span class=\"token punctuation\">.</span>User\n  <span class=\"token keyword\">alias</span> MyApp<span class=\"token punctuation\">.</span>Accounts<span class=\"token punctuation\">.</span>Role\n  <span class=\"token keyword\">alias</span> MyApp<span class=\"token punctuation\">.</span>Operators<span class=\"token punctuation\">.</span>Query\n\n  <span class=\"token keyword\">def</span> list<span class=\"token punctuation\">(</span>queryable <span class=\"token operator\">\\\\</span> User<span class=\"token punctuation\">)</span> <span class=\"token keyword\">do</span>\n    queryable\n    <span class=\"token operator\">|></span> Query<span class=\"token punctuation\">.</span>where_operator\n    <span class=\"token operator\">|></span> Repo<span class=\"token punctuation\">.</span>all\n  <span class=\"token keyword\">end</span>\n\n  <span class=\"token keyword\">def</span> list_by_latest_event<span class=\"token punctuation\">(</span>queryable <span class=\"token operator\">\\\\</span> User<span class=\"token punctuation\">)</span> <span class=\"token keyword\">do</span>\n    queryable\n    <span class=\"token operator\">|></span> Query<span class=\"token punctuation\">.</span>order_by_event_date\n    <span class=\"token operator\">|></span> list\n  <span class=\"token keyword\">end</span>\n\n  <span class=\"token keyword\">def</span> list_currently_assigned<span class=\"token punctuation\">(</span>queryable <span class=\"token operator\">\\\\</span> User<span class=\"token punctuation\">)</span> <span class=\"token keyword\">do</span>\n    queryable\n    <span class=\"token operator\">|></span> Query<span class=\"token punctuation\">.</span>where_assigned\n    <span class=\"token operator\">|></span> list\n  <span class=\"token keyword\">end</span>\n\n  <span class=\"token keyword\">def</span> list_currently_assigned_for_activity<span class=\"token punctuation\">(</span>queryable <span class=\"token operator\">\\\\</span> User<span class=\"token punctuation\">,</span> activity<span class=\"token punctuation\">)</span> <span class=\"token keyword\">do</span>\n    queryable\n    <span class=\"token operator\">|></span> Query<span class=\"token punctuation\">.</span>where_activity<span class=\"token punctuation\">(</span>activity<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span>\n    <span class=\"token operator\">|></span> list_currently_assigned\n  <span class=\"token keyword\">end</span>\n\n  <span class=\"token comment\"># ...</span>\n<span class=\"token keyword\">end</span>\n\n<span class=\"token keyword\">defmodule</span> MyApp<span class=\"token punctuation\">.</span>Operators<span class=\"token punctuation\">.</span>Query <span class=\"token keyword\">do</span>\n  <span class=\"token keyword\">import</span> Ecto<span class=\"token punctuation\">.</span>Query\n  <span class=\"token attribute variable\">@role_id</span> <span class=\"token number\">1</span>\n\n  <span class=\"token keyword\">def</span> where_operator<span class=\"token punctuation\">(</span>queryable<span class=\"token punctuation\">)</span> <span class=\"token keyword\">do</span>\n    queryable\n    <span class=\"token operator\">|></span> where<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>q<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> q<span class=\"token punctuation\">.</span>role_id <span class=\"token operator\">==</span> <span class=\"token operator\">^</span><span class=\"token attribute variable\">@role_id</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">end</span>\n\n  <span class=\"token keyword\">def</span> order_by_event_date<span class=\"token punctuation\">(</span>queryable<span class=\"token punctuation\">)</span> <span class=\"token keyword\">do</span>\n    queryable\n    <span class=\"token operator\">|></span> join<span class=\"token punctuation\">(</span><span class=\"token atom symbol\">:left</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>q<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> event <span class=\"token operator\">in</span> assoc<span class=\"token punctuation\">(</span>q<span class=\"token punctuation\">,</span> <span class=\"token atom symbol\">:event</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token operator\">|></span> order_by<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>_<span class=\"token punctuation\">,</span> event<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token attr-name\">desc:</span> event<span class=\"token punctuation\">.</span>inserted_at<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">end</span>\n\n  <span class=\"token keyword\">def</span> where_assigned<span class=\"token punctuation\">(</span>queryable<span class=\"token punctuation\">)</span> <span class=\"token keyword\">do</span>\n    queryable\n    <span class=\"token operator\">|></span> where<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>q<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> is_nil<span class=\"token punctuation\">(</span>q<span class=\"token punctuation\">.</span>unassigned_at<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">end</span>\n\n  <span class=\"token keyword\">def</span> where_activity<span class=\"token punctuation\">(</span>queryable<span class=\"token punctuation\">,</span> activity<span class=\"token punctuation\">)</span> <span class=\"token keyword\">do</span>\n    queryable\n    <span class=\"token operator\">|></span> join<span class=\"token punctuation\">(</span><span class=\"token atom symbol\">:inner</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>q<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> assignment <span class=\"token operator\">in</span> assoc<span class=\"token punctuation\">(</span>q<span class=\"token punctuation\">,</span> <span class=\"token atom symbol\">:assignments</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token operator\">|></span> where<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>_<span class=\"token punctuation\">,</span> assignment<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> assignment<span class=\"token punctuation\">.</span>activity_id <span class=\"token operator\">==</span> <span class=\"token operator\">^</span>activity_id<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">end</span>\n<span class=\"token keyword\">end</span></code></pre></div>\n<p>This has been my preferred way of organizing code so far. It encourages less\ngod-modules that I’ve learned to dislike so much. I believe that Phoenix will\nneed to be more careful about their generators accidentally encouraging\ngod-modules, lest they start to look like monolith Rails applications with\nmodels that know too much about the application, except now in a context.</p>\n<p><a name=\"maybeumbrella\"></a></p>\n<h3>Consider Before Umbrellas</h3>\n<p>Elixir allows applications to live in umbrellas, which is an awesome concept. If\nyou’re not familiar with umbrellas, <a href=\"https://elixir-lang.org/getting-started/mix-otp/dependencies-and-umbrella-apps.html\">read up about\nit</a>.\nWhat I love about umbrellas is that it allows me to draw boundaries between\nrelated applications. This is difficult to do in other frameworks and languages,\nso the fact that <code>mix</code> gives this tool for free is <em>incredible</em>. Before I heard\nabout Phoenix contexts, I was drawn to organize my application via umbrellas\nbecause I didn’t see other tools that made it easy.</p>\n<p>Umbrellas, in a sense, help accomplish the same thing as contexts: it helps you\ndraw boundaries. The difference is that umbrella applications are about\nseparating applications instead of APIs.</p>\n<p>A lot of typical web applications don’t need separated sub-applications. If\nyou’re considering one, determine if having separately-deployable applications\nfixes or avoids problems, or if the boundaries need to be large enough to\ndeserve a separation. Avoid jumping to umbrellas like I did earlier if you only\nneed to organize yourself.</p>\n<p><a href=\"https://youtu.be/tMO28ar0lW8?t=27m54s\">Chris gives some good examples of when umbrellas could be a good\noption</a></p>\n<h2>Give It a Shot<a name=\"giveitago\"></a></h2>\n<p>At thoughtbot, we pride ourselves in the practices of designing experiences, and\n<em>then</em> developing; <a href=\"https://thoughtbot.com/playbook\">that’s what makes thoughtbot\ndifferent</a>. That process also helps establish\nwhere these boundaries are up front, and it’s up to the artist to determine\nwhether it’s a new context, just a new schema, maybe a new application\naltogether, maybe a support module, or none of the above.  Regardless, I believe\nPhoenix 1.3 teaches <em>great</em> ideas that will win in the long run and make\ndevelopers think before doing.</p>","frontmatter":{"title":"Lessons From Using Phoenix 1.3","date":"August 01, 2017","tags":["elixir"],"originalUrl":"https://robots.thoughtbot.com/lessons-from-using-phoenix-1-3"}}},"pageContext":{"slug":"/blog/lessons-from-using-phoenix-1-3/","previous":{"fields":{"slug":"/blog/simple-phoenix-text-inputs-with-formulator/"},"frontmatter":{"title":"Simple Phoenix Text Inputs with Formulator","tags":["elixir"],"originalUrl":"https://robots.thoughtbot.com/simple-phoenix-text-inputs-with-formulator","excerpt":null}},"next":{"fields":{"slug":"/blog/testing-emails-with-bamboo/"},"frontmatter":{"title":"Testing Random Data in Emails with Bamboo","tags":["elixir"],"originalUrl":"https://robots.thoughtbot.com/testing-emails-with-bamboo","excerpt":null}}}}}