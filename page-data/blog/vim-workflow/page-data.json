{"componentChunkName":"component---src-templates-blog-post-js","path":"/blog/vim-workflow/","result":{"data":{"site":{"siteMetadata":{"title":"David Bernheisel","author":"David Bernheisel"}},"markdownRemark":{"id":"de95679a-bff6-51f7-9cd3-bc06a45f0594","excerpt":"I realized that I love my VIM workflow, so I want to share that with you.\nI am by-no-means a VIM expert or purist â€” my neovim files are notâ€¦","timeToRead":6,"html":"<p>I realized that I love my VIM workflow, so I want to share that with you.\nI am by-no-means a VIM expert or purist â€” my <a href=\"https://neovim.io\">neovim</a> files are not slim and\nare a melting pot of stolen code from others, sometimes modified or not,\nsometimes found in GitHub comments, sometimes found in othersâ€™ dotfiles, or\nReddit comments.</p>\n<p>If you develop in Ruby or Elixir or write Markdown, you might find this helpful!</p>\n<p>Letâ€™s start with some basics:</p>\n<h2>Environment</h2>\n<ul>\n<li><a href=\"https://neovim.io\">neovim</a> - right now Iâ€™m using 0.4.0 so I can use floating windows.</li>\n<li><a href=\"https://sw.kovidgoyal.net/kitty/\">kitty</a> Terminal Emulator</li>\n<li>built-in terminal in neovim</li>\n<li><a href=\"https://www.archlinux.org\">ArchLinux</a> - My distro of choice. Shouldnâ€™t matter for this article.</li>\n<li><a href=\"https://github.com/Airblader/i3\">i3</a> - My window manager. Shouldnâ€™t matter for this article.</li>\n<li><a href=\"https://github.com/junegunn/vim-plug\">Plug</a> - for managing neovim plugins.</li>\n<li><a href=\"https://github.com/neoclide/coc.nvim\">nvim-coc</a> for languageserver integration.</li>\n<li><a href=\"https://github.com/dbernheisel/dotfiles\">dotfiles</a> - My dotfiles if you want the complete picture</li>\n</ul>\n<p>There are three ways that I can split my workspace: (1) via my window manager\n<a href=\"https://github.com/Airblader/i3\">i3</a>, (2) via my terminal emulator <a href=\"https://sw.kovidgoyal.net/kitty/\">kitty</a>, (3) via <a href=\"https://neovim.io\">neovim</a> with\nsplits/buffers. Generally I adhere to this practice:</p>\n<ol>\n<li>Split with i3 if itâ€™s an application, especially a GUI app. This gives me\nthe ability to move the window to another desktop if I want.</li>\n<li>Split with built-in neovim terminal for tests.</li>\n<li>Donâ€™t split with kitty ever. Itâ€™d be too confusing for me to have 3 sets of\nkeyboard shortcuts to keep track of for switching windows/panes/splits.\nMaybe one day Iâ€™ll replace the built-in neovim terminal with a kitty split\nor an i3 split.</li>\n</ol>\n<h2>Testing</h2>\n<p>I use <a href=\"https://github.com/janko/vim-test\">vim-test</a> and itâ€™s pretty incredible. I picked this workflow up while\nworking at thoughtbot from some good friends and the <a href=\"https://github.com/thoughtbot/dotfiles\">thoughtbot dotfiles</a>,\nand it changed the way I code. The whole TDD workflow is great despite that I\nstill have trouble actually writing tests first - I tend to spike, iterate,\niterate, THEN write tests, then open a PR. Yeaâ€” this probably means Iâ€™m not a\n10x developer ðŸ˜›</p>\n<p>I also use neoterm to help open up terminal splits. When Iâ€™m at home, I have an\nultrawide that I use so splitting windows vertically is the way to go; but when\nIâ€™m mobile with my laptop then I typically split horizontally. I want tests to\nbe visible either way, so I need this to be flexible.</p>\n<p>The vim-test neoterm strategy defaults to sending tests to the last-used neoterm\nbuffer; I can have more terminal buffers, but the first one I open is what\nvim-test will use going forward.</p>\n<p>Hereâ€™s how I configure vim-test with neoterm. (my <a href=\"https://github.com/dbernheisel/dotfiles\">dotfiles</a> for reference)</p>\n<pre class=\"grvsc-container atom-one-light grvsc-mm-t88nfI\" data-language=\"vim\" data-index=\"0\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-t5WxC3-7 grvsc-t5WxC3-i grvsc-t88nfI-3\">&quot; ~/.config/nvim/init.vim</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-t5WxC3-7 grvsc-t5WxC3-i grvsc-t88nfI-3\">&quot; Test</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-t5WxC3-10 grvsc-t88nfI-6\">let g:test#strategy = &quot;neoterm&quot;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-t5WxC3-10 grvsc-t88nfI-6\">let g:neoterm_shell = &#39;$SHELL -l&#39; &quot; use the login shell</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-t5WxC3-10 grvsc-t88nfI-6\">let g:neoterm_default_mod = &#39;vert&#39;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-t5WxC3-10 grvsc-t88nfI-6\">let g:neoterm_autoscroll = 1      &quot; autoscroll to the bottom when entering insert mode</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-t5WxC3-10 grvsc-t88nfI-6\">let g:neoterm_size = 80</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-t5WxC3-10 grvsc-t88nfI-6\">let g:neoterm_fixedsize = 1       &quot; fixed size. The autosizing was wonky for me</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-t5WxC3-10 grvsc-t88nfI-6\">let g:neoterm_keep_term_open = 0  &quot; when buffer closes, exit the terminal too.</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-t5WxC3-10 grvsc-t88nfI-6\">let test#ruby#rspec#options = { &#39;suite&#39;: &#39;--profile 5&#39; }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-t5WxC3-7 grvsc-t5WxC3-i grvsc-t88nfI-3\">&quot; Create some commands that makes the splits easy</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-t5WxC3-10 grvsc-t88nfI-6\">function! OpenTermV(...)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-t5WxC3-10 grvsc-t88nfI-6\">  let g:neoterm_size = 80</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-t5WxC3-10 grvsc-t88nfI-6\">  let l:cmd = a:1 == &#39;&#39; ? &#39;pwd&#39; : a:1</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-t5WxC3-10 grvsc-t88nfI-6\">  execute &#39;vert T &#39;.l:cmd</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-t5WxC3-10 grvsc-t88nfI-6\">endfunction</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-t5WxC3-10 grvsc-t88nfI-6\">function! OpenTermH(...)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-t5WxC3-10 grvsc-t88nfI-6\">  let g:neoterm_size = 10</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-t5WxC3-10 grvsc-t88nfI-6\">  let l:cmd = a:1 == &#39;&#39; ? &#39;pwd&#39; : a:1</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-t5WxC3-10 grvsc-t88nfI-6\">  execute &#39;belowright T &#39;.l:cmd</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-t5WxC3-10 grvsc-t88nfI-6\">endfunction</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-t5WxC3-10 grvsc-t88nfI-6\">command! -nargs=? VT call OpenTermV(&lt;q-args&gt;)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-t5WxC3-10 grvsc-t88nfI-6\">command! -nargs=? HT call OpenTermH(&lt;q-args&gt;)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-t5WxC3-7 grvsc-t5WxC3-i grvsc-t88nfI-3\">&quot; Use the project&#39;s test suite script if it exists</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-t5WxC3-10 grvsc-t88nfI-6\">function! RunTestSuite()</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-t5WxC3-10 grvsc-t88nfI-6\">  Tclear</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-t5WxC3-10 grvsc-t88nfI-6\">  if filereadable(&#39;bin/test_suite&#39;)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-t5WxC3-10 grvsc-t88nfI-6\">    T echo &#39;bin/test_suite&#39;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-t5WxC3-10 grvsc-t88nfI-6\">    T bin/test_suite</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-t5WxC3-10 grvsc-t88nfI-6\">  elseif filereadable(&quot;bin/test&quot;)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-t5WxC3-10 grvsc-t88nfI-6\">    T echo &#39;bin/test&#39;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-t5WxC3-10 grvsc-t88nfI-6\">    T bin/test</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-t5WxC3-10 grvsc-t88nfI-6\">  else</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-t5WxC3-10 grvsc-t88nfI-6\">    TestSuite</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-t5WxC3-10 grvsc-t88nfI-6\">  endif</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-t5WxC3-10 grvsc-t88nfI-6\">endfunction</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-t5WxC3-9 grvsc-t88nfI-5\">nmap</span><span class=\"grvsc-t5WxC3-10 grvsc-t88nfI-6\"> &lt;silent&gt; &lt;leader&gt;t :call TestNearest&lt;CR&gt;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-t5WxC3-9 grvsc-t88nfI-5\">nmap</span><span class=\"grvsc-t5WxC3-10 grvsc-t88nfI-6\"> &lt;silent&gt; &lt;leader&gt;T :call TestFile&lt;CR&gt;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-t5WxC3-9 grvsc-t88nfI-5\">nmap</span><span class=\"grvsc-t5WxC3-10 grvsc-t88nfI-6\"> &lt;silent&gt; &lt;leader&gt;a :call RunTestSuite()&lt;CR&gt;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-t5WxC3-9 grvsc-t88nfI-5\">nmap</span><span class=\"grvsc-t5WxC3-10 grvsc-t88nfI-6\"> &lt;silent&gt; &lt;leader&gt;l :call TestLast&lt;CR&gt;</span></span></span></code></pre>\n<p>Iâ€™ve found it conventional to have a <code>bin/test_suite</code> or <code>bin/test</code> script in\nthe project that takes care of a lot of details like environment exports,\ncleanup, or making sure the test environmentâ€™s database is setup as well as\nrunning all the tests. Even if the test suite isnâ€™t complicated, itâ€™s still\nhelpful for new developers on the project.</p>\n<p>If that script is present and when I want to run all tests, I should execute\nthat file; otherwise use the default vim-test suite command. For non-suite\ntests, I use the default vim-test commands.</p>\n<p><code>&#x3C;space>a</code> triggers <strong>a</strong>ll tests. If a neoterm split isnâ€™t open,\nthen itâ€™ll automatically open one with the default settingsâ€” in my case, a\nvertical split at 80 columns wide. If a neoterm split is already open, then\nitâ€™ll send the test to that split. In situations where my vertical space is\nlacking, I prep by opening up a split, and then hit my test shortcut. <code>:HT</code> to\nopen the terminal up.</p>\n<p>If Iâ€™m testing a method or function, then <code>&#x3C;space>t</code> to send the nearest\n<strong>t</strong>est to it. If Iâ€™m trying to make a test pass, Iâ€™ll modify the code and then\n<code>&#x3C;space>l</code> to run the <strong>l</strong>ast test. If Iâ€™m refactoring a class or module, Iâ€™ll\nrun all the <strong>T</strong>ests for it. I havenâ€™t found myself using vim-testâ€™s TestVisit.\nIf you have some examples on where that command helps, Iâ€™d love to hear it!</p>\n<p><a href=\"https://asciinema.org/a/gs6r5QlC8oR8HPNYhRPDypY6n\"><img src=\"https://asciinema.org/a/gs6r5QlC8oR8HPNYhRPDypY6n.svg\" alt=\"asciicast\"></a></p>\n<h2>Transformations</h2>\n<p>This is a great start! But eventually there might be a pesky app where I need to\nopt-into an environment variable, but only when Iâ€™m running a small number of\ntests. vim-test lets me define my own transformations to the commands. I can\ncheck for a certain file and string in it to determine what project Iâ€™m in. If\nIâ€™m in that project, then change the command where I can.</p>\n<pre class=\"grvsc-container atom-one-light grvsc-mm-t88nfI\" data-language=\"vim\" data-index=\"1\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-t5WxC3-7 grvsc-t5WxC3-i grvsc-t88nfI-3\">&quot; ~/.config/nvim/after/ftplugin/ruby.vim</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-t5WxC3-10 grvsc-t88nfI-6\">function! MyAppRspec(cmd) abort</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-t5WxC3-10 grvsc-t88nfI-6\">  &quot; If I&#39;m in the pesky app and</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-t5WxC3-10 grvsc-t88nfI-6\">  &quot; not running the entire test suite indicated by the --profile flag</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-t5WxC3-10 grvsc-t88nfI-6\">  &quot; Add the SKIP_FIXTURES env var.</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-t5WxC3-10 grvsc-t88nfI-6\">  call system(&quot;cat README.md | grep &#39;MyApp&#39;&quot;)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-t5WxC3-10 grvsc-t88nfI-6\">  if match(a:cmd, &#39;--profile&#39;) == -1 &amp;&amp; v:shell_error == 0</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-t5WxC3-10 grvsc-t88nfI-6\">    return substitute(a:cmd, &#39;bundle exec&#39;, &#39;SKIP_FIXTURES=true bundle exec&#39;, &#39;&#39;)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-t5WxC3-10 grvsc-t88nfI-6\">  else</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-t5WxC3-10 grvsc-t88nfI-6\">    return a:cmd</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-t5WxC3-10 grvsc-t88nfI-6\">  endif</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-t5WxC3-10 grvsc-t88nfI-6\">endfunction</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-t5WxC3-10 grvsc-t88nfI-6\">let g:test#custom_transformations = {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-t5WxC3-10 grvsc-t88nfI-6\">      \\ &#39;myapp_ruby&#39;: function(&#39;MyAppRspec&#39;)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-t5WxC3-10 grvsc-t88nfI-6\">      \\ }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-t5WxC3-10 grvsc-t88nfI-6\">let g:test#transformation = &#39;myapp_ruby&#39;</span></span></span></code></pre>\n<p>On the Elixir side, umbrella apps can be a little tricky. vim-test will send the\npath of the test to <code>mix test {file}</code>, but <code>mix</code> will run that command for each\nof the apps in the umbrella. Thatâ€™s probably not what we want to do since that\ntest exists for only one for apps. Again, we can solve it with a transformation.</p>\n<pre class=\"grvsc-container atom-one-light grvsc-mm-t88nfI\" data-language=\"vim\" data-index=\"2\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-t5WxC3-7 grvsc-t5WxC3-i grvsc-t88nfI-3\">&quot; ~/.config/nvim/after/ftplugin/elixir.vim</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-t5WxC3-10 grvsc-t88nfI-6\">function! ElixirUmbrellaTransform(cmd) abort</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-t5WxC3-10 grvsc-t88nfI-6\">  &quot; if in an umbrella project indicated by the existence of an ./apps folder</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-t5WxC3-10 grvsc-t88nfI-6\">  &quot; limit the mix command to the app to which the test belongs</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-t5WxC3-10 grvsc-t88nfI-6\">  if match(a:cmd, &#39;apps/&#39;) != -1</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-t5WxC3-10 grvsc-t88nfI-6\">    &quot; capture the app from the file path, and send it to the --app flag instead</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-t5WxC3-10 grvsc-t88nfI-6\">    return substitute(a:cmd, &#39;mix test apps/\\([^/]*\\)/&#39;, &#39;mix cmd --app \\1 mix test --color &#39;, &#39;&#39;)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-t5WxC3-10 grvsc-t88nfI-6\">  else</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-t5WxC3-10 grvsc-t88nfI-6\">    return a:cmd</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-t5WxC3-10 grvsc-t88nfI-6\">  end</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-t5WxC3-10 grvsc-t88nfI-6\">endfunction</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-t5WxC3-10 grvsc-t88nfI-6\">let g:test#custom_transformations = {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-t5WxC3-10 grvsc-t88nfI-6\">       \\ &#39;elixir_umbrella&#39;: function(&#39;ElixirUmbrellaTransform&#39;)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-t5WxC3-10 grvsc-t88nfI-6\">       \\ }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-t5WxC3-10 grvsc-t88nfI-6\">let g:test#transformation = &#39;elixir_umbrella&#39;</span></span></span></code></pre>\n<p>Thatâ€™s it for tests!</p>\n<p>Hope you picked up something nifty. If you have any tips for me, send them my\nway <a href=\"https://twitter.com/bernheisel\">@bernheisel</a></p>\n<style class=\"grvsc-styles\">\n  .grvsc-container {\n    overflow: auto;\n    position: relative;\n    -webkit-overflow-scrolling: touch;\n    padding-top: 1rem;\n    padding-top: var(--grvsc-padding-top, var(--grvsc-padding-v, 1rem));\n    padding-bottom: 1rem;\n    padding-bottom: var(--grvsc-padding-bottom, var(--grvsc-padding-v, 1rem));\n    border-radius: 8px;\n    border-radius: var(--grvsc-border-radius, 8px);\n    font-feature-settings: normal;\n    line-height: 1.4;\n  }\n  \n  .grvsc-code {\n    display: table;\n  }\n  \n  .grvsc-line {\n    display: table-row;\n    box-sizing: border-box;\n    width: 100%;\n    position: relative;\n  }\n  \n  .grvsc-line > * {\n    position: relative;\n  }\n  \n  .grvsc-gutter-pad {\n    display: table-cell;\n    padding-left: 0.75rem;\n    padding-left: calc(var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem)) / 2);\n  }\n  \n  .grvsc-gutter {\n    display: table-cell;\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    user-select: none;\n  }\n  \n  .grvsc-gutter::before {\n    content: attr(data-content);\n  }\n  \n  .grvsc-source {\n    display: table-cell;\n    padding-left: 1.5rem;\n    padding-left: var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem));\n    padding-right: 1.5rem;\n    padding-right: var(--grvsc-padding-right, var(--grvsc-padding-h, 1.5rem));\n  }\n  \n  .grvsc-source:empty::after {\n    content: ' ';\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    user-select: none;\n  }\n  \n  .grvsc-gutter + .grvsc-source {\n    padding-left: 0.75rem;\n    padding-left: calc(var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem)) / 2);\n  }\n  \n  /* Line transformer styles */\n  \n  .grvsc-has-line-highlighting > .grvsc-code > .grvsc-line::before {\n    content: ' ';\n    position: absolute;\n    width: 100%;\n  }\n  \n  .grvsc-line-diff-add::before {\n    background-color: var(--grvsc-line-diff-add-background-color, rgba(0, 255, 60, 0.2));\n  }\n  \n  .grvsc-line-diff-del::before {\n    background-color: var(--grvsc-line-diff-del-background-color, rgba(255, 0, 20, 0.2));\n  }\n  \n  .grvsc-line-number {\n    padding: 0 2px;\n    text-align: right;\n    opacity: 0.7;\n  }\n  \n  .atom-one-light {\n    background-color: #FAFAFA;\n    color: #383A42;\n  }\n  .atom-one-light .grvsc-t5WxC3-i { font-style: italic; }\n  .atom-one-light .grvsc-t5WxC3-7 { color: #A0A1A7; }\n  .atom-one-light .grvsc-t5WxC3-10 { color: #50A14F; }\n  .atom-one-light .grvsc-t5WxC3-9 { color: #4078F2; }\n  .atom-one-light .grvsc-line-highlighted::before {\n    background-color: var(--grvsc-line-highlighted-background-color, rgba(0, 0, 0, 0.05));\n    box-shadow: inset var(--grvsc-line-highlighted-border-width, 4px) 0 0 0 var(--grvsc-line-highlighted-border-color, rgba(0, 0, 0, 0.2));\n  }\n  \n  /* Monokai Phoenix */\n  @media (prefers-color-scheme: dark) {\n    .grvsc-mm-t88nfI {\n      background-color: #1e1e1e;\n      color: #F8F8F2;\n    }\n    .grvsc-mm-t88nfI .grvsc-t88nfI-3 { color: #75715E; }\n    .grvsc-mm-t88nfI .grvsc-t88nfI-6 { color: #E6DB74; }\n    .grvsc-mm-t88nfI .grvsc-t88nfI-5 { color: #A6E22E; }\n    .grvsc-mm-t88nfI .grvsc-line-highlighted::before {\n      background-color: var(--grvsc-line-highlighted-background-color, rgba(255, 255, 255, 0.1));\n      box-shadow: inset var(--grvsc-line-highlighted-border-width, 4px) 0 0 0 var(--grvsc-line-highlighted-border-color, rgba(255, 255, 255, 0.5));\n    }\n  }\n</style>","frontmatter":{"title":"VIM Testing and Workflow","date":"August 28, 2019","tags":["elixir","ruby","vim"],"originalUrl":null}}},"pageContext":{"slug":"/blog/vim-workflow/","previous":{"fields":{"slug":"/blog/httpoison-decompression/"},"frontmatter":{"title":"HTTPoison and Decompression","tags":["elixir"],"originalUrl":null,"excerpt":"I learned the hard way that the popular HTTP client for Elixir doesn't\nautomatically decompress or re-encode responses. I had to fix it myself.\n"}},"next":{"fields":{"slug":"/blog/date-time-parser-podcast/"},"frontmatter":{"title":"DateTimeParser on Elixir Mix podcast","tags":["elixir","podcast"],"originalUrl":null,"excerpt":"I was invited to talk on the Elixir Mix podcast. We talked about the Elixir\ncommunity, how to contribute, and the DateTimeParser library I released.\n"}}}}}