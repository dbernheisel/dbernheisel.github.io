{"componentChunkName":"component---src-templates-blog-post-js","path":"/blog/phoenix-liveview-and-views/","result":{"data":{"site":{"siteMetadata":{"title":"David Bernheisel","author":"David Bernheisel"}},"markdownRemark":{"id":"8de2007a-8d69-5891-86ea-b9fb2bca4951","excerpt":"I’ve written a couple LiveView applications now, Elixir Regex Tester A request logger, much like Phoenix Live Dashboard’s An internal…","timeToRead":13,"html":"<p>I’ve written a couple LiveView applications now,</p>\n<ol>\n<li><a href=\"https://elixir-utilities.herokuapp.com\">Elixir Regex Tester</a></li>\n<li>A request logger, much like <a href=\"https://github.com/phoenixframework/phoenix_live_dashboard\">Phoenix Live Dashboard</a>’s</li>\n<li>An internal webmail server, for me to receive and send email through\nSendGrid. I hope to open-source this soon when it’s ready.</li>\n<li>Another private work-related project.</li>\n</ol>\n<p>Everytime I build one, I learn something new and find a new pattern, and some\nconcept finally <em>clicks</em>. Today, that concept that cemented in my mind is how\nPhoenix and Phoenix LiveView renders templates.</p>\n<p>I want to show you a couple different View-rendering strategies. This should\nhelp you decide which strategy to use.</p>\n<p>All of these strategies work, this is purely about opinionated code organizing,\n<em>but who doesn’t love reading opinions</em>? Plus we’ll learn how the views are\nrendered.</p>\n<h2>TLDR</h2>\n<p>Glossary of examples:</p>\n<ol>\n<li><code class=\"language-text\">MyLive</code> = The LiveView module</li>\n<li><code class=\"language-text\">MyView</code> = The standard Phoenix View module, not a LiveView.</li>\n<li><code class=\"language-text\">my_live.html.leex</code> = The template rendered by <code class=\"language-text\">MyLive</code> or <code class=\"language-text\">MyView</code></li>\n</ol>\n<p><strong>If you have a simple LiveView</strong>, then you can implement <code class=\"language-text\">render(assigns)</code>\nand inline your html with the <code class=\"language-text\">~L</code> sigil. No <code class=\"language-text\">my_live.html.leex</code> file needed.</p>\n<p><strong>If you have a LiveView with lots of HTML</strong>, then you should use the standard\nLiveView placement, and put your <code class=\"language-text\">my_live.ex</code> and <code class=\"language-text\">my_live.html.leex</code> next to\neach other under <code class=\"language-text\">lib/my_app_web/live</code>. You don’t need to define <code class=\"language-text\">render/1</code>\nbecause the default will work. Omit it.</p>\n<p><strong>If you have a LiveView with lots of HTML helper functions</strong> that you want to\nseparate from business logic in the LiveView:</p>\n<ol>\n<li>Add your own standard Phoenix view <code class=\"language-text\">MyView</code> (or a better name).</li>\n<li>Move your <code class=\"language-text\">my_live.html.leex</code> file to the standard Phoenix locations (ie,\n<code class=\"language-text\">lib/my_app_web/templates/my</code>).</li>\n<li>Implement your own <code class=\"language-text\">render(assigns)</code> that calls\n<code class=\"language-text\">MyAppWeb.MyView.render(&quot;my_live.html&quot;, assigns)</code>. Phoenix LiveView will\nstill work just fine; just remember to keep the html file named with an\n<code class=\"language-text\">.html.leex</code> extension so the LiveView rendering engine kicks in.</li>\n</ol>\n<p><strong>Remember that you can create shared Views</strong>. Alternatively to above, if your\nhelpers are used across multiple views and more generic, you can create a plain\nmodule that encapsulates your HTML helpers. I usually call mine <code class=\"language-text\">ComponentView</code>\nand use it inside my any of my templates, for example:\n<code class=\"language-text\">Component.primary_button(&quot;My Link&quot;, to: &quot;yadayada&quot;)</code>.</p>\n<p><strong>If you want to use a regular View, but co-locate the template to the LiveView module</strong>,\nas in you don’t want to go back to the vanilla Phoenix file structure but still\nneed a separate <code class=\"language-text\">MyView</code> for your HTML helpers, you can specify the root\nfolder and path to look in when creating your <code class=\"language-text\">MyView</code> by supplying an option:\n<code class=\"language-text\">use Phoenix.View, root: &quot;lib/my_app_web/live&quot;, path: &quot;&quot;</code>. This is <a href=\"https://hexdocs.pm/phoenix/Phoenix.View.html#__using__/1-options\">explained in the\n<code class=\"language-text\">Phoenix.View</code>\ndocs</a>. This\ncan be wrapped up into a convenience macro though. Read on for more info.</p>\n<p><strong>This totally ignores LiveComponent</strong> as an option. If your LiveView can be\nbroken up into interactive components, then breaking out into a LiveComponent is\na good option to look into and works just like a LiveView. For the purpose of\nthis post and exploring how rendering works, we’re going to treat LiveComponents\nthe same as a LiveView.</p>\n<h2>ToC</h2>\n<ul>\n<li><a href=\"#default-phoenix\">Phoenix Controller/View/Template</a></li>\n<li><a href=\"#default-liveview\">Phoenix LiveView with a template Part 1</a></li>\n<li><a href=\"#pluggy-controllers\">Pluggy Controllers</a></li>\n<li><a href=\"#default-liveview\">Phoenix LiveView with a template Part 2</a></li>\n<li><a href=\"#liveview-inline\">Phoenix LiveView with an inline template</a></li>\n<li><a href=\"#liveview-external\">Phoenix LiveView with an external template</a></li>\n</ul>\n<p><a name=\"default-phoenix\"></a></p>\n<h2>Default Phoenix Controller/View/Template</h2>\n<p>First, to remember where we came from, I want to show a standard Phoenix\nController/View/Template pattern. There are several modules involved that the\n<code class=\"language-text\">Plug.Conn</code> travels through in order to turn into a response for the end-user.</p>\n<ol>\n<li>Incoming request via <code class=\"language-text\">:cowboy</code></li>\n<li>Endpoint</li>\n<li>Router</li>\n<li>Controller</li>\n<li>View</li>\n<li>Template (not a module)</li>\n<li>Outgoing response via <code class=\"language-text\">:cowboy</code></li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"elixir\"><pre class=\"language-elixir\"><code class=\"language-elixir\"><span class=\"token comment\">### Router - lib/my_app_web/router.ex</span>\n<span class=\"token keyword\">defmodule</span> MyAppWeb<span class=\"token punctuation\">.</span>Router <span class=\"token keyword\">do</span>\n  <span class=\"token keyword\">use</span> MyAppWeb<span class=\"token punctuation\">,</span> <span class=\"token atom symbol\">:router</span>\n\n  <span class=\"token comment\"># ...snip...</span>\n  scope <span class=\"token string\">\"/\"</span><span class=\"token punctuation\">,</span> MyAppWeb <span class=\"token keyword\">do</span>\n    pipe_through <span class=\"token atom symbol\">:browser</span>\n\n    get <span class=\"token string\">\"/\"</span><span class=\"token punctuation\">,</span> PageController<span class=\"token punctuation\">,</span> <span class=\"token atom symbol\">:home</span>\n  <span class=\"token keyword\">end</span>\n  <span class=\"token comment\"># ...snip...</span>\n<span class=\"token keyword\">end</span>\n\n\n<span class=\"token comment\">### Controller - lib/my_app_web/controllers/page_controller.ex</span>\n<span class=\"token keyword\">defmodule</span> MyAppWeb<span class=\"token punctuation\">.</span>PageController <span class=\"token keyword\">do</span>\n  <span class=\"token keyword\">use</span> MyAppWeb<span class=\"token punctuation\">,</span> <span class=\"token atom symbol\">:controller</span>  <span class=\"token comment\">#&lt;-- injects some logic to handle receiving</span>\n  <span class=\"token comment\"># the conn and passing the conn on to cowboy</span>\n\n  <span class=\"token keyword\">def</span> home<span class=\"token punctuation\">(</span>conn<span class=\"token punctuation\">,</span> _params<span class=\"token punctuation\">)</span> <span class=\"token keyword\">do</span>\n    render<span class=\"token punctuation\">(</span>conn<span class=\"token punctuation\">,</span> <span class=\"token string\">\"home.html\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">end</span>\n<span class=\"token keyword\">end</span>\n\n\n<span class=\"token comment\">### View - lib/my_app_web/views/page_view.ex</span>\n<span class=\"token keyword\">defmodule</span> MyAppWeb<span class=\"token punctuation\">.</span>PageView <span class=\"token keyword\">do</span>\n  <span class=\"token keyword\">use</span> MyAppWeb<span class=\"token punctuation\">,</span> <span class=\"token atom symbol\">:view</span>  <span class=\"token comment\">#&lt;-- injects some logic to handle evaluating</span>\n  <span class=\"token comment\"># the embedded elixir in your templates</span>\n<span class=\"token keyword\">end</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token comment\">&lt;!-- Template - lib/my_app_web/templates/page/home.html.eex\nWe're going to ignore the layout stuff for now. Just know that it's\nalso evaluated and this template is a part of it --></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span>Yo! You're rendering the home page<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>In my mind, the template is the end of the show, though that’s not technically\ncorrect; the real <strong>end of the line is the controller</strong>. The controller is using\nthe view module to evaluate the HTML and puts the result into the Plug.Conn’s\n<code class=\"language-text\">resp_body</code>. The controller terminates the flow and the\nonce-a-request-and-now-a-response <code class=\"language-text\">Plug.Conn</code> is returned to the to the\nunderlying web server, which is probably cowboy, which delivers the payload to\nthe end-user through the HTTP connection.</p>\n<p><a name=\"default-liveview\"></a></p>\n<h2>Default Phoenix LiveView without <code class=\"language-text\">render/1</code></h2>\n<p>We’re here to learn about LiveView though, so let’s see an example of a LiveView\nwithout a <code class=\"language-text\">render/1</code> function.</p>\n<div class=\"gatsby-highlight\" data-language=\"elixir\"><pre class=\"language-elixir\"><code class=\"language-elixir\"><span class=\"token comment\">### lib/my_app_web/live/my_live.ex</span>\n<span class=\"token keyword\">defmodule</span> MyAppWeb<span class=\"token punctuation\">.</span>MyLive <span class=\"token keyword\">do</span>\n  <span class=\"token keyword\">use</span> MyAppWeb<span class=\"token punctuation\">,</span> <span class=\"token atom symbol\">:live_view</span>\n\n  <span class=\"token attribute variable\">@impl</span> Phoenix<span class=\"token punctuation\">.</span>LiveView\n  <span class=\"token keyword\">def</span> mount<span class=\"token punctuation\">(</span>_params<span class=\"token punctuation\">,</span> _session<span class=\"token punctuation\">,</span> socket<span class=\"token punctuation\">)</span> <span class=\"token keyword\">do</span>\n    <span class=\"token comment\"># do stuff</span>\n\n    <span class=\"token punctuation\">{</span><span class=\"token atom symbol\">:ok</span><span class=\"token punctuation\">,</span> socket<span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">end</span>\n<span class=\"token keyword\">end</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token comment\">&lt;!-- lib/my_app_web/live/my_live.html.leex --></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span>Yo! I'm rendered by a LiveView<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>Ok, without a controller, how does a given Phoenix LiveView handle the request?\nHere’s a secret: <strong>a LiveView is also an ordinary controller</strong>.</p>\n<p>Now… we may not use it like an ordinary Phoenix controller, but the request is\nfirstly handled like an ordinary web request; one with a Plug.Conn and a full\nHTML response back to the user. The LiveView spices are garnished <em>after</em> the\nHTML is delivered to the user and a new websocket is initiated to the server to\nmanage updates to it.</p>\n<p>Or, as said in the LiveView docs:</p>\n<blockquote>\n<p>A LiveView begins as a regular HTTP request and HTML response,\nand then upgrades to a stateful view on client connect,\nguaranteeing a regular HTML page even if JavaScript is disabled.\nAny time a stateful view changes or updates its socket assigns, it is\nautomatically re-rendered and the updates are pushed to the client.</p>\n</blockquote>\n<blockquote>\n<p>Prove it!</p>\n<p> — you</p>\n</blockquote>\n<p>ok ok.. I’ll prove it. To prove that it’s a regular controller, we’ll need to\nlook at some of Phoenix LiveView’s source code. Let’s look at the code that\nmakes <code class=\"language-text\">live(&quot;/my-route&quot;, MyLive)</code> work in the router.</p>\n<div class=\"gatsby-highlight\" data-language=\"elixir\"><pre class=\"language-elixir\"><code class=\"language-elixir\">defmacro live<span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">,</span> live_view<span class=\"token punctuation\">,</span> action <span class=\"token operator\">\\\\</span> <span class=\"token boolean\">nil</span><span class=\"token punctuation\">,</span> opts <span class=\"token operator\">\\\\</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">do</span>\n  quote <span class=\"token attr-name\">bind_quoted:</span> binding<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">do</span>\n    <span class=\"token punctuation\">{</span>action<span class=\"token punctuation\">,</span> router_options<span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span>\n      Phoenix<span class=\"token punctuation\">.</span>LiveView<span class=\"token punctuation\">.</span>Router<span class=\"token punctuation\">.</span>__live__<span class=\"token punctuation\">(</span>__MODULE__<span class=\"token punctuation\">,</span> live_view<span class=\"token punctuation\">,</span> action<span class=\"token punctuation\">,</span> opts<span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\"># vvvvv THIS PART</span>\n    Phoenix<span class=\"token punctuation\">.</span>Router<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">,</span> Phoenix<span class=\"token punctuation\">.</span>LiveView<span class=\"token punctuation\">.</span>Plug<span class=\"token punctuation\">,</span> action<span class=\"token punctuation\">,</span> router_options<span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># ^^^^^ THIS PART</span>\n  <span class=\"token keyword\">end</span>\n<span class=\"token keyword\">end</span></code></pre></div>\n<p>You see it?! <code class=\"language-text\">live()</code> is wrapping <code class=\"language-text\">Phoenix.Router.get(&quot;/my-route&quot;, Phoenix.LiveView.Plug, _action, _options)</code>.\nYou may recognize this as:</p>\n<div class=\"gatsby-highlight\" data-language=\"elixir\"><pre class=\"language-elixir\"><code class=\"language-elixir\">get <span class=\"token string\">\"/my-route\"</span><span class=\"token punctuation\">,</span> MyController<span class=\"token punctuation\">,</span> <span class=\"token atom symbol\">:show</span></code></pre></div>\n<p>in your own\nrouter. We’re going to ignore the action and options for this post, but the\nimportant part is that the <code class=\"language-text\">live()</code> macro is adding a GET route and calls the\n<code class=\"language-text\">Phoenix.LiveView.Plug</code></p>\n<blockquote>\n<p>But, that plug isn’t a controller…</p>\n<p>— you</p>\n</blockquote>\n<p>Ah, but it is! A Phoenix Controller, even the ones you make, are indeed all just\nplugs underneath. <strong>All Phoenix controllers are plugs</strong>.</p>\n<p><a name=\"pluggy-controllers\"></a></p>\n<h2>Pluggy Controllers</h2>\n<p>When your controllers call <code class=\"language-text\">use MyAppWeb, :controller</code>, it’s <em>injecting code</em> into\nyour controller. Let’s start at the top in our own code; but first at step 0 we\nneed to understand that when Elixir code calls <code class=\"language-text\">use MyUsingModule</code> it’s\nactually calling <code class=\"language-text\">MyUsingModule.__using__(opts)</code> at compile-time, and that\nresulting code is put into the module that called it. Knowing that, let’s follow\nthe <code class=\"language-text\">use</code> trail.</p>\n<p><strong>Warning: we’re going to look at macros now. The rules of which you thought\nElixir was governed-by, ie, immutability, may not be in effect</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"elixir\"><pre class=\"language-elixir\"><code class=\"language-elixir\"><span class=\"token comment\">######################################</span>\n<span class=\"token comment\">### Inside MyAppWeb.PageController ###</span>\n<span class=\"token comment\">######################################</span>\n\n<span class=\"token keyword\">defmodule</span> MyAppWeb<span class=\"token punctuation\">.</span>PageController <span class=\"token keyword\">do</span>\n  <span class=\"token keyword\">use</span> MyAppWeb<span class=\"token punctuation\">,</span> <span class=\"token atom symbol\">:controller</span>\n\n  <span class=\"token keyword\">def</span> home<span class=\"token punctuation\">(</span>conn<span class=\"token punctuation\">,</span> _<span class=\"token punctuation\">)</span> <span class=\"token keyword\">do</span>\n    render<span class=\"token punctuation\">(</span>conn<span class=\"token punctuation\">,</span> <span class=\"token string\">\"home.html\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">end</span>\n<span class=\"token keyword\">end</span>\n\n<span class=\"token comment\">#######################</span>\n<span class=\"token comment\">### Inside MyAppWeb ###</span>\n<span class=\"token comment\">#######################</span>\n\ndefmacro __using__<span class=\"token punctuation\">(</span>which<span class=\"token punctuation\">)</span> <span class=\"token keyword\">when</span> is_atom<span class=\"token punctuation\">(</span>which<span class=\"token punctuation\">)</span> <span class=\"token keyword\">do</span>\n  apply<span class=\"token punctuation\">(</span>__MODULE__<span class=\"token punctuation\">,</span> which<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">end</span>\n\n<span class=\"token keyword\">def</span> controller <span class=\"token keyword\">do</span>\n  quote <span class=\"token keyword\">do</span>\n    <span class=\"token comment\"># vvv let's look in here vvv</span>\n    <span class=\"token keyword\">use</span> Phoenix<span class=\"token punctuation\">.</span>Controller<span class=\"token punctuation\">,</span> <span class=\"token attr-name\">namespace:</span> MyAppWeb\n    <span class=\"token comment\"># ^^^ let's look in here ^^^</span>\n  <span class=\"token keyword\">end</span>\n<span class=\"token keyword\">end</span>\n\n\n<span class=\"token comment\">#################################</span>\n<span class=\"token comment\">### Inside Phoenix.Controller ###</span>\n<span class=\"token comment\">#################################</span>\n\ndefmacro __using__<span class=\"token punctuation\">(</span>opts<span class=\"token punctuation\">)</span> <span class=\"token keyword\">do</span>\n  quote <span class=\"token attr-name\">bind_quoted:</span> <span class=\"token punctuation\">[</span><span class=\"token attr-name\">opts:</span> opts<span class=\"token punctuation\">]</span> <span class=\"token keyword\">do</span>\n    <span class=\"token keyword\">import</span> Phoenix<span class=\"token punctuation\">.</span>Controller\n\n    <span class=\"token comment\"># vvv let's look in here vvv</span>\n    <span class=\"token keyword\">use</span> Phoenix<span class=\"token punctuation\">.</span>Controller<span class=\"token punctuation\">.</span>Pipeline<span class=\"token punctuation\">,</span> opts\n    <span class=\"token comment\"># ^^^ let's look in here ^^^</span>\n\n    <span class=\"token keyword\">if</span> Keyword<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span>opts<span class=\"token punctuation\">,</span> <span class=\"token atom symbol\">:put_default_views</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">do</span>\n      plug <span class=\"token atom symbol\">:put_new_layout</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>Phoenix<span class=\"token punctuation\">.</span>Controller<span class=\"token punctuation\">.</span>__layout__<span class=\"token punctuation\">(</span>__MODULE__<span class=\"token punctuation\">,</span> opts<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token atom symbol\">:app</span><span class=\"token punctuation\">}</span>\n      plug <span class=\"token atom symbol\">:put_new_view</span><span class=\"token punctuation\">,</span> Phoenix<span class=\"token punctuation\">.</span>Controller<span class=\"token punctuation\">.</span>__view__<span class=\"token punctuation\">(</span>__MODULE__<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">end</span>\n  <span class=\"token keyword\">end</span>\n<span class=\"token keyword\">end</span>\n\n\n<span class=\"token comment\">##########################################</span>\n<span class=\"token comment\">### Inside Phoenix.Controller.Pipeline ###</span>\n<span class=\"token comment\">##########################################</span>\n\ndefmacro __using__<span class=\"token punctuation\">(</span>opts<span class=\"token punctuation\">)</span> <span class=\"token keyword\">do</span>\n  quote <span class=\"token attr-name\">bind_quoted:</span> <span class=\"token punctuation\">[</span><span class=\"token attr-name\">opts:</span> opts<span class=\"token punctuation\">]</span> <span class=\"token keyword\">do</span>\n\n    <span class=\"token attribute variable\">@behaviour</span> Plug\n    <span class=\"token comment\">## AHA! HERE'S YOUR CONTROLLER PLUG BEHAVIOUR</span>\n\n    <span class=\"token keyword\">require</span> Phoenix<span class=\"token punctuation\">.</span>Endpoint\n    <span class=\"token keyword\">import</span> Phoenix<span class=\"token punctuation\">.</span>Controller<span class=\"token punctuation\">.</span>Pipeline\n\n    Module<span class=\"token punctuation\">.</span>register_attribute<span class=\"token punctuation\">(</span>__MODULE__<span class=\"token punctuation\">,</span> <span class=\"token atom symbol\">:plugs</span><span class=\"token punctuation\">,</span> <span class=\"token attr-name\">accumulate:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span>\n    <span class=\"token attribute variable\">@before_compile</span> Phoenix<span class=\"token punctuation\">.</span>Controller<span class=\"token punctuation\">.</span>Pipeline\n    <span class=\"token attribute variable\">@phoenix_log_level</span> Keyword<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span>opts<span class=\"token punctuation\">,</span> <span class=\"token atom symbol\">:log</span><span class=\"token punctuation\">,</span> <span class=\"token atom symbol\">:debug</span><span class=\"token punctuation\">)</span>\n    <span class=\"token attribute variable\">@phoenix_fallback</span> <span class=\"token atom symbol\">:unregistered</span>\n\n    <span class=\"token attribute variable\">@doc</span> <span class=\"token boolean\">false</span>\n    <span class=\"token keyword\">def</span> init<span class=\"token punctuation\">(</span>opts<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token attr-name\">do:</span> opts\n\n    <span class=\"token attribute variable\">@doc</span> <span class=\"token boolean\">false</span>\n    <span class=\"token keyword\">def</span> call<span class=\"token punctuation\">(</span>conn<span class=\"token punctuation\">,</span> action<span class=\"token punctuation\">)</span> <span class=\"token keyword\">when</span> is_atom<span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">)</span> <span class=\"token keyword\">do</span>\n      conn\n      <span class=\"token operator\">|></span> merge_private<span class=\"token punctuation\">(</span>\n        <span class=\"token attr-name\">phoenix_controller:</span> __MODULE__<span class=\"token punctuation\">,</span>\n        <span class=\"token attr-name\">phoenix_action:</span> action\n      <span class=\"token punctuation\">)</span>\n      <span class=\"token comment\"># fun fact, this function below was introduced</span>\n      <span class=\"token comment\"># ~6 years ago in Phoenix 0.5.0 and utilizes unhygienic functions.</span>\n      <span class=\"token comment\"># (as in you're in deep macro-land and your normal rules don't apply)</span>\n      <span class=\"token operator\">|></span> phoenix_controller_pipeline<span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">end</span>\n\n    <span class=\"token attribute variable\">@doc</span> <span class=\"token boolean\">false</span>\n    <span class=\"token keyword\">def</span> action<span class=\"token punctuation\">(</span><span class=\"token punctuation\">%</span>Plug<span class=\"token punctuation\">.</span>Conn<span class=\"token punctuation\">{</span><span class=\"token attr-name\">private:</span> <span class=\"token punctuation\">%</span><span class=\"token punctuation\">{</span><span class=\"token attr-name\">phoenix_action:</span> action<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> conn<span class=\"token punctuation\">,</span> _options<span class=\"token punctuation\">)</span> <span class=\"token keyword\">do</span>\n      apply<span class=\"token punctuation\">(</span>__MODULE__<span class=\"token punctuation\">,</span> action<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>conn<span class=\"token punctuation\">,</span> conn<span class=\"token punctuation\">.</span>params<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">end</span>\n\n    defoverridable <span class=\"token attr-name\">init:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token attr-name\">call:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token attr-name\">action:</span> <span class=\"token number\">2</span>\n  <span class=\"token keyword\">end</span>\n<span class=\"token keyword\">end</span></code></pre></div>\n<p>Wow! Wild. All this means your slim controllers actually have a lot more code in\nit than it appears, and that’s ok because it makes working in Phoenix much more\nconvenient.</p>\n<p>All plugs must implement <code class=\"language-text\">call/2</code> which accepts a conn and returns a conn. In\nour case, we’re looking for a conn that has some rendered HTML.</p>\n<p><a name=\"liveview-default-2\"></a></p>\n<h2>Back to Default Phoenix LiveView without <code class=\"language-text\">render/1</code></h2>\n<p>Now that we know that LiveViews are a <code class=\"language-text\">GET</code> request using a standard\ncontroller/plug underneath, let’s look at the <code class=\"language-text\">Phoenix.LiveView.Plug</code>. We’re\nstill looking for how a LiveView gets to the template.</p>\n<div class=\"gatsby-highlight\" data-language=\"elixir\"><pre class=\"language-elixir\"><code class=\"language-elixir\"><span class=\"token keyword\">def</span> call<span class=\"token punctuation\">(</span><span class=\"token punctuation\">%</span><span class=\"token punctuation\">{</span><span class=\"token attr-name\">private:</span> <span class=\"token punctuation\">%</span><span class=\"token punctuation\">{</span><span class=\"token attr-name\">phoenix_live_view:</span> <span class=\"token punctuation\">{</span>view<span class=\"token punctuation\">,</span> opts<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> conn<span class=\"token punctuation\">,</span> _<span class=\"token punctuation\">)</span> <span class=\"token keyword\">do</span>\n  opts <span class=\"token operator\">=</span> maybe_dispatch_session<span class=\"token punctuation\">(</span>conn<span class=\"token punctuation\">,</span> opts<span class=\"token punctuation\">)</span>\n\n  <span class=\"token comment\"># ...snip... there's a lot of code here we're going to skip</span>\n  conn\n  <span class=\"token operator\">|></span> Phoenix<span class=\"token punctuation\">.</span>Controller<span class=\"token punctuation\">.</span>put_layout<span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span>\n  <span class=\"token operator\">|></span> put_root_layout_from_router<span class=\"token punctuation\">(</span>opts<span class=\"token punctuation\">)</span>\n  <span class=\"token comment\"># this actually is piped into `Controller.live_render(view, opts)`</span>\n  <span class=\"token comment\"># but I'm going to cut/paste what that ends up doing</span>\n  <span class=\"token operator\">|></span> LiveView<span class=\"token punctuation\">.</span>Static<span class=\"token punctuation\">.</span>render<span class=\"token punctuation\">(</span>conn<span class=\"token punctuation\">,</span> view<span class=\"token punctuation\">,</span> opts<span class=\"token punctuation\">)</span>\n  <span class=\"token comment\"># ... more snipping...</span>\n  <span class=\"token operator\">|></span> to_rendered_content_tag<span class=\"token punctuation\">(</span>socket<span class=\"token punctuation\">,</span> tag<span class=\"token punctuation\">,</span> view<span class=\"token punctuation\">,</span> attrs<span class=\"token punctuation\">)</span>\n  <span class=\"token comment\"># ... more snipping...</span>\n  <span class=\"token operator\">|></span> view<span class=\"token punctuation\">.</span>render<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">#&lt;-- here here here!</span>\n<span class=\"token keyword\">end</span></code></pre></div>\n<p>Cool; this isn’t anything new so far. This is just confirming that Phoenix\nLiveView starts off as a regular HTTP request with a full HTML response. <em>how\ndoes it render?</em></p>\n<p>We see that it’s calling <code class=\"language-text\">view.render()</code> where <code class=\"language-text\">view</code> is our LiveView, but we\ndidn’t define <code class=\"language-text\">render/1</code> yet! Where’s it coming from?</p>\n<p>It’s coming from another compile-time hook, this time from <code class=\"language-text\">@before_compile</code> and\nnot our usual <code class=\"language-text\">__using__</code> friend. When we called <code class=\"language-text\">use MyAppWeb, :live_view</code> it\nkicked off a series of <code class=\"language-text\">__using__</code> like we explored earlier. One of them\nincluded a <code class=\"language-text\">@before_compile Phoenix.LiveView.Renderer</code> hook. Let’s check that\nout.</p>\n<div class=\"gatsby-highlight\" data-language=\"elixir\"><pre class=\"language-elixir\"><code class=\"language-elixir\">render? <span class=\"token operator\">=</span> Module<span class=\"token punctuation\">.</span>defines?<span class=\"token punctuation\">(</span>env<span class=\"token punctuation\">.</span>module<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token atom symbol\">:render</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\nroot <span class=\"token operator\">=</span> Path<span class=\"token punctuation\">.</span>dirname<span class=\"token punctuation\">(</span>env<span class=\"token punctuation\">.</span>file<span class=\"token punctuation\">)</span>\nfilename <span class=\"token operator\">=</span> template_filename<span class=\"token punctuation\">(</span>env<span class=\"token punctuation\">)</span>\ntemplates <span class=\"token operator\">=</span> Phoenix<span class=\"token punctuation\">.</span>Template<span class=\"token punctuation\">.</span>find_all<span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">,</span> filename<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">case</span> <span class=\"token punctuation\">{</span>render?<span class=\"token punctuation\">,</span> templates<span class=\"token punctuation\">}</span> <span class=\"token keyword\">do</span>\n  <span class=\"token punctuation\">{</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>template<span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span> <span class=\"token operator\">-></span>\n    ext <span class=\"token operator\">=</span> template <span class=\"token operator\">|></span> Path<span class=\"token punctuation\">.</span>extname<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">|></span> String<span class=\"token punctuation\">.</span>trim_leading<span class=\"token punctuation\">(</span><span class=\"token string\">\".\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">|></span> String<span class=\"token punctuation\">.</span>to_atom<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    engine <span class=\"token operator\">=</span> Map<span class=\"token punctuation\">.</span>fetch!<span class=\"token punctuation\">(</span>Phoenix<span class=\"token punctuation\">.</span>Template<span class=\"token punctuation\">.</span>engines<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> ext<span class=\"token punctuation\">)</span>\n    ast <span class=\"token operator\">=</span> engine<span class=\"token punctuation\">.</span>compile<span class=\"token punctuation\">(</span>template<span class=\"token punctuation\">,</span> filename<span class=\"token punctuation\">)</span>\n\n    quote <span class=\"token keyword\">do</span>\n      <span class=\"token attribute variable\">@file</span> unquote<span class=\"token punctuation\">(</span>template<span class=\"token punctuation\">)</span>\n      <span class=\"token attribute variable\">@external_resource</span> unquote<span class=\"token punctuation\">(</span>template<span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">def</span> render<span class=\"token punctuation\">(</span>var!<span class=\"token punctuation\">(</span>assigns<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">do</span>\n        unquote<span class=\"token punctuation\">(</span>ast<span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">end</span>\n    <span class=\"token keyword\">end</span>\n  <span class=\"token comment\"># ... other clauses</span>\n<span class=\"token keyword\">end</span></code></pre></div>\n<p>Finally! This is where the default <code class=\"language-text\">render/1</code> function comes from. Before\nyour LiveView compiles, it checks to see if a <code class=\"language-text\">render/1</code> is defined, and if not\nwill provide a default for you. The default location for LiveView templates is\nright next to the LiveView file itself. We see this from the <code class=\"language-text\">root = env.file</code>.</p>\n<p><a name=\"liveview-inline\"></a></p>\n<h2>Phoenix LiveView with inline <code class=\"language-text\">render/1</code></h2>\n<p>Probably more-likely is that you already know that your Phoenix LiveView can\nimplement <code class=\"language-text\">render/1</code>.  <a href=\"https://hexdocs.pm/phoenix_live_view/Phoenix.LiveView.html#module-life-cycle\">The docs make this pretty\nclear</a>.</p>\n<div class=\"gatsby-highlight\" data-language=\"elixir\"><pre class=\"language-elixir\"><code class=\"language-elixir\"><span class=\"token comment\">### lib/my_app_web/live/my_live.ex</span>\n<span class=\"token keyword\">defmodule</span> MyAppWeb<span class=\"token punctuation\">.</span>MyLive <span class=\"token keyword\">do</span>\n  <span class=\"token keyword\">use</span> MyAppWeb<span class=\"token punctuation\">,</span> <span class=\"token atom symbol\">:live_view</span>\n\n  <span class=\"token attribute variable\">@impl</span> Phoenix<span class=\"token punctuation\">.</span>LiveView\n  <span class=\"token keyword\">def</span> mount<span class=\"token punctuation\">(</span>_params<span class=\"token punctuation\">,</span> _session<span class=\"token punctuation\">,</span> socket<span class=\"token punctuation\">)</span> <span class=\"token keyword\">do</span>\n    <span class=\"token comment\"># do stuff</span>\n\n    <span class=\"token punctuation\">{</span><span class=\"token atom symbol\">:ok</span><span class=\"token punctuation\">,</span> socket<span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">end</span>\n\n  <span class=\"token keyword\">def</span> render<span class=\"token punctuation\">(</span>assigns<span class=\"token punctuation\">)</span> <span class=\"token keyword\">do</span>\n    ~L<span class=\"token string\">\"\"\"\n    &lt;p>Yo! I'm rendered from a &lt;%= my_helper(\"vanilla\") %> view&lt;/p>\n    \"\"\"</span>\n  <span class=\"token keyword\">end</span>\n\n  <span class=\"token keyword\">def</span> my_helper<span class=\"token punctuation\">(</span><span class=\"token string\">\"vanilla\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token attr-name\">do:</span> <span class=\"token string\">\"whoops no this is actually live\"</span>\n<span class=\"token keyword\">end</span></code></pre></div>\n<p>This feels the most similar to frontend frameworks such as Vue with\nsingle-file-components (SFCs), or React.</p>\n<p>This is a great option in case your LiveView doesn’t have a lot of HTML. Perhaps\nyou’re implementing a small widget. At some point, however, it becomes a little\ncrowded if you have a lot of business logic handling changes in the LiveView as\nwell as hundreds of lines of HTML and functions to conditionally render some\nHTML or apply CSS classes; so you might consider separating the HTML out into\nits own file.</p>\n<p><a name=\"liveview-external\"></a></p>\n<h2>Phoenix LiveView with external <code class=\"language-text\">render/1</code></h2>\n<div class=\"gatsby-highlight\" data-language=\"elixir\"><pre class=\"language-elixir\"><code class=\"language-elixir\"><span class=\"token comment\">### lib/my_app_web/live/my_live.ex</span>\n<span class=\"token keyword\">defmodule</span> MyAppWeb<span class=\"token punctuation\">.</span>MyLive <span class=\"token keyword\">do</span>\n  <span class=\"token keyword\">use</span> MyAppWeb<span class=\"token punctuation\">,</span> <span class=\"token atom symbol\">:live_view</span>\n\n  <span class=\"token attribute variable\">@impl</span> Phoenix<span class=\"token punctuation\">.</span>LiveView\n  <span class=\"token keyword\">def</span> mount<span class=\"token punctuation\">(</span>_params<span class=\"token punctuation\">,</span> _session<span class=\"token punctuation\">,</span> socket<span class=\"token punctuation\">)</span> <span class=\"token keyword\">do</span>\n    <span class=\"token comment\"># do stuff</span>\n\n    <span class=\"token punctuation\">{</span><span class=\"token atom symbol\">:ok</span><span class=\"token punctuation\">,</span> socket<span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">end</span>\n\n  <span class=\"token keyword\">def</span> render<span class=\"token punctuation\">(</span>assigns<span class=\"token punctuation\">)</span> <span class=\"token keyword\">do</span>\n    MyAppWeb<span class=\"token punctuation\">.</span>MyView<span class=\"token punctuation\">.</span>render<span class=\"token punctuation\">(</span><span class=\"token string\">\"my_live.html\"</span><span class=\"token punctuation\">,</span> assigns<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">end</span>\n<span class=\"token keyword\">end</span>\n\n\n<span class=\"token comment\">### lib/my_app_web/views/my_view.ex</span>\n<span class=\"token keyword\">defmodule</span> MyAppWeb<span class=\"token punctuation\">.</span>MyView <span class=\"token keyword\">do</span>\n  <span class=\"token keyword\">use</span> MyAppWeb<span class=\"token punctuation\">,</span> <span class=\"token atom symbol\">:view</span>\n\n  <span class=\"token keyword\">def</span> my_helper<span class=\"token punctuation\">(</span><span class=\"token string\">\"vanilla\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token attr-name\">do:</span> <span class=\"token string\">\"whoops no this is actually live\"</span>\n<span class=\"token keyword\">end</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token comment\">&lt;!-- lib/my_app_web/templates/my_view/my_live.html.leex --></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span>Yo! I'm rendered from a &lt;%= my_helper(\"vanilla\") %> view<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span>\n<span class=\"token comment\">&lt;!-- this renders \"whoops no this is actually live\" instead of \"vanilla\" --></span></code></pre></div>\n<p>If I have a lot of HTML helpers, then I tend to prefer separating that into a\nView module. It’s a little tedious to setup and separate the files, and then\njump between them when developing, but it’s clear where things should go.</p>\n<p>This bugged me though, I have HTML floating in <code class=\"language-text\">./templates</code> and sometimes in\n<code class=\"language-text\">./live</code> and sometimes inline. Can we consolidate?</p>\n<p>Sure we can! <code class=\"language-text\">Phoenix.View</code> <a href=\"https://hexdocs.pm/phoenix/Phoenix.View.html?#__using__/1\">provides an option to look for templates in a\ndifferent folder</a>.\nLet’s try it out.</p>\n<div class=\"gatsby-highlight\" data-language=\"elixir\"><pre class=\"language-elixir\"><code class=\"language-elixir\"><span class=\"token comment\">### lib/my_app_web/views/my_view.ex</span>\n<span class=\"token keyword\">defmodule</span> MyAppWeb<span class=\"token punctuation\">.</span>MyView <span class=\"token keyword\">do</span>\n  <span class=\"token keyword\">use</span> Phoenix<span class=\"token punctuation\">.</span>View<span class=\"token punctuation\">,</span>\n    <span class=\"token attr-name\">root:</span> <span class=\"token string\">\"lib/my_app_web/live\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token attr-name\">path:</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token attr-name\">namespace:</span> MyAppWeb\n  <span class=\"token comment\"># and all the other imports that come with `use MyAppWeb, :view`</span>\n\n  <span class=\"token keyword\">def</span> my_helper<span class=\"token punctuation\">(</span><span class=\"token string\">\"vanilla\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token attr-name\">do:</span> <span class=\"token string\">\"whoops no this is actually live\"</span>\n<span class=\"token keyword\">end</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token comment\">&lt;!-- lib/my_app_web/live/my_live.html.leex --></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span>Yo! I'm rendered from a &lt;%= my_helper(\"vanilla\") %> view<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span>\n<span class=\"token comment\">&lt;!-- this renders \"whoops no this is actually live\" instead of \"vanilla\" --></span></code></pre></div>\n<p>It’s exactly the same, except where the HTML is on disk and that we can’t use\nour <code class=\"language-text\">use MyAppWeb, :view</code> as-is anymore without some further adjustment. To\nprove the concept though, copy out all the additional imports you find for views\nin <code class=\"language-text\">my_app_web.ex</code> and place it here for now. If it works out, then you can add\nanother clause in <code class=\"language-text\">my_app_web.ex</code> to handle these kinds of views. Maybe\nsomething like this.</p>\n<div class=\"gatsby-highlight\" data-language=\"elixir\"><pre class=\"language-elixir\"><code class=\"language-elixir\"><span class=\"token comment\">### lib/my_app_web.ex</span>\n\n<span class=\"token keyword\">def</span> view_for_live <span class=\"token keyword\">do</span>\n  quote <span class=\"token keyword\">do</span>\n    <span class=\"token keyword\">use</span> Phoenix<span class=\"token punctuation\">.</span>View<span class=\"token punctuation\">,</span>\n      <span class=\"token attr-name\">root:</span> <span class=\"token string\">\"lib/my_app_web/live\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token attr-name\">path:</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token attr-name\">namespace:</span> MyAppWeb\n\n    <span class=\"token comment\"># Import convenience functions from controllers</span>\n    <span class=\"token keyword\">import</span> Phoenix<span class=\"token punctuation\">.</span>Controller<span class=\"token punctuation\">,</span> <span class=\"token attr-name\">only:</span> <span class=\"token punctuation\">[</span><span class=\"token attr-name\">get_flash:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token attr-name\">get_flash:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token attr-name\">view_module:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n\n    <span class=\"token comment\"># Use all HTML functionality (forms, tags, etc)</span>\n    <span class=\"token keyword\">use</span> Phoenix<span class=\"token punctuation\">.</span>HTML\n\n    <span class=\"token keyword\">import</span> MyAppWeb<span class=\"token punctuation\">.</span>ErrorHelpers\n    <span class=\"token keyword\">import</span> MyAppWeb<span class=\"token punctuation\">.</span>Gettext\n    <span class=\"token keyword\">import</span> Phoenix<span class=\"token punctuation\">.</span>LiveView<span class=\"token punctuation\">.</span>Helpers\n    <span class=\"token keyword\">import</span> MyAppWeb<span class=\"token punctuation\">.</span>LiveHelpers\n    <span class=\"token keyword\">alias</span> MyAppWeb<span class=\"token punctuation\">.</span>Router<span class=\"token punctuation\">.</span>Helpers<span class=\"token punctuation\">,</span> <span class=\"token attr-name\">as:</span> Routes\n  <span class=\"token keyword\">end</span>\n<span class=\"token keyword\">end</span>\n\n<span class=\"token comment\"># and then use this instead for your LiveView-centric Views</span>\n<span class=\"token comment\">### lib/my_app_web/views/my_view.ex</span>\n<span class=\"token keyword\">defmodule</span> MyAppWeb<span class=\"token punctuation\">.</span>MyView <span class=\"token keyword\">do</span>\n  <span class=\"token keyword\">use</span> MyAppWeb<span class=\"token punctuation\">,</span> <span class=\"token atom symbol\">:view_for_live</span>\n\n  <span class=\"token keyword\">def</span> my_helper<span class=\"token punctuation\">(</span><span class=\"token string\">\"vanilla\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token attr-name\">do:</span> <span class=\"token string\">\"whoops no this is actually live\"</span>\n<span class=\"token keyword\">end</span></code></pre></div>\n<h2>What about LiveComponents?</h2>\n<p>LiveComponents are totally ignored in this article. They’re another great option\nfor breaking out interactive partials from your LiveViews. Their rendering\nstrategy is very similar to LiveViews though, and most of this applies to them\nas well.</p>\n<p>Hope these tips help you out! If you have any more tips, tweet at me\n<a href=\"https://twitter.com/bernheisel\">@bernheisel</a></p>","frontmatter":{"title":"Phoenix LiveView and Views","date":"June 29, 2020","tags":["elixir","phoenix"],"originalUrl":null}}},"pageContext":{"slug":"/blog/phoenix-liveview-and-views/","previous":{"fields":{"slug":"/blog/starting-a-new-podcast/"},"frontmatter":{"title":"Starting a New Podcast with Thinking |> Elixir","tags":["elixir","podcast"],"originalUrl":null,"excerpt":"I joined the Thinking |> Elixir Podcast! I would really love it if you shared\nit with shared with your friends who know or are discovering Elixir.\n"}},"next":null}}}